                ;;*****************************************************************************
                ;;*****************************************************************************
                ;;  FILENAME:   LCD.asm
                ;;  Version: 1.60, Updated on 2015/3/4 at 22:26:36
                ;;  Generated by PSoC Designer 5.4.3191
                ;;
                ;;  DESCRIPTION: LCD User Module software implementation file.
                ;;
                ;; This set of functions is written for the common 2 and 4 line
                ;; LCDs that use the Hitachi HD44780A controller.
                ;;
                ;;  LCD connections to PSoC port
                ;;
                ;;    PX.0 ==> LCD D4
                ;;    PX.1 ==> LCD D5
                ;;    PX.2 ==> LCD D6
                ;;    PX.3 ==> LCD D7
                ;;    PX.4 ==> LCD E
                ;;    PX.5 ==> LCD RS
                ;;    PX.6 ==> LCD R/W
                ;;
                ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                ;;        arguments and observe the associated "Registers are volatile" policy.
                ;;        This means it is the caller's responsibility to preserve any values
                ;;        in the X and A registers that are still needed after the API functions
                ;;        returns. For Large Memory Model devices it is also the caller's 
                ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                ;;        MVW_PP registers. Even though some of these registers may not be modified
                ;;        now, there is no guarantee that will remain the case in future releases.
                ;;-----------------------------------------------------------------------------
                ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                ;;*****************************************************************************
                ;;*****************************************************************************
                
 0010           FLAG_XIO_MASK:  equ 10h
 0008           FLAG_SUPER:     equ 08h
 0004           FLAG_CARRY:     equ 04h
 0002           FLAG_ZERO:      equ 02h
 0001           FLAG_GLOBAL_IE: equ 01h
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 0
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
 0001           PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
 0002           PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
 0003           PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
 0000           ; Port 1
 0004           PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
 0005           PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
 0006           PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
 0007           PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
 0000           ; Port 2
 0008           PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
 0009           PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
 000A           PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
 000B           PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00DR0:     equ 20h          ; data register 0                          (#)
 0021           DBB00DR1:     equ 21h          ; data register 1                          (W)
 0022           DBB00DR2:     equ 22h          ; data register 2                          (RW)
 0023           DBB00CR0:     equ 23h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01DR0:     equ 24h          ; data register 0                          (#)
 0025           DBB01DR1:     equ 25h          ; data register 1                          (W)
 0026           DBB01DR2:     equ 26h          ; data register 2                          (RW)
 0027           DBB01CR0:     equ 27h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02DR0:     equ 28h          ; data register 0                          (#)
 0029           DCB02DR1:     equ 29h          ; data register 1                          (W)
 002A           DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
 002B           DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03DR0:     equ 2Ch          ; data register 0                          (#)
 002D           DCB03DR1:     equ 2Dh          ; data register 1                          (W)
 002E           DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
 002F           DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
 0000           
 0000           ;-------------------------------------
 0000           ;  Analog Resource Control Registers
 0000           ;-------------------------------------
 0060           AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
 000C           AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
 0003           AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
 0000           
 0063           ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
 0040           ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
 0038           ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
 0007           ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
 0004           ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
 0003           ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
 0000           
 0064           CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
 0020           CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
 0010           CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
 0002           CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
 0001           CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
 0000           
 0065           ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
 0070           ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
 0008           ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
 0006           ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
 0001           ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
 0000           
 0066           CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
 0020           CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
 0010           CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
 0000           
 0000           ;---------------------------------------------------
 0000           ;  Analog PSoC block Registers
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;---------------------------------------------------
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 0
 0070           ACB00CR3:     equ 70h          ; Control register 3                       (RW)
 0071           ACB00CR0:     equ 71h          ; Control register 0                       (RW)
 0072           ACB00CR1:     equ 72h          ; Control register 1                       (RW)
 0073           ACB00CR2:     equ 73h          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 1
 0074           ACB01CR3:     equ 74h          ; Control register 3                       (RW)
 0075           ACB01CR0:     equ 75h          ; Control register 0                       (RW)
 0076           ACB01CR1:     equ 76h          ; Control register 1                       (RW)
 0077           ACB01CR2:     equ 77h          ; Control register 2                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 1 Col 0
 0080           ASC10CR0:     equ 80h          ; Control register 0                       (RW)
 0081           ASC10CR1:     equ 81h          ; Control register 1                       (RW)
 0082           ASC10CR2:     equ 82h          ; Control register 2                       (RW)
 0083           ASC10CR3:     equ 83h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 1 Col 1
 0084           ASD11CR0:     equ 84h          ; Control register 0                       (RW)
 0085           ASD11CR1:     equ 85h          ; Control register 1                       (RW)
 0086           ASD11CR2:     equ 86h          ; Control register 2                       (RW)
 0087           ASD11CR3:     equ 87h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 2 Col 0
 0090           ASD20CR0:     equ 90h          ; Control register 0                       (RW)
 0091           ASD20CR1:     equ 91h          ; Control register 1                       (RW)
 0092           ASD20CR2:     equ 92h          ; Control register 2                       (RW)
 0093           ASD20CR3:     equ 93h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 2 Col 1
 0094           ASC21CR0:     equ 94h          ; Control register 0                       (RW)
 0095           ASC21CR1:     equ 95h          ; Control register 1                       (RW)
 0096           ASC21CR2:     equ 96h          ; Control register 2                       (RW)
 0097           ASC21CR3:     equ 97h          ; Control register 3                       (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Row Digital Interconnects
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;------------------------------------------------
 0000           
 00B0           RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
 00B1           RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
 00B2           RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
 00B3           RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
 00B4           RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
 00B5           RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
 00B6           RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  I2C Configuration Registers
 0000           ;------------------------------------------------
 00D6           I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
 0040           I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
 0020           I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
 0010           I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
 0000           I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
 0004           I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
 0008           I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
 000C           I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
 000C           I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
 0002           I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
 0001           I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
 0000           
 00D7           I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
 0080           I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
 0040           I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
 0020           I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
 0010           I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
 0008           I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
 0004           I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
 0002           I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
 0001           I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
 0000           
 00D8           I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
 0000           
 00D9           I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
 0008           I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
 0004           I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
 0002           I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
 0001           I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;------------------------------------------------
 00DA           INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
 0000                                          ; Use INT_MSK0 bit field masks
 00DB           INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
 0000                                          ; Use INT_MSK1 bit field masks
 00DD           INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
 0000                                          ; Use INT_MSK3 bit field masks
 0000           
 00DE           INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
 0080           INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
 0001           INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
 0000           
 00E0           INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
 0080           INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
 0040           INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
 0020           INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
 0004           INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
 0002           INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
 0001           INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
 0000           
 00E1           INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
 0008           INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
 0004           INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
 0002           INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
 0001           INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
 0000           
 00E2           INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
 00E3           RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
 0000           
 0000           ; DECIMATOR Registers
 00E4           DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
 00E5           DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
 00E6           DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
 00E7           DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
 0000           
 0000           ; Multiplier and MAC (Multiply/Accumulate) Unit
 00E8           MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
 00E9           MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
 00EA           MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
 00EB           MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
 00EC           MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
 00EC           ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
 00ED           MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
 00ED           ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
 00EE           MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
 00EE           ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
 00EF           MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
 00EF           ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  System Status and Control Registers
 0000           ;
 0000           ;  Note: The following registers are mapped into both
 0000           ;        register bank 0 AND register bank 1.
 0000           ;------------------------------------------------------
 00F7           CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
 0000                                              ; Use FLAG_ masks defined at top of file
 0000           
 00FE           CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
 0010           CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
 0080           CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
 0008           CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
 0004           CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
 0001           CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
 0000           
 00FF           CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
 0080           CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
 0020           CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
 0010           CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
 0008           CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
 0001           CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 1
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
 0001           PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
 0002           PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
 0003           PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 1
 0004           PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
 0005           PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
 0006           PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
 0007           PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 2
 0008           PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
 0009           PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
 000A           PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
 000B           PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00FN:      equ 20h          ; Function Register                        (RW)
 0021           DBB00IN:      equ 21h          ;    Input Register                        (RW)
 0022           DBB00OU:      equ 22h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01FN:      equ 24h          ; Function Register                        (RW)
 0025           DBB01IN:      equ 25h          ;    Input Register                        (RW)
 0026           DBB01OU:      equ 26h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02FN:      equ 28h          ; Function Register                        (RW)
 0029           DCB02IN:      equ 29h          ;    Input Register                        (RW)
 002A           DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03FN:      equ 2Ch          ; Function Register                        (RW)
 002D           DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
 002E           DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0060           CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
 000C           CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
 0003           CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
 0000           
 0061           CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
 0040           CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
 0038           CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
 0007           CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
 0000           
 0062           ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
 0080           ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
 0020           ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
 0008           ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
 0002           ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
 0001           ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
 0000           
 0063           AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
 0070           AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
 0007           AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
 0000           
 0066           AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
 0070           AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
 0007           AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
 0000           
 0067           ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
 00F0           ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
 000F           ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
 0000           
 0068           ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
 00F0           ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
 000F           ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
 0000           
 0069           CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
 0008           CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
 0001           CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
 0000           
 0000           ;------------------------------------------------
 0000           ;  Global Digital Interconnects
 0000           ;------------------------------------------------
 0000           
 00D0           GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
 00D1           GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
 00D2           GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
 00D3           GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Clock and System Control Registers
 0000           ;------------------------------------------------
 0000           
 00DD           OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
 0080           OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
 0040           OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
 0020           OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
 0010           OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
 0008           OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
 0004           OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
 0002           OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
 0001           OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
 0000           
 00DE           OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
 0003           OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
 0000           
 00DF           OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
 0000           
 00E0           OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
 0080           OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
 0040           OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
 0020           OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
 0018           OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
 0000           OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
 0008           OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
 0010           OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
 0018           OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
 0007           OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
 0000           OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
 0001           OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
 0002           OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
 0003           OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
 0004           OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
 0005           OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
 0006           OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
 0007           OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
 0000           
 00E1           OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
 00F0           OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
 000F           OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
 0000           
 00E2           OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
 0080           OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
 0004           OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
 0002           OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
 0001           OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
 0000           
 00E3           VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
 0080           VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
 0030           VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
 0000           VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
 0010           VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
 0020           VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
 0008           VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
 0007           VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
 0000           VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
 0010           VLT_CR_4V5_POR:       equ 10h    ;    deprecated
 0020           VLT_CR_4V75_POR:      equ 20h    ;    deprecated
 0030           VLT_CR_DISABLE:       equ 30h    ;    deprecated
 0000           
 00E4           VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
 0004           VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
 0002           VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
 0001           VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
 0000           
 00E8           IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
 00E9           ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
 00EA           BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
 00EB           ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
 0000           
 0000           ;;=============================================================================
 0000           ;;      M8C System Macros
 0000           ;;  These macros should be used when their functions are needed.
 0000           ;;=============================================================================
 0000           
 0000           ;----------------------------------------------------
 0000           ;  Swapping Register Banks
 0000           ;----------------------------------------------------
 0000               macro M8C_SetBank0
 0000               and   F, ~FLAG_XIO_MASK
 0000               macro M8C_SetBank1
 0000               or    F, FLAG_XIO_MASK
 0000               macro M8C_EnableGInt
 0000               or    F, FLAG_GLOBAL_IE
 0000               macro M8C_DisableGInt
 0000               and   F, ~FLAG_GLOBAL_IE
 0000               macro M8C_DisableIntMask
 0000               and   reg[@0], ~@1              ; disable specified interrupt enable bit
 0000               macro M8C_EnableIntMask
 0000               or    reg[@0], @1               ; enable specified interrupt enable bit
 0000               macro M8C_ClearIntFlag
 0000               mov   reg[@0], ~@1              ; clear specified interrupt enable bit
 0000               macro M8C_EnableWatchDog
 0000               and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
 0000               macro M8C_ClearWDT
 0000               mov   reg[RES_WDT], 00h
 0000               macro M8C_ClearWDTAndSleep
 0000               mov   reg[RES_WDT], 38h
 0000               macro M8C_Stall
 0000               or    reg[ASY_CR], ASY_CR_SYNCEN
 0000               macro M8C_Unstall
 0000               and   reg[ASY_CR], ~ASY_CR_SYNCEN
 0000               macro M8C_Sleep
 0000               or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
 0000               ; The next instruction to be executed depends on the state of the
 0000               ; various interrupt enable bits. If some interrupts are enabled
 0000               ; and the global interrupts are disabled, the next instruction will
 0000               ; be the one that follows the invocation of this macro. If global
 0000               ; interrupts are also enabled then the next instruction will be
 0000               ; from the interrupt vector table. If no interrupts are enabled
 0000               ; then the CPU sleeps forever.
 0000               macro M8C_Stop
 0000               ; In general, you probably don't want to do this, but here's how:
 0000               or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
 0000               ; Next instruction to be executed is located in the interrupt
 0000               ; vector table entry for Power-On Reset.
 0000               macro M8C_Reset
 0000               ; Restore CPU to the power-on reset state.
 0000               mov A, 0
 0000               SSC
 0000               ; Next non-supervisor instruction will be at interrupt vector 0.
 0000               macro Suspend_CodeCompressor
 0000               or   F, 0
 0000               macro Resume_CodeCompressor
 0000               add  SP, 0
 0000           SYSTEM_STACK_PAGE: equ 0   
 0000           SYSTEM_STACK_BASE_ADDR: equ 0h   
 0000           SYSTEM_LARGE_MEMORY_MODEL: equ 0   
 0001           SYSTEM_SMALL_MEMORY_MODEL: equ 1   
 0001           IMAGECRAFT: equ 1   
 0002           HITECH: equ 2   
 0001           TOOLCHAIN: equ IMAGECRAFT   
 0001           SYSTEM_TOOLS: equ 1   
 0001           SYSTEM_IDXPG_TRACKS_STK_PP: equ 1   
 0000           SYSTEM_IDXPG_TRACKS_IDX_PP: equ 0   
 0000           SYSTEM_MULTIPAGE_STACK: equ 0 
 0000           
 0000           
 0000           ;  ******* Function Class Definitions *******
 0000           ;
 0000           ;  These definitions are used to describe RAM access patterns. They provide
 0000           ;  documentation and they control prologue and epilogue macros that perform
 0000           ;  the necessary housekeeping functions for a large memory model device like
 0000           ;  the CY8C24000.
 0000           
 0001           RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
 0002           RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
 0004           RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
 0008           RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
 0000           
 0000           ; ******* Hi Tech Specific *******
 0000           ; Turn on the expansion of all macros by default
                IF (TOOLCHAIN & HITECH)
                OPT EXPAND
                ENDIF
                ;  ******* Page Pointer Manipulation Macros *******
                ;
                ;  Most of the following macros are conditionally compiled so they only
                ;  produce code if the large memory model is selected.
                
                   ;-----------------------------------------------
                   ;  Set Stack Page Macro
                   ;-----------------------------------------------
                   ;
                   ;  DESC: Modify STK_PP in the large or small memory Models.
                   ;
                   ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
                   ;        which stack operations like PUSH and POP store and retrieve their
                   ;        data
                   ;
                   ;  COST: 8 instruction cycles (in LMM only)
                
 0000              macro RAM_SETPAGE_STK( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[STK_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_CUR( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[CUR_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_IDX( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[IDX_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_MVR( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[MVR_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_MVW( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[MVW_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_IDX2STK
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 IF ( SYSTEM_MULTIPAGE_STACK )
 0000                    mov   A, reg[STK_PP]
 0000                    mov   reg[IDX_PP], A
 0000                 ELSE
 0000                    RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
 0000                 ENDIF
 0000              ENDIF
 0000              macro RAM_CHANGE_PAGE_MODE( MODE )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 0000                 or    F,  FLAG_PGMODE_MASK & @MODE
 0000              ENDIF
 0000              macro RAM_SET_NATIVE_PAGING
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000              IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                 or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
 0000              ENDIF ;  PGMODE LOCKED
 0000              IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                 or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
 0000              ENDIF ; PGMODE FREE
 0000              ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_RESTORE_NATIVE_PAGING
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000              IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                 RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
 0000              ENDIF ;  PGMODE LOCKED
 0000              IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                 RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
 0000              ENDIF ; PGMODE FREE
 0000              ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_X_POINTS_TO_STACKPAGE
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 or   F, FLAG_PGMODE_01b
 0000              ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_X_POINTS_TO_INDEXPAGE
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 and  F, ~FLAG_PGMODE_01b
 0000              ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_PROLOGUE( ACTUAL_CLASS )
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_1
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
 0000                 IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                    RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
 0000                 ENDIF
 0000              ENDIF ; RAM_USE_CLASS_2
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
 0000                 IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                    RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
 0000                 ENDIF
 0000              ENDIF ; RAM_USE_CLASS_3
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_4
 0000           
 0000              macro RAM_EPILOGUE( ACTUAL_CLASS )
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_1
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
 0000                 RAM_RESTORE_NATIVE_PAGING
 0000              ENDIF ; RAM_USE_CLASS_2
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
 0000                 RAM_RESTORE_NATIVE_PAGING
 0000              ENDIF ; RAM_USE_CLASS_3
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_4
 0000           
 0000              macro REG_PRESERVE( IOReg )
 0000              mov   A, reg[ @IOReg ]
 0000              push  A
 0000              macro REG_RESTORE( IOReg )
 0000              pop   A
 0000              mov   reg[ @IOReg ], A
 0000              macro ISR_PRESERVE_PAGE_POINTERS
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 REG_PRESERVE CUR_PP
 0000                 REG_PRESERVE IDX_PP
 0000                 REG_PRESERVE MVR_PP
 0000                 REG_PRESERVE MVW_PP
 0000              ENDIF
 0000              macro ISR_RESTORE_PAGE_POINTERS
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 REG_RESTORE MVW_PP
 0000                 REG_RESTORE MVR_PP
 0000                 REG_RESTORE IDX_PP
 0000                 REG_RESTORE CUR_PP
 0000              ENDIF
 0000           macro PRESERVE_CPU_CONTEXT
 0000           IF ( TOOLCHAIN & IMAGECRAFT )
 0000             PUSH A
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               ISR_PRESERVE_PAGE_POINTERS
 0000               RAM_RESTORE_NATIVE_PAGING
 0000               MOV reg[CUR_PP], >__r0 ;Set CUR_PP to same page as virtual registers
 0000             ENDIF
 0000             MOV A, [__r0]
 0000             PUSH A
 0000             MOV A, [__r1]
 0000             PUSH A
 0000             MOV A, [__r2]
 0000             PUSH A
 0000             MOV A, [__r3]
 0000             PUSH A
 0000             MOV A, [__r4]
 0000             PUSH A
 0000             MOV A, [__r5]
 0000             PUSH A
 0000             MOV A, [__r6]
 0000             PUSH A
 0000             MOV A, [__r7]
 0000             PUSH A
 0000             MOV A, [__r8]
 0000             PUSH A
 0000             MOV A, [__r9]
 0000             PUSH A
 0000             MOV A, [__r10]
 0000             PUSH A
 0000             MOV A, [__r11]
 0000             PUSH A
 0000             MOV A, [__rX]
 0000             PUSH A
 0000             MOV A, [__rY]
 0000             PUSH A
 0000             MOV A, [__rZ]
 0000             PUSH A
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               MOV REG[CUR_PP], 0
 0000             ENDIF
 0000           ENDIF
 0000           macro RESTORE_CPU_CONTEXT
 0000           IF ( TOOLCHAIN & IMAGECRAFT )
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               RAM_RESTORE_NATIVE_PAGING
 0000               MOV reg[CUR_PP], >__r0 ;Set CUR_PP to same page as virtual registers
 0000             ENDIF
 0000             POP A
 0000             MOV [__rZ], A
 0000             POP A
 0000             MOV [__rY], A
 0000             POP A
 0000             MOV [__rX], A
 0000             POP A
 0000             MOV [__r11], A
 0000             POP A
 0000             MOV [__r10], A
 0000             POP A
 0000             MOV [__r9], A
 0000             POP A
 0000             MOV [__r8], A
 0000             POP A
 0000             MOV [__r7], A
 0000             POP A
 0000             MOV [__r6], A
 0000             POP A
 0000             MOV [__r5], A
 0000             POP A
 0000             MOV [__r4], A
 0000             POP A
 0000             MOV [__r3], A
 0000             POP A
 0000             MOV [__r2], A
 0000             POP A
 0000             MOV [__r1], A
 0000             POP A
 0000             MOV [__r0], A
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               ISR_RESTORE_PAGE_POINTERS
 0000               AND F, FLAG_PGMODE_0
 0000             ENDIF
 0000             POP A
 0000           ENDIF
 0010           FLAG_XIO_MASK:  equ 10h
 0008           FLAG_SUPER:     equ 08h
 0004           FLAG_CARRY:     equ 04h
 0002           FLAG_ZERO:      equ 02h
 0001           FLAG_GLOBAL_IE: equ 01h
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 0
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
 0001           PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
 0002           PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
 0003           PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
 0000           ; Port 1
 0004           PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
 0005           PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
 0006           PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
 0007           PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
 0000           ; Port 2
 0008           PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
 0009           PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
 000A           PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
 000B           PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00DR0:     equ 20h          ; data register 0                          (#)
 0021           DBB00DR1:     equ 21h          ; data register 1                          (W)
 0022           DBB00DR2:     equ 22h          ; data register 2                          (RW)
 0023           DBB00CR0:     equ 23h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01DR0:     equ 24h          ; data register 0                          (#)
 0025           DBB01DR1:     equ 25h          ; data register 1                          (W)
 0026           DBB01DR2:     equ 26h          ; data register 2                          (RW)
 0027           DBB01CR0:     equ 27h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02DR0:     equ 28h          ; data register 0                          (#)
 0029           DCB02DR1:     equ 29h          ; data register 1                          (W)
 002A           DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
 002B           DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03DR0:     equ 2Ch          ; data register 0                          (#)
 002D           DCB03DR1:     equ 2Dh          ; data register 1                          (W)
 002E           DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
 002F           DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
 0000           
 0000           ;-------------------------------------
 0000           ;  Analog Resource Control Registers
 0000           ;-------------------------------------
 0060           AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
 000C           AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
 0003           AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
 0000           
 0063           ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
 0040           ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
 0038           ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
 0007           ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
 0004           ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
 0003           ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
 0000           
 0064           CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
 0020           CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
 0010           CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
 0002           CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
 0001           CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
 0000           
 0065           ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
 0070           ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
 0008           ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
 0006           ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
 0001           ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
 0000           
 0066           CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
 0020           CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
 0010           CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
 0000           
 0000           ;---------------------------------------------------
 0000           ;  Analog PSoC block Registers
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;---------------------------------------------------
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 0
 0070           ACB00CR3:     equ 70h          ; Control register 3                       (RW)
 0071           ACB00CR0:     equ 71h          ; Control register 0                       (RW)
 0072           ACB00CR1:     equ 72h          ; Control register 1                       (RW)
 0073           ACB00CR2:     equ 73h          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 1
 0074           ACB01CR3:     equ 74h          ; Control register 3                       (RW)
 0075           ACB01CR0:     equ 75h          ; Control register 0                       (RW)
 0076           ACB01CR1:     equ 76h          ; Control register 1                       (RW)
 0077           ACB01CR2:     equ 77h          ; Control register 2                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 1 Col 0
 0080           ASC10CR0:     equ 80h          ; Control register 0                       (RW)
 0081           ASC10CR1:     equ 81h          ; Control register 1                       (RW)
 0082           ASC10CR2:     equ 82h          ; Control register 2                       (RW)
 0083           ASC10CR3:     equ 83h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 1 Col 1
 0084           ASD11CR0:     equ 84h          ; Control register 0                       (RW)
 0085           ASD11CR1:     equ 85h          ; Control register 1                       (RW)
 0086           ASD11CR2:     equ 86h          ; Control register 2                       (RW)
 0087           ASD11CR3:     equ 87h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 2 Col 0
 0090           ASD20CR0:     equ 90h          ; Control register 0                       (RW)
 0091           ASD20CR1:     equ 91h          ; Control register 1                       (RW)
 0092           ASD20CR2:     equ 92h          ; Control register 2                       (RW)
 0093           ASD20CR3:     equ 93h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 2 Col 1
 0094           ASC21CR0:     equ 94h          ; Control register 0                       (RW)
 0095           ASC21CR1:     equ 95h          ; Control register 1                       (RW)
 0096           ASC21CR2:     equ 96h          ; Control register 2                       (RW)
 0097           ASC21CR3:     equ 97h          ; Control register 3                       (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Row Digital Interconnects
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;------------------------------------------------
 0000           
 00B0           RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
 00B1           RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
 00B2           RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
 00B3           RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
 00B4           RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
 00B5           RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
 00B6           RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  I2C Configuration Registers
 0000           ;------------------------------------------------
 00D6           I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
 0040           I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
 0020           I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
 0010           I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
 0000           I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
 0004           I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
 0008           I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
 000C           I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
 000C           I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
 0002           I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
 0001           I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
 0000           
 00D7           I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
 0080           I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
 0040           I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
 0020           I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
 0010           I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
 0008           I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
 0004           I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
 0002           I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
 0001           I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
 0000           
 00D8           I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
 0000           
 00D9           I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
 0008           I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
 0004           I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
 0002           I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
 0001           I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;------------------------------------------------
 00DA           INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
 0000                                          ; Use INT_MSK0 bit field masks
 00DB           INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
 0000                                          ; Use INT_MSK1 bit field masks
 00DD           INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
 0000                                          ; Use INT_MSK3 bit field masks
 0000           
 00DE           INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
 0080           INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
 0001           INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
 0000           
 00E0           INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
 0080           INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
 0040           INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
 0020           INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
 0004           INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
 0002           INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
 0001           INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
 0000           
 00E1           INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
 0008           INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
 0004           INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
 0002           INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
 0001           INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
 0000           
 00E2           INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
 00E3           RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
 0000           
 0000           ; DECIMATOR Registers
 00E4           DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
 00E5           DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
 00E6           DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
 00E7           DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
 0000           
 0000           ; Multiplier and MAC (Multiply/Accumulate) Unit
 00E8           MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
 00E9           MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
 00EA           MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
 00EB           MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
 00EC           MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
 00EC           ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
 00ED           MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
 00ED           ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
 00EE           MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
 00EE           ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
 00EF           MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
 00EF           ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  System Status and Control Registers
 0000           ;
 0000           ;  Note: The following registers are mapped into both
 0000           ;        register bank 0 AND register bank 1.
 0000           ;------------------------------------------------------
 00F7           CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
 0000                                              ; Use FLAG_ masks defined at top of file
 0000           
 00FE           CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
 0010           CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
 0080           CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
 0008           CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
 0004           CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
 0001           CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
 0000           
 00FF           CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
 0080           CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
 0020           CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
 0010           CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
 0008           CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
 0001           CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 1
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
 0001           PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
 0002           PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
 0003           PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 1
 0004           PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
 0005           PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
 0006           PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
 0007           PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 2
 0008           PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
 0009           PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
 000A           PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
 000B           PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00FN:      equ 20h          ; Function Register                        (RW)
 0021           DBB00IN:      equ 21h          ;    Input Register                        (RW)
 0022           DBB00OU:      equ 22h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01FN:      equ 24h          ; Function Register                        (RW)
 0025           DBB01IN:      equ 25h          ;    Input Register                        (RW)
 0026           DBB01OU:      equ 26h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02FN:      equ 28h          ; Function Register                        (RW)
 0029           DCB02IN:      equ 29h          ;    Input Register                        (RW)
 002A           DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03FN:      equ 2Ch          ; Function Register                        (RW)
 002D           DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
 002E           DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0060           CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
 000C           CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
 0003           CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
 0000           
 0061           CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
 0040           CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
 0038           CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
 0007           CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
 0000           
 0062           ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
 0080           ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
 0020           ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
 0008           ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
 0002           ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
 0001           ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
 0000           
 0063           AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
 0070           AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
 0007           AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
 0000           
 0066           AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
 0070           AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
 0007           AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
 0000           
 0067           ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
 00F0           ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
 000F           ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
 0000           
 0068           ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
 00F0           ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
 000F           ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
 0000           
 0069           CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
 0008           CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
 0001           CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
 0000           
 0000           ;------------------------------------------------
 0000           ;  Global Digital Interconnects
 0000           ;------------------------------------------------
 0000           
 00D0           GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
 00D1           GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
 00D2           GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
 00D3           GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Clock and System Control Registers
 0000           ;------------------------------------------------
 0000           
 00DD           OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
 0080           OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
 0040           OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
 0020           OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
 0010           OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
 0008           OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
 0004           OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
 0002           OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
 0001           OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
 0000           
 00DE           OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
 0003           OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
 0000           
 00DF           OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
 0000           
 00E0           OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
 0080           OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
 0040           OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
 0020           OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
 0018           OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
 0000           OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
 0008           OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
 0010           OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
 0018           OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
 0007           OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
 0000           OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
 0001           OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
 0002           OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
 0003           OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
 0004           OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
 0005           OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
 0006           OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
 0007           OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
 0000           
 00E1           OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
 00F0           OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
 000F           OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
 0000           
 00E2           OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
 0080           OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
 0004           OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
 0002           OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
 0001           OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
 0000           
 00E3           VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
 0080           VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
 0030           VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
 0000           VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
 0010           VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
 0020           VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
 0008           VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
 0007           VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
 0000           VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
 0010           VLT_CR_4V5_POR:       equ 10h    ;    deprecated
 0020           VLT_CR_4V75_POR:      equ 20h    ;    deprecated
 0030           VLT_CR_DISABLE:       equ 30h    ;    deprecated
 0000           
 00E4           VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
 0004           VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
 0002           VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
 0001           VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
 0000           
 00E8           IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
 00E9           ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
 00EA           BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
 00EB           ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
 0000           
 0000           ;;=============================================================================
 0000           ;;      M8C System Macros
 0000           ;;  These macros should be used when their functions are needed.
 0000           ;;=============================================================================
 0000           
 0000           ;----------------------------------------------------
 0000           ;  Swapping Register Banks
 0000           ;----------------------------------------------------
 0000               macro M8C_SetBank0
 0000               and   F, ~FLAG_XIO_MASK
 0000               macro M8C_SetBank1
 0000               or    F, FLAG_XIO_MASK
 0000               macro M8C_EnableGInt
 0000               or    F, FLAG_GLOBAL_IE
 0000               macro M8C_DisableGInt
 0000               and   F, ~FLAG_GLOBAL_IE
 0000               macro M8C_DisableIntMask
 0000               and   reg[@0], ~@1              ; disable specified interrupt enable bit
 0000               macro M8C_EnableIntMask
 0000               or    reg[@0], @1               ; enable specified interrupt enable bit
 0000               macro M8C_ClearIntFlag
 0000               mov   reg[@0], ~@1              ; clear specified interrupt enable bit
 0000               macro M8C_EnableWatchDog
 0000               and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
 0000               macro M8C_ClearWDT
 0000               mov   reg[RES_WDT], 00h
 0000               macro M8C_ClearWDTAndSleep
 0000               mov   reg[RES_WDT], 38h
 0000               macro M8C_Stall
 0000               or    reg[ASY_CR], ASY_CR_SYNCEN
 0000               macro M8C_Unstall
 0000               and   reg[ASY_CR], ~ASY_CR_SYNCEN
 0000               macro M8C_Sleep
 0000               or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
 0000               ; The next instruction to be executed depends on the state of the
 0000               ; various interrupt enable bits. If some interrupts are enabled
 0000               ; and the global interrupts are disabled, the next instruction will
 0000               ; be the one that follows the invocation of this macro. If global
 0000               ; interrupts are also enabled then the next instruction will be
 0000               ; from the interrupt vector table. If no interrupts are enabled
 0000               ; then the CPU sleeps forever.
 0000               macro M8C_Stop
 0000               ; In general, you probably don't want to do this, but here's how:
 0000               or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
 0000               ; Next instruction to be executed is located in the interrupt
 0000               ; vector table entry for Power-On Reset.
 0000               macro M8C_Reset
 0000               ; Restore CPU to the power-on reset state.
 0000               mov A, 0
 0000               SSC
 0000               ; Next non-supervisor instruction will be at interrupt vector 0.
 0000               macro Suspend_CodeCompressor
 0000               or   F, 0
 0000               macro Resume_CodeCompressor
 0000               add  SP, 0
 0008           LCD_Port:                              equ   PRT2DR
 0008           LCD_PortMode0:                         equ   PRT2DM0
 0009           LCD_PortMode1:                         equ   PRT2DM1
 0000           
 0001           LCD_BARGRAPH_ENABLE:                   equ   1
 0000           
 0000           
 0000           ;-----------------------------------------------
 0000           ;  Constants for LCD
 0000           ;-----------------------------------------------
 0000           ; LCD commands
 0000           
 000C           LCD_DISP_ON:                      equ   0Ch
 0008           LCD_DISP_OFF:                     equ   08h
 000E           LCD_CURSOR_ON:                    equ   0Eh
 000C           LCD_CURSOR_OFF:                   equ   0Ch
 000F           LCD_CURSOR_BLINK:                 equ   0Fh
 000D           LCD_CURSOR_WINK:                  equ   0Dh
 0010           LCD_CURSOR_SH_LEFT:               equ   10h
 0014           LCD_CURSOR_SH_RIGHT:              equ   14h
 0002           LCD_CURSOR_HOME:                  equ   02h
 0004           LCD_CURSOR_LEFT:                  equ   04h
 0006           LCD_CURSOR_RIGHT:                 equ   06h
 0001           LCD_DISP_CLEAR_HOME:              equ   01h
 0000           
 0000           LCD_SOLID_BG:                     equ   00h
 0001           LCD_LINE_BG:                      equ   01h
 0000           
 007F           LCD_PORT_MASK:                    equ   7Fh
 0000           
 0000           ICE_PORT_SYNC:     equ   0   ; This flag must be set to one to work around
 0000                                        ; the async read issue with the ICE with the 
 0000                                        ; 25/26xxx family of devices.  It will help
 0000                                        ; to eliminate "Invalid memory reference" errors.
 0000                                        ; It is not required when running without the ICE
 0000           							 ; or when using any other family besides the 
 0000           							 ; 25/26xxx family. If not using the ICE, this flag 
 0000           							 ; may be set to 0.
 0000           
 0000           ; end of file LCD.inc
 0000           
 0000           
 0000           ;-----------------------------------------------
 0000           ;  Global Symbols
 0000           ;-----------------------------------------------
 0000           
                export   LCD_Start
                export  _LCD_Start
                export   LCD_Init
                export  _LCD_Init
                
                export   LCD_WriteData
                export  _LCD_WriteData
                
                export   LCD_Control
                export  _LCD_Control
                
                export  LCD_PrString
                export _LCD_PrString
                
                export  LCD_PrCString
                export _LCD_PrCString
                
                export  LCD_Position
                export _LCD_Position
                
                export  LCD_PrHexByte
                export _LCD_PrHexByte
                
                export  LCD_PrHexInt
                export _LCD_PrHexInt
                
                export  LCD_Delay50uTimes
                export _LCD_Delay50uTimes
                
                export  LCD_Delay50u
                export _LCD_Delay50u
                
                ;-----------------------------------------------
                ; If bargraph functions not required, don't
                ; export the function names.
                ;-----------------------------------------------
                
                IF (LCD_BARGRAPH_ENABLE)
                export  LCD_InitBG
                export _LCD_InitBG
                
                export  LCD_InitVBG
                export _LCD_InitVBG
                
                ; NOTE: The two functions,
                ;
                ;    LCD_DrawVBG and
                ;    LCD_DrawBG
                ;
                ; are implemented using both fastcall16 and legacy fastcall16 because they
                ; fall into a special and rare case where the calling sequences specified
                ; by the two disciplines are incompatible. The fastcall16 versions are
                ; provided for both C and Assembly users in all memory models. The legacy
                ; fastcall16 versions are provided only to support existing small memory
                ; model assembly language code---they do not work in the large memory
                ; model.
                ;
                ; ** The legacy fastcall16 versions are provided on a temporary basis to
                ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                ; ** deprecated and their status is "No Further Maintenance".
                ;
                ; The fastcall16 versions of these functions are distinguished by a
                ; leading underscore in the name. The legacy fastcall16 names (which appear
                ; in this comment) do not have the leading underscore. Details on the
                ; calling sequence to be used for fastcall16 are given in the user module
                ; datasheet.
                ;
                ; Fastcall16 versions:
                export _LCD_DrawVBG
                export _LCD_DrawBG
                
                IF SYSTEM_SMALL_MEMORY_MODEL
                ; Legacy Fastcall versions:
                export  LCD_DrawVBG
                export  LCD_DrawBG
                ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                
                ENDIF  ; BARGRAPH_ENABLE
                
                ;
                ; The following functions are deprecated and will be eliminated in a future
                ; version of PSoC Designer.
                ;
                export   LCD_Write_Data
                export  _LCD_Write_Data
                
                
                ;-----------------------------------------------
                ;  EQUATES
                ;-----------------------------------------------
                
 0008           LCD_Port:           equ    PRT2DR
 0008           LCD_PortMode0:      equ    PRT2DM0
 0009           LCD_PortMode1:      equ    PRT2DM1
 0000           
 0010           LCD_E:              equ    10h
 0040           LCD_RW:             equ    40h
 0020           LCD_RS:             equ    20h
 0000           
 000F           LCD_DATA_MASK:      equ    0Fh
 0008           LCD_READY_BIT:      equ    08h
 0000           
 0070           LCD_DATA_READ:      equ    ( LCD_E | LCD_RW | LCD_RS )
 0050           LCD_CNTL_READ:      equ    ( LCD_E | LCD_RW )
 007F           LCD_PORT_WRITE:     equ    7Fh
 007F           LCD_PORT_MASK:      equ    7Fh
 0000           
 0003           LCD_DISP_INC:       equ    03h
 0008           LCD_DISP_OFF:       equ    08h
 000C           LCD_DISP_ON:        equ    0Ch
 002C           LCD_4BIT_2LINE:     equ    2Ch
 0000           
 0000           
 0000           ;-----------------------------------------------
 0000           ;      Bargraph definitions
 0000           ;-----------------------------------------------
 0000           
 0010           LCD_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
 0050           LCD_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
 0000           LCD_BG_COL_START:   equ     0     ; Always start in the left most column
 0000           
 0000                                             ; Offsets for 2x16, 2x20, 4x20
 0000                                             ; Change these values for a custom LCD
 0000           
 0080           LCD_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
 00C0           LCD_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
 0094           LCD_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
 00D4           LCD_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
 0000           
 0080           LCD_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
 00C0           LCD_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
 0000           
 0040           LCD_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
 0000           
                AREA UserModules (ROM, REL)
                
 0000           .SECTION
 0000           ;-----------------------------------------------------------------------------
 0000           ;  FUNCTION NAME: LCD_PrCString
 0000           ;
 0000           ;  DESCRIPTION:
 0000           ;    Print constant (ROM) string to LCD
 0000           ;-----------------------------------------------------------------------------
 0000           ;
 0000           ;  ARGUMENTS:
 0000           ;     A:X  Pointer to String
 0000           ;          A contains MSB of string address
 0000           ;          X contains LSB of string address
 0000           ;
 0000           ;  RETURNS:  none
 0000           ;
 0000           ;  SIDE EFFECTS:
 0000           ;    The A and X registers may be modified by this or future implementations
 0000           ;    of this function.  The same is true for all RAM page pointer registers in
 0000           ;    the Large Memory Model.  When necessary, it is the calling function's
 0000           ;    responsibility to preserve their values across calls to fastcall16 
 0000           ;    functions.
 0000           ;          
 0000           ;    Currently only the page pointer registers listed below are modified: 
 0000           ;          CUR_PP
 0000           ;
 0000            LCD_PrCString:
 0000           _LCD_PrCString:
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0000            .Loop_PrCString:
 0000 08            push  A                            ; Store ROM pointer
 0001 10            push  X
 0002 28            romx                               ; Get character from ROM
 0003 B004          jnz   .LCD_PrCString_WR            ; print character and advance pointer
 0005 20            pop   X                            ; Restore the stack
 0006 18            pop   A
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0007 7F            ret                                ; Return
 0008           
 0008           .LCD_PrCString_WR:
 0008 903C          call  LCD_WriteData                ; Write data to LCD
 000A 20            pop   X                            ; Get ROM pointer
 000B 18            pop   A
 000C 75            inc   X                            ; Inc LSB of pointer
 000D DFF2          jnc   .Loop_PrCString
 000F 74            inc   A                            ; Inc MSB of pointer if LSB overflow
 0010 8FEF          jmp   .Loop_PrCString
 0012           
 0012           .ENDSECTION
 0012           
 0012           ;-----------------------------------------------------------------------------
 0012           ;  FUNCTION NAME: LCD_PrHexByte
 0012           ;
 0012           ;  DESCRIPTION:
 0012           ;     Print a byte in Hex (two characters) to current LCD position
 0012           ;
 0012           ;-----------------------------------------------------------------------------
 0012           ;
 0012           ;  ARGUMENTS:
 0012           ;     A  => (BYTE) Data/char to be printed
 0012           ;
 0012           ;  RETURNS: none
 0012           ;
 0012           ;  SIDE EFFECTS:
 0012           ;    The A and X registers may be modified by this or future implementations
 0012           ;    of this function.  The same is true for all RAM page pointer registers in
 0012           ;    the Large Memory Model.  When necessary, it is the calling function's
 0012           ;    responsibility to preserve their values across calls to fastcall16 
 0012           ;    functions.
 0012           ;          
 0012           ;    Currently only the page pointer registers listed below are modified: 
 0012           ;          CUR_PP
 0012           ;
 0012           .LITERAL
 0012           LCD_HEX_STR::
 0012 30313233343536373839414243444546      DS    "0123456789ABCDEF"
 0022           .ENDLITERAL
 0022           .SECTION
 0022           
 0022            LCD_PrHexByte:
 0022           _LCD_PrHexByte:
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0022 08            push  A                            ; Save lower nibble
 0023 67            asr   A                            ; Shift high nibble to right
 0024 67            asr   A
 0025 67            asr   A
 0026 67            asr   A
 0027 210F          and   A,0Fh                        ; Mask off nibble
 0029 FFE7          index LCD_HEX_STR                  ; Get Hex value
 002B 9019          call  LCD_WriteData                ; Write data to screen
 002D 18            pop   A                            ; Restore value
 002E 210F          and   A,0Fh                        ; Mask off lower nibble
 0030 FFE0          index LCD_HEX_STR                  ; Get Hex value
 0032 9012          call  LCD_WriteData                ; Write data to screen
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0034 7F            ret
 0035           .ENDSECTION
 0035           
 0035           .SECTION
 0035           ;-----------------------------------------------------------------------------
 0035           ;  FUNCTION NAME: LCD_PrHexInt
 0035           ;
 0035           ;  DESCRIPTION:
 0035           ;     Print an Int in Hex (four characters) to current LCD position
 0035           ;
 0035           ;-----------------------------------------------------------------------------
 0035           ;
 0035           ;  ARGUMENTS:
 0035           ;     A:X Integer value
 0035           ;         A  contains LSB of Int
 0035           ;         X  contains MSB of Int
 0035           ;
 0035           ;  RETURNS: none
 0035           ;
 0035           ;  SIDE EFFECTS:
 0035           ;    The A and X registers may be modified by this or future implementations
 0035           ;    of this function.  The same is true for all RAM page pointer registers in
 0035           ;    the Large Memory Model.  When necessary, it is the calling function's
 0035           ;    responsibility to preserve their values across calls to fastcall16 
 0035           ;    functions.
 0035           ;          
 0035           ;    Currently only the page pointer registers listed below are modified: 
 0035           ;          CUR_PP
 0035           ;
 0035            LCD_PrHexInt:
 0035           _LCD_PrHexInt:
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0035 4B            swap  A,X
 0036 9FEA          call  LCD_PrHexByte                ; Print MSB
 0038 5B            mov   A,X                          ; Move LSB into position
 0039 9FE7          call  LCD_PrHexByte                ; Print LSB
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 003B 7F            ret
 003C           .ENDSECTION
 003C           
 003C           .SECTION
 003C           ;-----------------------------------------------------------------------------
 003C           ;  FUNCTION NAME: LCD_PrString
 003C           ;
 003C           ;  DESCRIPTION:
 003C           ;     Print (RAM) ASCII string to LCD
 003C           ;
 003C           ;-----------------------------------------------------------------------------
 003C           ;
 003C           ;  ARGUMENTS:
 003C           ;     A:X contains pointer to string
 003C           ;         X  contains LSB of string pointer
 003C           ;         A  contains MSB or page of string pointer (not used at this time)
 003C           ;
 003C           ;  RETURNS:
 003C           ;
 003C           ;  SIDE EFFECTS:
 003C           ;    The A and X registers may be modified by this or future implementations
 003C           ;    of this function.  The same is true for all RAM page pointer registers in
 003C           ;    the Large Memory Model.  When necessary, it is the calling function's
 003C           ;    responsibility to preserve their values across calls to fastcall16 
 003C           ;    functions.
 003C           ;          
 003C           ;    Currently only the page pointer registers listed below are modified: 
 003C           ;          CUR_PP
 003C           ;          IDX_PP
 003C           ;
 003C           ;
 003C            LCD_PrString:
 003C           _LCD_PrString:
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[IDX_PP], A
                   ENDIF
 003C            .Loop_PrString:
 003C 5200          mov   A,[X]                        ; Get value pointed to by X
 003E A006          jz    .End_LCD_PrString            ; Check for end of string
 0040               ;LCD_writeData is known not to modify X so no need to preserve
 0040 9004          call  LCD_WriteData                ; Write data to screen
 0042 75            inc   X                            ; Advance pointer to next character
 0043 8FF8          jmp   .Loop_PrString               ; Go get next character
 0045           .End_LCD_PrString:
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0045 7F            ret
 0046           .ENDSECTION
 0046           
 0046           .SECTION
 0046           ;-----------------------------------------------------------------------------
 0046           ;  FUNCTION NAME: LCD_WriteData
 0046           ;
 0046           ;  DESCRIPTION:
 0046           ;     Write a byte to the LCD's data register.
 0046           ;
 0046           ;-----------------------------------------------------------------------------
 0046           ;
 0046           ;  ARGUMENTS:
 0046           ;    A contains byte to be written to LCD data register
 0046           ;
 0046           ;  RETURNS: none
 0046           ;
 0046           ;  SIDE EFFECTS:
 0046           ;    The A and X registers may be modified by this or future implementations
 0046           ;    of this function.  The same is true for all RAM page pointer registers in
 0046           ;    the Large Memory Model.  When necessary, it is the calling function's
 0046           ;    responsibility to preserve their values across calls to fastcall16 
 0046           ;    functions.
 0046           ;          
 0046           ;    Currently only the page pointer registers listed below are modified: 
 0046           ;          CUR_PP
 0046           ;
 0046            LCD_WriteData:
 0046           _LCD_WriteData:
 0046            LCD_Write_Data:   ; Do not use
 0046           _LCD_Write_Data:   ; Do not use
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0046 905F          call  LCD_Check_Ready              ; Make sure controller is ready
 0048                                                  ; A is preserved in LCD_Check_Ready
 0048 08            push  A                            ; Save copy of character
 0049 67            asr   A                            ; Shift high nibble to right
 004A 67            asr   A
 004B 67            asr   A
 004C 67            asr   A
 004D 210F          and   A,0Fh                        ; Mask off high nibble
 004F 9038          call  LCD_WDATA_Nibble             ; Write Upper nibble
 0051 18            pop   A                            ; Retrieve copy of character
 0052 210F          and   A,0Fh                        ; Mask off high nibble
 0054 40            nop
 0055 40            nop
 0056 40            nop
 0057 9030          call  LCD_WDATA_Nibble   ; Write Lower nibble
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0059 7F            ret
 005A           .ENDSECTION
 005A           
 005A           .SECTION
 005A           ;-----------------------------------------------------------------------------
 005A           ;  FUNCTION NAME: LCD_Control
 005A           ;
 005A           ;  DESCRIPTION:
 005A           ;     Write a byte to the LCD's control register.
 005A           ;
 005A           ;-----------------------------------------------------------------------------
 005A           ;
 005A           ;  ARGUMENTS:
 005A           ;     A contains data to be written to LCD control register.
 005A           ;
 005A           ;  RETURNS: none
 005A           ;
 005A           ;  SIDE EFFECTS:
 005A           ;    The A and X registers may be modified by this or future implementations
 005A           ;    of this function.  The same is true for all RAM page pointer registers in
 005A           ;    the Large Memory Model.  When necessary, it is the calling function's
 005A           ;    responsibility to preserve their values across calls to fastcall16 
 005A           ;    functions.
 005A           ;          
 005A           ;    Currently only the page pointer registers listed below are modified: 
 005A           ;          CUR_PP
 005A           ;
 005A            LCD_Control:
 005A           _LCD_Control:
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 005A 904B          call  LCD_Check_Ready              ; Make sure controller is ready
 005C                                                  ; A is preserved in LCD_Check_Ready
 005C 08            push  A                            ; Save copy of byte
 005D 67            asr   A                            ; Shift Upper Nibble to right
 005E 67            asr   A
 005F 67            asr   A
 0060 67            asr   A
 0061 210F          and   A,0Fh                        ; Mask off, just in case
 0063 9009          call  LCD_WCNTL_Nibble             ; Write high nibble
 0065 18            pop   A                            ; Restore copy of byte
 0066 210F          and   A,0Fh                        ; Mask off high nibble
 0068 40            nop
 0069 40            nop
 006A 40            nop
 006B 9001          call  LCD_WCNTL_Nibble             ; Write Lower nibble
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 006D 7F            ret
 006E           .ENDSECTION
 006E           
 006E           .SECTION
 006E           ;-----------------------------------------------------------------------------
 006E           ;  FUNCTION NAME: LCD_WCNTL_Nibble
 006E           ;
 006E           ;  DESCRIPTION:
 006E           ;     Write a single nibble to the LCD's command register
 006E           ;
 006E           ;-----------------------------------------------------------------------------
 006E           ;
 006E           ;  ARGUMENTS:
 006E           ;     A[3:0]   Contains Nibble to be written to command register
 006E           ;
 006E           ;  RETURNS: none
 006E           ;
 006E           ;  SIDE EFFECTS:
 006E           ;    The A and X registers may be modified by this or future implementations
 006E           ;    of this function.  The same is true for all RAM page pointer registers in
 006E           ;    the Large Memory Model.  When necessary, it is the calling function's
 006E           ;    responsibility to preserve their values across calls to fastcall16 
 006E           ;    functions.
 006E           ;          
 006E           ;    Currently only the page pointer registers listed below are modified: 
 006E           ;          CUR_PP
 006E           ;
 006E            LCD_WCNTL_Nibble:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 006E 08            push  A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >Port_2_Data_SHADE
                   ENDIF
 006F 260080        and   [Port_2_Data_SHADE],~LCD_PORT_MASK
 0072 5100          mov   A,[Port_2_Data_SHADE]
 0074 6008          mov   reg[LCD_Port],A                        ; Reset control lines
 0076           
 0076 18            pop   A
 0077 210F          and   A,LCD_DATA_MASK                        ; Make sure no bogus data in MSN
 0079 2910          or    A,LCD_E                                ; Bring "E" Enable line high
 007B 2A00          or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
 007D 6008          mov   reg[LCD_Port], A                       ; Write data
 007F 5300          mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
 0081 40            nop
 0082 218F          and   A,(~LCD_PORT_MASK|LCD_DATA_MASK)       ; Disable E signal and leave data on bus.
 0084 5300          mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
 0086 6008          mov   reg[LCD_Port],A
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0088 7F            ret
 0089           .ENDSECTION
 0089           
 0089           .SECTION
 0089           ;-----------------------------------------------------------------------------
 0089           ;  FUNCTION NAME: LCD_WDATA_Nibble
 0089           ;
 0089           ;  DESCRIPTION:
 0089           ;     Write a single nibble to the LCD's DATA register
 0089           ;
 0089           ;-----------------------------------------------------------------------------
 0089           ;
 0089           ;  ARGUMENTS:
 0089           ;     A[3:0]   Contains Nibble to be written to data register
 0089           ;
 0089           ;  RETURNS: none
 0089           ;
 0089           ;  SIDE EFFECTS:
 0089           ;    The A and X registers may be modified by this or future implementations
 0089           ;    of this function.  The same is true for all RAM page pointer registers in
 0089           ;    the Large Memory Model.  When necessary, it is the calling function's
 0089           ;    responsibility to preserve their values across calls to fastcall16 
 0089           ;    functions.
 0089           ;          
 0089           ;    Currently only the page pointer registers listed below are modified: 
 0089           ;          CUR_PP
 0089           ;
 0089           LCD_WDATA_Nibble:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0089 08            push  A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >Port_2_Data_SHADE
                   ENDIF
 008A 260080        and   [Port_2_Data_SHADE],~LCD_PORT_MASK
 008D 2E0020        or    [Port_2_Data_SHADE],LCD_RS                  ; Raise RS to signify a Data Write
 0090 5100          mov   A,[Port_2_Data_SHADE]
 0092 6008          mov   reg[LCD_Port],A
 0094           
 0094 18            pop   A
 0095 210F          and   A,LCD_DATA_MASK                             ; Make sure no bogus data in A[7:4]
 0097 2930          or    A,(LCD_E | LCD_RS)                          ; Bring "E" Enable line high
 0099 2A00          or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
 009B 6008          mov   reg[LCD_Port], A                            ; Write data
 009D 5300          mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
 009F 40            NOP
 00A0 21AF          and   A,(~LCD_PORT_MASK|LCD_DATA_MASK|LCD_RS)     ; Disable E signal and leave Data on bus
 00A2 5300          mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
 00A4 6008          mov   reg[LCD_Port],A
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 00A6 7F            ret
 00A7           .ENDSECTION
 00A7           
 00A7           .SECTION
 00A7           ;-----------------------------------------------------------------------------
 00A7           ;  FUNCTION NAME: LCD_Check_Ready
 00A7           ;
 00A7           ;  DESCRIPTION:
 00A7           ;     Wait until LCD has completed last command.
 00A7           ;
 00A7           ;-----------------------------------------------------------------------------
 00A7           ;
 00A7           ;  ARGUMENTS: none
 00A7           ;
 00A7           ;  RETURNS: none
 00A7           ;
 00A7           ;  SIDE EFFECTS:
 00A7           ;    The A and X registers may be modified by this or future implementations
 00A7           ;    of this function.  The same is true for all RAM page pointer registers in
 00A7           ;    the Large Memory Model.  When necessary, it is the calling function's
 00A7           ;    responsibility to preserve their values across calls to fastcall16 
 00A7           ;    functions.
 00A7           ;          
 00A7           ;    Currently only the page pointer registers listed below are modified: 
 00A7           ;          CUR_PP
 00A7           ;
 00A7           ;     If LCD is not present, this routine may never return.
 00A7           ;
 00A7           LCD_Check_Ready:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 00A7 08            push  A                                           ; Save Accumulator
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >Port_2_Data_SHADE
                   ENDIF
 00A8 260080        and   [Port_2_Data_SHADE],~LCD_PORT_MASK          ; Mask of all LCD bits
 00AB 5100          mov   A,[Port_2_Data_SHADE]
 00AD 6008          mov   reg[LCD_Port],A                             ; Zero LCD port bits
 00AF           
 00AF 2600F0        and   [Port_2_DriveMode_0_SHADE],~LCD_DATA_MASK   ; Clear out LCD mode bits.
 00B2 5100          mov   A,[Port_2_DriveMode_0_SHADE]
 00B4 7110          or    F, FLAG_XIO_MASK
 00B6 6008          mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for reading
 00B8 70EF          and   F, ~FLAG_XIO_MASK
 00BA           
 00BA 2E0040        or    [Port_2_Data_SHADE],LCD_RW                  ; Raise RW to signify Read operation
 00BD 5100          mov   A,[Port_2_Data_SHADE]
 00BF 6008          mov   reg[LCD_Port],A
 00C1 40            NOP
 00C2           
 00C2 10            push  X                                                                                 ; Save 'X' register
 00C3 57FF          mov   X,255                                                             ; 255 Attempts
 00C5           
 00C5           .LCD_RDY_LOOP:
 00C5 2E0050        or    [Port_2_Data_SHADE], LCD_CNTL_READ                    ; Raise E to start cycle
 00C8 5100          mov   A,[Port_2_Data_SHADE]
 00CA 6008          mov   reg[LCD_Port],A
 00CC           
 00CC 40            nop                                               ; Wait 2 nops to make sure data is ready
 00CD 40            nop
 00CE 5D08          mov   A,reg[LCD_Port]
 00D0           
 00D0           ; The code below is used to work around the async read issue with the ICE with the 
 00D0           ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
 00D0           ; errors.  It is not required when running without the ICE or when using any other 
 00D0           ; family besides the 25/26xxx family. If not using the ICE or with any other family
 00D0           ; the ICE_PORT_SYNC flag should be set to 0.
                IF(ICE_PORT_SYNC)                          
                    mov   reg[ 0xfa], A                    
                    mov   A, reg[0xfa]                     
                ENDIF   
                                                   
 00D0 08            push  A
 00D1 2600C0        and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
 00D4 5100          mov   A,[Port_2_Data_SHADE]
 00D6 6008          mov   reg[LCD_Port],A
 00D8           
 00D8 40            nop                                    ; Add delay for the slowest part and the
 00D9 40            nop                                    ; fastest PSoC
 00DA 40            nop
 00DB                                                                           ; Get the LSBs
 00DB 2E0050        or    [Port_2_Data_SHADE],LCD_CNTL_READ                     ; Raise E to start cycle
 00DE 5100          mov   A,[Port_2_Data_SHADE]
 00E0 6008          mov   reg[LCD_Port],A
 00E2           
 00E2 40            nop
 00E3 40            nop
 00E4           
 00E4 2600C0        and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
 00E7 5100          mov   A,[Port_2_Data_SHADE]
 00E9 6008          mov   reg[LCD_Port],A
 00EB           
 00EB 18            pop   A
 00EC 2108          and   A,LCD_READY_BIT                                       ; Check busy
 00EE           
 00EE A004          jz    .UNLOCK
 00F0 79            dec   X
 00F1 BFD3          jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
 00F3           .UNLOCK:
 00F3 20            pop   X                                                                                 ; Restore 'X' register
 00F4           
 00F4 2E007F        or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE   ; Revert Data bit to Write mode
 00F7 5100          mov   A,[Port_2_DriveMode_0_SHADE]
 00F9 7110          or    F, FLAG_XIO_MASK
 00FB 6008          mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for writing
 00FD 70EF          and   F, ~FLAG_XIO_MASK
 00FF 18            pop   A
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0100 7F            ret
 0101           .ENDSECTION
 0101           
 0101           .SECTION
 0101           ;-----------------------------------------------------------------------------
 0101           ;  FUNCTION NAME: LCD_Start
 0101           ;  FUNCTION NAME: LCD_Init
 0101           ;
 0101           ;  DESCRIPTION:
 0101           ;     Initialize LCD
 0101           ;
 0101           ;-----------------------------------------------------------------------------
 0101           ;
 0101           ;  ARGUMENTS: none
 0101           ;
 0101           ;  RETURNS: none
 0101           ;
 0101           ;  SIDE EFFECTS:
 0101           ;    The A and X registers may be modified by this or future implementations
 0101           ;    of this function.  The same is true for all RAM page pointer registers in
 0101           ;    the Large Memory Model.  When necessary, it is the calling function's
 0101           ;    responsibility to preserve their values across calls to fastcall16 
 0101           ;    functions.
 0101           ;          
 0101           ;    Currently only the page pointer registers listed below are modified: 
 0101           ;          CUR_PP
 0101           ;
 0101           ;  THEORY of OPERATION or PROCEDURE:
 0101           ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
 0101           ;    This initialization is a bit long, but it should work for
 0101           ;    most 2 and 4 line LCDs.
 0101           ;
 0101            LCD_Start:
 0101           _LCD_Start:
 0101            LCD_Init:
 0101           _LCD_Init:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >Port_2_Data_SHADE
                   ENDIF
                
 0101 260080        and   [Port_2_DriveMode_0_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
 0104 2E007F        or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE             ; Set LCD port for writing
 0107 260080        and   [Port_2_DriveMode_1_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
 010A           
 010A 5100          mov   A,[Port_2_DriveMode_0_SHADE]
 010C 7110          or    F, FLAG_XIO_MASK
 010E 6008          mov   reg[LCD_PortMode0],A                                  ; Setup LCD Port for writing
 0110 5100          mov   A,[Port_2_DriveMode_1_SHADE]
 0112 6009          mov   reg[LCD_PortMode1],A
 0114 70EF          and   F, ~FLAG_XIO_MASK
 0116           
 0116 50FA          mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
 0118 9063          call  LCD_Delay50uTimes
 011A 50FA          mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
 011C 905F          call  LCD_Delay50uTimes
 011E           
 011E 5003          mov   A,03h
 0120 9F4C          call  LCD_WCNTL_Nibble
 0122           
 0122 5052          mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
 0124 9057          call  LCD_Delay50uTimes
 0126           
 0126 5003          mov   A,03h
 0128 9F44          call  LCD_WCNTL_Nibble
 012A           
 012A 905F          call  LCD_Delay50u
 012C 905D          call  LCD_Delay50u
 012E 905B          call  LCD_Delay50u
 0130           
 0130 5003          mov   A,03h
 0132 9F3A          call  LCD_WCNTL_Nibble
 0134           
 0134 505A          mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
 0136 9045          call  LCD_Delay50uTimes
 0138           
 0138 5002          mov   A,02h
 013A 9F32          call  LCD_WCNTL_Nibble
 013C           
 013C 505A          mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
 013E 903D          call  LCD_Delay50uTimes
 0140           
 0140 5008          mov   A,08h
 0142 9F16          call  LCD_Control
 0144 505A          mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
 0146 9035          call  LCD_Delay50uTimes
 0148           
 0148 5001          mov   A,01h
 014A 9F0E          call  LCD_Control
 014C 505A          mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
 014E 902D          call  LCD_Delay50uTimes
 0150           
 0150 5006          mov   A,06h
 0152 9F06          call  LCD_Control
 0154           
 0154 500E          mov   A,0Eh
 0156 9F02          call  LCD_Control
 0158           
 0158 502C          mov   A,LCD_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
 015A 9EFE          call  LCD_Control
 015C           
 015C 5008          mov   A,LCD_DISP_OFF
 015E 9EFA          call  LCD_Control
 0160           
 0160 500C          mov   A,LCD_DISP_ON
 0162 9EF6          call  LCD_Control
 0164           
 0164 5003          mov   A,LCD_DISP_INC
 0166 9EF2          call  LCD_Control
 0168           
 0168 505A          mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
 016A 9011          call  LCD_Delay50uTimes
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 016C 7F            ret
 016D           .ENDSECTION
 016D           
 016D           ;-----------------------------------------------------------------------------
 016D           ;  FUNCTION NAME: LCD_Position
 016D           ;
 016D           ;  DESCRIPTION:
 016D           ;     Position Cursor at Row and Col location
 016D           ;
 016D           ;-----------------------------------------------------------------------------
 016D           ;
 016D           ;  ARGUMENTS:
 016D           ;     A => Row  0 to 3
 016D           ;     X => Col  0 to 39+
 016D           ;
 016D           ;  RETURNS:  none
 016D           ;
 016D           ;  SIDE EFFECTS:
 016D           ;    The A and X registers may be modified by this or future implementations
 016D           ;    of this function.  The same is true for all RAM page pointer registers in
 016D           ;    the Large Memory Model.  When necessary, it is the calling function's
 016D           ;    responsibility to preserve their values across calls to fastcall16 
 016D           ;    functions.
 016D           ;
 016D           .LITERAL
 016D           LCD_ROW_OFFSET::
 016D 80C094D4       DB    LCD_ROW1_OFFSET, LCD_ROW2_OFFSET, LCD_ROW3_OFFSET, LCD_ROW4_OFFSET
 0171           .ENDLITERAL
 0171           
 0171           .SECTION
 0171            LCD_Position:
 0171           _LCD_Position:
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0171 2103          and   A,03h                        ; Mask off 2 bits for row address 0 to 3
 0173 10            push  X                            ; Store COL
 0174 FFF7          index LCD_ROW_OFFSET ; Get ROW memory offset from table
 0176 4F            mov   X,SP                         ; Get Stack pointer
 0177 03FF          add   A,[X+(-1)]                   ; Add the COL to the display pointer
 0179 20            pop   X
 017A           
 017A 9EDE          call  LCD_Control                  ; Write control byte
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 017C 7F            ret
 017D           .ENDSECTION
 017D           
 017D           .SECTION
 017D           ;-----------------------------------------------------------------------------
 017D           ;  FUNCTION NAME: LCD_Delay50uTimes
 017D           ;
 017D           ;  DESCRIPTION:
 017D           ;     Delay increments of 50uSeconds
 017D           ;
 017D           ;-----------------------------------------------------------------------------
 017D           ;
 017D           ;  ARGUMENTS:
 017D           ;     A contains the delay multiplier
 017D           ;
 017D           ;  RETURNS:
 017D           ;
 017D           ;  SIDE EFFECTS:
 017D           ;    The A and X registers may be modified by this or future implementations
 017D           ;    of this function.  The same is true for all RAM page pointer registers in
 017D           ;    the Large Memory Model.  When necessary, it is the calling function's
 017D           ;    responsibility to preserve their values across calls to fastcall16 
 017D           ;    functions.
 017D           ;
 017D           ;
 017D            LCD_Delay50uTimes:
 017D           _LCD_Delay50uTimes:
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 017D 900C          call  LCD_Delay50u
 017F 78            dec   A
 0180 BFFC          jnz   LCD_Delay50uTimes
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0182 7F            ret
 0183           
 0183           .ENDSECTION
 0183           
 0183           ;-----------------------------------------------------------------------------
 0183           ;  FUNCTION NAME: LCD_Delay50u
 0183           ;
 0183           ;  DESCRIPTION:
 0183           ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
 0183           ;     Slower clock frequencies the delay will be;
 0183           ;           1.5
 0183           ;        -------------- * 50uSec
 0183           ;        clock_freq(MHz)
 0183           ;
 0183           ;
 0183           ;-----------------------------------------------------------------------------
 0183           ;
 0183           ;  ARGUMENTS: none
 0183           ;
 0183           ;  RETURNS: none
 0183           ;
 0183           ;  SIDE EFFECTS:
 0183           ;    The A and X registers may be modified by this or future implementations
 0183           ;    of this function.  The same is true for all RAM page pointer registers in
 0183           ;    the Large Memory Model.  When necessary, it is the calling function's
 0183           ;    responsibility to preserve their values across calls to fastcall16 
 0183           ;    functions.
 0183           ;
 0183           ;  THEORY of OPERATION or PROCEDURE:
 0183           ;
 0183           .LITERAL
 0183            LCD_Delay50u_Table::
 0183 08193A7C01010101      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
 018B           ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
 018B           .ENDLITERAL
 018B           .SECTION
 018B           
 018B             LCD_Delay50u:
 018B            _LCD_Delay50u:                        ; [11]  Call
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 018B 08            push  A
 018C 7110          or    F, FLAG_XIO_MASK
 018E 5DE0          mov   A, reg[OSC_CR0]                ; [6] Get delay value
 0190 70EF          and   F, ~FLAG_XIO_MASK
 0192 2107          and   A,07h                          ; [4] Mask off only the clock bits
 0194 3905          cmp   A,05h
 0196 D006          jnc   .Delay50u_End
 0198 FFE9          index LCD_Delay50u_Table ; [13] Get delay value
 019A           .Delay50u_Loop:                          ;
 019A 78            dec   A                              ; [4]
 019B BFFE          jnz   .Delay50u_Loop                 ; [5]
 019D           .Delay50u_End:
 019D 18            pop   A
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 019E 7F            ret
 019F           .ENDSECTION
 019F           
 019F           
 019F           ;-----------------------------------------------------------------------------
 019F           ;      If bargraph is not enabled, the following functions are not required.
 019F           ;-----------------------------------------------------------------------------
 019F           
                IF (LCD_BARGRAPH_ENABLE)
                
                IF SYSTEM_SMALL_MEMORY_MODEL
 019F           .SECTION
 019F           ;-----------------------------------------------------------------------------
 019F           ;  FUNCTION NAME: LCD_DrawBG
 019F           ;
 019F           ;  DESCRIPTION:
 019F           ;  This legacy fastcall version are provided only to support existing small
 019F           ;  memory model assembly language code---it does not work in the large memory
 019F           ;  model.
 019F           ;
 019F           ;  ** This legacy fastcall version is provided on a temporary basis to
 019F           ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
 019F           ;  ** deprecated and its status is "No Further Maintenance". If you call this
 019F           ;  ** function in assembly you should convert to _LCD_DrawVBG
 019F           ;  ** (with a leading underscore) and the fastcall16 interface
 019F           ;
 019F           ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
 019F           ;  is a legacy function that is intended to support existing Assembly
 019F           ;  language programs that call this function.  This should not be used for
 019F           ;  new code or with Large Memory Model programs.
 019F           ;-----------------------------------------------------------------------------
 019F           ;
 019F           ;  LEGACY FASTCALL ARGUMENTS:
 019F           ;    A    => Starting row for bargraph 0 to 3
 019F           ;   [X]   => Starting Column for bargraph 0 to 39+
 019F           ;   [x-1] => Length of bargraph in chars 1 to 40+
 019F           ;   [X-2] => Position of pointer in segments 5 times Length
 019F           ;
 019F           ;
 019F           ;  RETURNS:  none
 019F           ;
 019F           ;  SIDE EFFECTS:
 019F           ;    The A and X registers may be modified by this or future implementations
 019F           ;    of this function.  The same is true for all RAM page pointer registers in
 019F           ;    the Large Memory Model.  When necessary, it is the calling function's
 019F           ;    responsibility to preserve their values across calls to fastcall16 
 019F           ;    functions.
 019F           ;
 019F           ;    If LCD_Init is not called before this function, the
 019F           ;    bargraph will not be drawn properly.
 019F           ;
 019F           ; Stack offset constants
 0000           BG_COLX:       equ  0                   ; Stack position of Column
 FFFFFFFF           BG_CHAR_LENX:  equ -1                   ; Stack position of Length
 FFFFFFFE           BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
 019F           
 019F           
 019F           LCD_DrawBG:
 019F 10            push  X
 01A0 5900          mov   X,[X+BG_COLX]                 ; Row in A, Col in X
 01A2 9FCD          call  LCD_Position                 ; Set cursor position
 01A4 20            pop   X                             ; Restore pointer
 01A5           
 01A5           .LCD_BG_LOOP1X:
 01A5 3DFE00        cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
 01A8 B005          jnz   .LCD_CHECK1X
 01AA 5000          mov   A,00h                         ; Load empty character
 01AC 8011          jmp   .LCD_BG_DOITX                 ;
 01AE           
 01AE           .LCD_CHECK1X:
 01AE 3DFE06        cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
 01B1 D007          jnc   .LCD_CHECK2X                  ; Note yet, use full character
 01B3 52FE          mov   A,[X+BG_LENGTHX]
 01B5 15FE          sub   [X+BG_LENGTHX],A
 01B7 8006          jmp   .LCD_BG_DOITX
 01B9           
 01B9           .LCD_CHECK2X:                           ; Put index to full character
 01B9 5006          mov   A, 06h
 01BB 17FE05        sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
 01BE           
 01BE           .LCD_BG_DOITX:
 01BE 9E86          call  LCD_WriteData                ; Display BG character
 01C0           
 01C0 7BFF          dec   [X+BG_CHAR_LENX]              ; Dec Char count
 01C2 BFE2          jnz   .LCD_BG_LOOP1X                ; Do it all over again
 01C4 7F            ret
 01C5           .ENDSECTION
                ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                
 01C5           .SECTION
 01C5           ;-----------------------------------------------------------------------------
 01C5           ;  FUNCTION NAME: LCD_DrawBG
 01C5           ;
 01C5           ;  DESCRIPTION:
 01C5           ;     Draw a horizontal bargraph on the LCD with the given parameters.
 01C5           ;
 01C5           ;
 01C5           ;-----------------------------------------------------------------------------
 01C5           ;
 01C5           ;  FASTCALL16 ARGUMENTS:
 01C5           ;   [SP-3] => Starting row for bargraph 0 to 3
 01C5           ;   [SP-4] => Starting Column for bargraph 0 to 39+
 01C5           ;   [SP-5] => Length of bargraph in chars 1 to 40+
 01C5           ;   [SP-6] => Position of pointer in segments 5 times Length
 01C5           ;
 01C5           ;
 01C5           ;  RETURNS:  none
 01C5           ;
 01C5           ;  SIDE EFFECTS:
 01C5           ;    The A and X registers may be modified by this or future implementations
 01C5           ;    of this function.  The same is true for all RAM page pointer registers in
 01C5           ;    the Large Memory Model.  When necessary, it is the calling function's
 01C5           ;    responsibility to preserve their values across calls to fastcall16 
 01C5           ;    functions.
 01C5           ;          
 01C5           ;    Currently only the page pointer registers listed below are modified: 
 01C5           ;          CUR_PP
 01C5           ;
 01C5           ;    If LCD_Init is not called before this function, the
 01C5           ;    bargraph will not be drawn properly.
 01C5           ;
 01C5           ; Stack offset constants
 FFFFFFFD           BG_ROW:       equ -3
 FFFFFFFC           BG_COL:       equ -4                   ; Stack position of Column
 FFFFFFFB           BG_CHAR_LEN:  equ -5                   ; Stack position of Length
 FFFFFFFA           BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
 01C5           
 01C5           
 01C5           _LCD_DrawBG:
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 01C5 4F            mov   X, SP
 01C6 10            push  X
 01C7 52FD          mov   A,[X+BG_ROW]                 ; Row in A
 01C9 59FC          mov   X,[X+BG_COL]                 ; Col in X
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 01CB 9FA4          call  LCD_Position                 ; Set cursor position
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 01CD 20            pop  X
 01CE           
 01CE           .LCD_BG_LOOP1:
 01CE 3DFA00        cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
 01D1 B005          jnz   .LCD_CHECK1
 01D3 5000          mov   A,00h                        ; Load empty character
 01D5 8011          jmp   .LCD_BG_DOIT                  ;
 01D7           
 01D7           .LCD_CHECK1:
 01D7 3DFA06        cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
 01DA D007          jnc   .LCD_CHECK2                   ; Note yet, use full character
 01DC 52FA          mov   A,[X+BG_LENGTH]
 01DE 15FA          sub   [X+BG_LENGTH],A
 01E0 8006          jmp   .LCD_BG_DOIT
 01E2           
 01E2           .LCD_CHECK2:                            ; Put index to full character
 01E2 5006          mov   A, 06h
 01E4 17FA05        sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
 01E7           
 01E7           .LCD_BG_DOIT:
 01E7 9E5D          call  LCD_WriteData                ; Display BG character
 01E9           
 01E9 7BFB          dec   [X+BG_CHAR_LEN]              ; Dec Char count
 01EB BFE2          jnz   .LCD_BG_LOOP1                 ; Do it all over again
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 01ED 7F            ret
 01EE           .ENDSECTION
 01EE           
                IF SYSTEM_SMALL_MEMORY_MODEL
 01EE           .SECTION
 01EE           ;-----------------------------------------------------------------------------
 01EE           ;  FUNCTION NAME: LCD_DrawVBG
 01EE           ;
 01EE           ;  DESCRIPTION:
 01EE           ;  This legacy fastcall version are provided only to support existing small
 01EE           ;  memory model assembly language code---it does not work in the large memory
 01EE           ;  model.
 01EE           ;
 01EE           ;  ** This legacy fastcall version is provided on a temporary basis to
 01EE           ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
 01EE           ;  ** deprecated and its status is "No Further Maintenance". If you call this
 01EE           ;  ** function in assembly you should convert to _LCD_DrawVBG
 01EE           ;  ** (with a leading underscore) and the fastcall16 interface
 01EE           ;
 01EE           ;  Draw a vertical bargraph on the LCD with the given parameters. This
 01EE           ;  is a legacy function that is intended to support existing Assembly
 01EE           ;  language programs that call this function.  This should not be used for
 01EE           ;  new code or with Large Memory Model programs.
 01EE           ;-----------------------------------------------------------------------------
 01EE           ;
 01EE           ;  LEGACY FASTCALL ARGUMENTS:
 01EE           ;    A    => Starting row for bargraph 0 to 3
 01EE           ;   [X]   => Starting Column for bargraph 0 to 40+
 01EE           ;   [x-1] => Height of bargraph in chars 1 - 4
 01EE           ;   [X-2] => Position of pointer in segments 8 times height
 01EE           ;  RETURNS:
 01EE           ;
 01EE           ;  SIDE EFFECTS:
 01EE           ;    The A and X registers may be modified by this or future implementations
 01EE           ;    of this function.  The same is true for all RAM page pointer registers in
 01EE           ;    the Large Memory Model.  When necessary, it is the calling function's
 01EE           ;    responsibility to preserve their values across calls to fastcall16 
 01EE           ;    functions.
 01EE           ;    
 01EE           ;    If LCD_Init is not called before this function, the
 01EE           ;    bargraph will not be drawn properly.
 01EE           ;
 01EE           ; Stack offset constants
 0000           VBG_COLX:            equ  0
 FFFFFFFF           VBG_CHAR_HEIGHTX:    equ -1
 FFFFFFFE           VBG_SEG_HEIGHTX:     equ -2
 01EE           
 01EE           LCD_DrawVBG:
 01EE           
 01EE 2103          and   A,03h                        ; Make sure only rows 0 - 3 are valid
 01F0           .VBG_LOOPX:
 01F0 08            push  A
 01F1 FF7A          index LCD_ROW_OFFSET  ; Get row offset
 01F3 0300          add   A,[X+VBG_COLX]                ; Add column offset to position
 01F5 9E63          call  LCD_Control                  ; Position Cursor
 01F7 3DFE00        cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
 01FA B005          jnz   .VBG_NZ_SEGX
 01FC 5020          mov   A,' '                        ; Load space character
 01FE 8013          jmp   .VBG_WRITE_CHARX
 0200           .VBG_NZ_SEGX:
 0200 3DFE09        cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
 0203 D009          jnc   .VBG_FULL_SEGX
 0205                                                   ; Partial segment between 1 and 8
 0205 52FE          mov   A,[X+VBG_SEG_HEIGHTX]
 0207 78            dec   A
 0208 56FE00        mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
 020B 8006          jmp   .VBG_WRITE_CHARX
 020D           
 020D           .VBG_FULL_SEGX:                          ; Bargaph
 020D 17FE08        sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
 0210 5007          mov   A,07h                        ; Load full segment
 0212           
 0212           .VBG_WRITE_CHARX:                        ; Write character to display
 0212 9E32          call  LCD_WriteData                ; Write value
 0214 18            pop   A
 0215 78            dec   A
 0216 7BFF          dec   [X+VBG_CHAR_HEIGHTX]
 0218 BFD7          jnz   .VBG_LOOPX
 021A 7F            ret
 021B           .ENDSECTION
                ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                
 021B           .SECTION
 021B           ;-----------------------------------------------------------------------------
 021B           ;  FUNCTION NAME: LCD_DrawVBG
 021B           ;
 021B           ;  DESCRIPTION:
 021B           ;     Draw a vertical bargraph on the LCD with the given parameters.
 021B           ;
 021B           ;
 021B           ;-----------------------------------------------------------------------------
 021B           ;
 021B           ;  FASTCALL16 ARGUMENTS:
 021B           ;
 021B           ;   [SP-3] => Starting row for bargraph 0 to 3
 021B           ;   [SP-4] => Starting Column for bargraph 0 to 40+
 021B           ;   [SP-5] => Height of bargraph in chars 1 - 4
 021B           ;   [SP-6] => Position of pointer in segments 8 times height
 021B           ;  RETURNS:
 021B           ;
 021B           ;  SIDE EFFECTS:
 021B           ;    The A and X registers may be modified by this or future implementations
 021B           ;    of this function.  The same is true for all RAM page pointer registers in
 021B           ;    the Large Memory Model.  When necessary, it is the calling function's
 021B           ;    responsibility to preserve their values across calls to fastcall16 
 021B           ;    functions.
 021B           ;          
 021B           ;    Currently only the page pointer registers listed below are modified: 
 021B           ;          CUR_PP
 021B           ;
 021B           ;    If LCD_Init is not called before this function, the
 021B           ;    bargraph will not be drawn properly.
 021B           ;
 021B           ; Stack offset constants
 FFFFFFFD           VBG_ROW:        equ -3
 FFFFFFFC           VBG_COL:            equ -4
 FFFFFFFB           VBG_CHAR_HEIGHT:    equ -5
 FFFFFFFA           VBG_SEG_HEIGHT:     equ -6
 021B           
 021B           _LCD_DrawVBG:
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 021B 4F            mov   X, SP
 021C 52FD          mov   A, [X+VBG_ROW]
 021E 2103          and   A,03h                        ; Make sure only rows 0 - 3 are valid
 0220           .VBG_LOOP:
 0220 08            push  A
 0221 FF4A          index LCD_ROW_OFFSET  ; Get row offset
 0223 03FC          add   A,[X+VBG_COL]                ; Add column offset to position
 0225 9E33          call  LCD_Control                  ; Position Cursor
 0227 3DFA00        cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
 022A B005          jnz   .VBG_NZ_SEG
 022C 5020          mov   A,' '                        ; Load space character
 022E 8013          jmp   .VBG_WRITE_CHAR
 0230           .VBG_NZ_SEG:
 0230 3DFA09        cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
 0233 D009          jnc   .VBG_FULL_SEG
 0235                                                  ; Partial segment between 1 and 8
 0235 52FA          mov   A,[X+VBG_SEG_HEIGHT]
 0237 78            dec   A
 0238 56FA00        mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
 023B 8006          jmp   .VBG_WRITE_CHAR
 023D           
 023D           .VBG_FULL_SEG:                          ; Bargaph
 023D 17FA08        sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
 0240 5007          mov   A,07h                        ; Load full segment
 0242           
 0242           .VBG_WRITE_CHAR:                        ; Write character to display
 0242 9E02          call  LCD_WriteData                ; Write value
 0244 18            pop   A
 0245 78            dec   A
 0246 7BFB          dec   [X+VBG_CHAR_HEIGHT]
 0248 BFD7          jnz   .VBG_LOOP
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 024A 7F            ret
 024B           .ENDSECTION
 024B           
 024B           .SECTION
 024B           ;-----------------------------------------------------------------------------
 024B           ;  FUNCTION NAME: LCD_InitVBG
 024B           ;
 024B           ;  DESCRIPTION:
 024B           ;     Initialize the vertical bargraph characters.
 024B           ;
 024B           ;-----------------------------------------------------------------------------
 024B           ;
 024B           ;  ARGUMENTS:  none
 024B           ;
 024B           ;  RETURNS:  none
 024B           ;
 024B           ;  SIDE EFFECTS:
 024B           ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
 024B           ;    Only one type of bargraph (horizontal or vertical) may be used
 024B           ;    at a time since they each require their own set of characters.
 024B           ;
 024B           ;  SIDE EFFECTS:
 024B           ;    The A and X registers may be modified by this or future implementations
 024B           ;    of this function.  The same is true for all RAM page pointer registers in
 024B           ;    the Large Memory Model.  When necessary, it is the calling function's
 024B           ;    responsibility to preserve their values across calls to fastcall16 
 024B           ;    functions.
 024B           ;          
 024B           ;    Currently only the page pointer registers listed below are modified: 
 024B           ;          CUR_PP
 024B           ;
 024B           ; Stack offset constants
 0000           VBGDATA_CTR:      equ    00h           ; Char data count stack offset
 0001           VBG_BYTES:        equ    01h           ; Byte counter stack offset
 024B           
 024B            LCD_InitVBG:
 024B           _LCD_InitVBG:
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 024B 4F            mov   X,SP                         ; Get location of stack
 024C 08            push  A                            ; Create 2 locations
 024D 08            push  A
 024E           
 024E 5040          mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
 0250 9E08          call  LCD_Control                  ; Position the CG pointer
 0252 560001        mov   [X+VBGDATA_CTR],01h          ; Reset data counter
 0255           
 0255            .VBG_Loop1:                            ; loop once for each 8 characters
 0255 560108        mov   [X+VBG_BYTES],08h            ; Load cycle pointer
 0258            .VBG_Loop2:                            ; Loop once for each line in character (8 times)
 0258 5200          mov   A,[X+VBGDATA_CTR]
 025A 3B01          cmp   A,[X+VBG_BYTES]
 025C D005          jnc   .VBG_SOLID
 025E 5000          mov   A,00h                        ; Empty line
 0260 8003          jmp   .VBG_Load                     ; Jump to load the bargraph
 0262           .VBG_SOLID:
 0262 50FF          mov   A,FFh                        ; Load solid line
 0264           .VBG_Load:
 0264 9DE0          call  LCD_WriteData                ; character data
 0266 7B01          dec   [X+VBG_BYTES]                ; Dec byte counter
 0268 BFEF          jnz   .VBG_Loop2                    ; End Loop 2
 026A 7700          inc   [X+VBGDATA_CTR]
 026C 3D0009        cmp   [X+VBGDATA_CTR],09h
 026F BFE5          jnz   .VBG_Loop1                    ; End Loop1
 0271           
 0271 18            pop  A
 0272 18            pop  A
 0273 500C          mov  A,LCD_DISP_ON                    ; Turn on display, don't really
 0275 9DE3          call LCD_Control                   ; need this.
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0277 7F            ret
 0278           .ENDSECTION
 0278           
 0278           ;-----------------------------------------------------------------------------
 0278           ;  FUNCTION NAME: LCD_InitBG
 0278           ;
 0278           ;  DESCRIPTION:
 0278           ;     Initialize horizontal bargraph characters
 0278           ;
 0278           ;-----------------------------------------------------------------------------
 0278           ;
 0278           ;  ARGUMENTS:
 0278           ;     A = type  0 = full                   |||||||||........
 0278           ;               1 = single vertical line   ..........|......
 0278           ;
 0278           ;  RETURNS:
 0278           ;
 0278           ;  SIDE EFFECTS:
 0278           ;    The A and X registers may be modified by this or future implementations
 0278           ;    of this function.  The same is true for all RAM page pointer registers in
 0278           ;    the Large Memory Model.  When necessary, it is the calling function's
 0278           ;    responsibility to preserve their values across calls to fastcall16 
 0278           ;    functions.
 0278           ;          
 0278           ;    Currently only the page pointer registers listed below are modified: 
 0278           ;          CUR_PP
 0278           ;
 0278           ;    Only one type of bargraph (horizontal or vertical) may be used
 0278           ;    at a time since they each require their own set of characters.
 0278           ;
 0278           ;  THEORY of OPERATION or PROCEDURE:
 0278           ;    This function writes to the LCD character RAM to generate 8 custom
 0278           ;    characters used to generated one of two horizontal bargraphs.
 0278           ;
 0278           .LITERAL
 0278            LCD_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
 0278 0010181C1E1F1F      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
 027F            LCD_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
 027F 00100804020100     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
 0286           .ENDLITERAL
 0286           
 0286           .SECTION
 0286           ; Stack offset constants
 0000           BGDATA_PTR:   equ    00h               ; Stack offsets
 0001           BGCHARS:      equ    01h
 0002           BGTYPE:       equ    02h
 0286           
 0286            LCD_InitBG:
 0286           _LCD_InitBG:
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0286 4F            mov   X,SP                         ; Get location of stack
 0287 3803          add   SP,3
 0289 5402          mov   [X+BGTYPE],A                 ; Store the bargraph type
 028B           
 028B 5040          mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
 028D 9DCB          call  LCD_Control                  ; Position the CG pointer
 028F 560000        mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
 0292           
 0292            .BG_Loop1:
 0292 560108        mov   [X+BGCHARS],08h              ; Load cycle pointer
 0295            .BG_Loop2:
 0295 5200          mov   A,[X+BGDATA_PTR]
 0297 3D0200        cmp   [X+BGTYPE],00h               ; Check which bargraph
 029A B005          jnz   .BG_OTHER
 029C FFDA          index LCD_BG_TYPE1
 029E 8003          jmp   .BG_Load
 02A0            .BG_OTHER:
 02A0 FFDD          index LCD_BG_TYPE2
 02A2            .BG_Load:
 02A2 9DA2          call  LCD_WriteData
 02A4 7B01          dec   [X+BGCHARS]                  ; Character builder counter
 02A6 BFEE          jnz   .BG_Loop2
 02A8 7700          inc   [X+BGDATA_PTR]               ; Advance to next character
 02AA 3D0007        cmp   [X+BGDATA_PTR],07h
 02AD BFE4          jnz   .BG_Loop1
 02AF           
 02AF 38FD          add   SP,-3
 02B1 500C          mov   A,LCD_DISP_ON
 02B3 9DA5          call  LCD_Control
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 02B5 7F            ret
 02B6           .ENDSECTION
 02B6           
                ENDIF
                
                ; End of File LCD.asm
