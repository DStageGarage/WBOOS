FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C24xxxB microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   18h                      ;VC3 Interrupt Vector
                                        (0133)     // call	void_handler
0018: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0137)     // call	void_handler
001C: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
0020: 7D 07 13 LJMP  _AMUX4_0_Start|_AMUX4_0_Stop|_ADCINC_ADConversion_ISR(0141)     ljmp	_ADCINC_ADConversion_ISR
0023: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
0024: 7D 05 10 LJMP  _PWM8_Heater_ISR|_PWM8_NB_Out_bReadCounter|_bPWM8_NB_Out_ReadCounter|_PWM8_NB_Out_bReadPulseWidth|bPWM8_NB_Out_ReadCounter|_bPWM8_NB_Out_ReadPulseWidth|bPWM8_NB_Out_ReadPulseWidth(0145)     ljmp	_PWM8_Heater_ISR
0027: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
0028: 7D 04 F8 LJMP  _SleepTimer_TickWait|_SleepTimer_SetTimer|_SleepTimer_SyncWait|_SleepTimer_bGetTickCntr|_SleepTimer_bGetTimer|_SleepTimer_iGetTickCntr|_SleepTimer_lGetTickCntr|_PWM8_Vout_ISR(0149)     ljmp	_PWM8_Vout_ISR
002B: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 05 04 LJMP  _bPWM8_Vout_ReadPulseWidth|bPWM8_Vout_ReadCounter|_PWM8_Vout_bReadCounter|_PWM8_Vout_bReadPulseWidth|_PWM8_NB_Out_ISR|_bPWM8_Vout_ReadCounter(0153)     ljmp	_PWM8_NB_Out_ISR
002F: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0157)     // call	void_handler
0060: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   64h                      ;Sleep Timer Interrupt Vector
0064: 7D 04 AF LJMP  _SleepTimer_ISR    (0161)     ljmp	_SleepTimer_ISR
0067: 7E       RETI                     (0162)     reti
0068: 71 10    OR    F,0x10             
                                        (0163)     ;---------------------------------------------------
                                        (0164)     ; Insert your custom code above this banner
                                        (0165)     ;---------------------------------------------------
                                        (0166)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0167) 
                                        (0168) ;-----------------------------------------------------------------------------
                                        (0169) ;  Start of Execution.
                                        (0170) ;-----------------------------------------------------------------------------
                                        (0171) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0172) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0173) ;
                                        (0174) 
                                        (0175) IF	(TOOLCHAIN & HITECH)
                                        (0176)  	AREA PD_startup(CODE, REL, CON)
                                        (0177) ELSE
                                        (0178)     org 68h
                                        (0179) ENDIF
                                        (0180) __Start:
                                        (0181) 
                                        (0182)     ; initialize SMP values for voltage stabilization, if required,
                                        (0183)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0184)     ; least for now. 
                                        (0185)     ;
                                        (0186)     M8C_SetBank1
006A: 62 E3 86 MOV   REG[0xE3],0x86     (0187)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
006D: 70 EF    AND   F,0xEF             
006F: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0188)     M8C_SetBank0
                                        (0189) 
                                        (0190) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0191) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0192)     M8C_EnableWatchDog
                                        (0193) ENDIF
                                        (0194) 
                                        (0195) IF ( SELECT_32K )
                                        (0196)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0197) ELSE
0072: 41 FE FB AND   REG[0xFE],0xFB     (0198)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0199) ENDIF
                                        (0200) 
                                        (0201) IF	(TOOLCHAIN & HITECH)
                                        (0202) 	global		__Lstackps
                                        (0203) 	mov     a,low __Lstackps
                                        (0204) 	swap    a,sp
                                        (0205) ELSE
                                        (0206)     ;------------------
                                        (0207)     ; Set up the stack
                                        (0208)     ;------------------
0075: 50 49    MOV   A,0x49             (0209)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
0077: 4E       SWAP  SP,A               (0210)     swap  SP, A                    ; This is only temporary if going to LMM
0078: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0211) ENDIF
                                        (0212) 
                                        (0213)     ;-----------------------------------------------
                                        (0214)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0215)     ;-----------------------------------------------
                                        (0216) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0217) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0218)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0219)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0220)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0221)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0222)   IF ( AGND_BYPASS )
                                        (0223)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0224)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0225)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0226)     ; value using the proper trim values.
                                        (0227)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0228)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0229)   ENDIF
                                        (0230)  ENDIF
                                        (0231) ENDIF ; 5.0 V Operation
                                        (0232) 
                                        (0233) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0234)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0235)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0236)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0237)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0238)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0239)  ENDIF
                                        (0240) ENDIF ; 3.3 Volt Operation
                                        (0241) 
                                        (0242) IF ( POWER_SETTING & POWER_SET_2V7_12MHZ)      ; *** 2.7 Volts / 12MHZ operation ***
                                        (0243)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0244)     M8SSC_SetTableTrims  2, SSCTBL2_TRIM_IMO_2V_12MHZ, SSCTBL2_TRIM_BGR_2V, AGND_BYPASS_JUST
                                        (0245) ENDIF ; *** 2.7 Volts / 12MHZ operation ***
                                        (0246) 
                                        (0247) IF ( POWER_SETTING & POWER_SET_2V7_6MHZ)       ; *** 2.7 Volts /  6MHZ operation ***
                                        (0248)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0249)     M8SSC_SetTableTrims  2, SSCTBL2_TRIM_IMO_2V_6MHZ,  SSCTBL2_TRIM_BGR_2V, AGND_BYPASS_JUST
                                        (0250) ENDIF ; *** 2.7 Volts /  6MHZ operation ***
                                        (0251) 
007B: 55 F8 00 MOV   [_ramareas_end+175],0x0(0252)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
007E: 55 F9 00 MOV   [_ramareas_end+176],0x0(0253)     mov  [bSSC_KEYSP], 0
0081: 71 10    OR    F,0x10             
                                        (0254) 
                                        (0255)     ;---------------------------------------
                                        (0256)     ; Initialize Crystal Oscillator and PLL
                                        (0257)     ;---------------------------------------
                                        (0258) 
                                        (0259) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0260)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0261)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0262)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0263)     ; the ECO to stabilize.
                                        (0264)     ;
                                        (0265)     M8C_SetBank1
                                        (0266)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0267)     M8C_SetBank0
                                        (0268)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0269)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0270)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0271) .WaitFor1s:
                                        (0272)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0273)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0274)                                           ;   since interrupts are not globally enabled
                                        (0275) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0276)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0277)     M8C_SetBank1
0083: 62 E0 02 MOV   REG[0xE0],0x2      (0278)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0086: 70 EF    AND   F,0xEF             
0088: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0279)     M8C_SetBank0
                                        (0280)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0281) 
                                        (0282) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0283) 
                                        (0284) IF ( PLL_MODE )
                                        (0285)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0286)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0287)     ;
                                        (0288)     M8C_SetBank1
                                        (0289)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0290)     M8C_SetBank0
                                        (0291)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0292)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0293) 
                                        (0294) .WaitFor16ms:
                                        (0295)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0296)     jz   .WaitFor16ms
                                        (0297)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0298)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0299)     M8C_SetBank0
                                        (0300) 
                                        (0301) IF      ( WAIT_FOR_32K )
                                        (0302) ELSE ; !( WAIT_FOR_32K )
                                        (0303)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0304)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0305) ENDIF ;(WAIT_FOR_32K)
                                        (0306) ENDIF ;(PLL_MODE)
                                        (0307) 
                                        (0308)     ;-------------------------------------------------------
                                        (0309)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0310)     ;-------------------------------------------------------
                                        (0311) 
                                        (0312)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0313) 
                                        (0314) IF (SYSCLK_SOURCE)
                                        (0315)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0316) ENDIF
                                        (0317)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0318) 
                                        (0319)     ;------------------------
                                        (0320)     ; Close CT leakage path.
                                        (0321)     ;------------------------
008B: 62 71 05 MOV   REG[0x71],0x5      (0322)     mov   reg[ACB00CR0], 05h
008E: 62 75 05 MOV   REG[0x75],0x5      (0323)     mov   reg[ACB01CR0], 05h
                                        (0324) 
                                        (0325)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0326)     ;---------------------------------------------------
                                        (0327)     ; Insert your custom code below this banner
                                        (0328)     ;---------------------------------------------------
                                        (0329) 
                                        (0330)     ;---------------------------------------------------
                                        (0331)     ; Insert your custom code above this banner
                                        (0332)     ;---------------------------------------------------
                                        (0333)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0334) 
                                        (0335)     ;-------------------------
                                        (0336)     ; Load Base Configuration
                                        (0337)     ;-------------------------
                                        (0338)     ; Load global parameter settings and load the user modules in the
                                        (0339)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0340)     ; to minimize start up time; (2) We may still need to play with the
                                        (0341)     ; Sleep Timer.
                                        (0342)     ;
0091: 7C 04 48 LCALL 0x0448             (0343)     lcall LoadConfigInit
                                        (0344) 
                                        (0345)     ;-----------------------------------
                                        (0346)     ; Initialize C Run-Time Environment
                                        (0347)     ;-----------------------------------
                                        (0348) IF ( C_LANGUAGE_SUPPORT )
0094: 50 00    MOV   A,0x0              (0349)     mov  A,0                           ; clear the 'bss' segment to zero
0096: 55 11 2A MOV   [__r0],0x2A        (0350)     mov  [__r0],<__bss_start
                                        (0351) BssLoop:
0099: 3C 11 49 CMP   [__r0],0x49        (0352)     cmp  [__r0],<__bss_end
009C: A0 05    JZ    0x00A2             (0353)     jz   BssDone
009E: 3F 11    MVI   [__r0],A           (0354)     mvi  [__r0],A
00A0: 8F F8    JMP   0x0099             (0355)     jmp  BssLoop
                                        (0356) BssDone:
00A2: 50 03    MOV   A,0x3              (0357)     mov  A,>__idata_start              ; copy idata to data segment
00A4: 57 D8    MOV   X,0xD8             (0358)     mov  X,<__idata_start
00A6: 55 11 00 MOV   [__r0],0x0         (0359)     mov  [__r0],<__data_start
                                        (0360) IDataLoop:
00A9: 3C 11 0B CMP   [__r0],0xB         (0361)     cmp  [__r0],<__data_end
00AC: A0 0B    JZ    0x00B8             (0362)     jz   C_RTE_Done
00AE: 08       PUSH  A                  (0363)     push A
00AF: 28       ROMX                     (0364)     romx
00B0: 3F 11    MVI   [__r0],A           (0365)     mvi  [__r0],A
00B2: 18       POP   A                  (0366)     pop  A
00B3: 75       INC   X                  (0367)     inc  X
00B4: 09 00    ADC   A,0x0              (0368)     adc  A,0
00B6: 8F F2    JMP   0x00A9             (0369)     jmp  IDataLoop
00B8: 71 10    OR    F,0x10             
                                        (0370) 
                                        (0371) C_RTE_Done:
                                        (0372) 
                                        (0373) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0374) 
                                        (0375)     ;-------------------------------
                                        (0376)     ; Voltage Stabilization for SMP
                                        (0377)     ;-------------------------------
                                        (0378) 
                                        (0379) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0380) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0381)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0382)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0383)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0384)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0385)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0386)     M8C_SetBank1
                                        (0387)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0388)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0389)     M8C_SetBank0
                                        (0390)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0391)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0392) .WaitFor2ms:
                                        (0393)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0394)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0395) ENDIF ; SMP is operational
                                        (0396) ENDIF ; 5.0V Operation
                                        (0397) 
                                        (0398)     ;-------------------------------
                                        (0399)     ; Set Power-On Reset (POR) Level
                                        (0400)     ;-------------------------------
                                        (0401)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0402)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0403)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0404)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0405)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0406) 
                                        (0407)     M8C_SetBank1
                                        (0408) 
                                        (0409) IF (POWER_SETTING & POWER_SET_2V7)             ; 2.7V Operation?
                                        (0410)                                                ;  Yes, lowest trip already set
                                        (0411) ELSE                                           ;   No, must adjust POR...
                                        (0412) IF (POWER_SETTING & POWER_SET_3V3)             ; 3.3V Operation?
                                        (0413)     or   reg[VLT_CR], VLT_CR_POR_MID           ;   Yes, change to midpoint trip
                                        (0414) ELSE
                                        (0415) IF (POWER_SETTING & POWER_SET_5V0)             ; 5.0V Operation?
                                        (0416)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)       ; and Slow Mode?
                                        (0417)     or   reg[VLT_CR], VLT_CR_POR_MID           ;   Yes, set to midpoint trip
                                        (0418)  ELSE                                          ;    No, fast mode
                                        (0419)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )    ;      As fast as 24MHz?
00BA: 43 E3 10 OR    REG[0xE3],0x10     (0420)     or   reg[VLT_CR], VLT_CR_POR_MID           ;         No, change to midpoint trip
00BD: 70 EF    AND   F,0xEF             
                                        (0421)   ELSE ; 24HMz                                 ;
                                        (0422)     or    reg[VLT_CR], VLT_CR_POR_HIGH         ;        Yes, switch to	highest setting
                                        (0423)   ENDIF ; 24MHz
                                        (0424)  ENDIF ; Slow Mode
                                        (0425) ENDIF ; 5.0V Operation
                                        (0426) ENDIF ; 3.3V Operation
                                        (0427) ENDIF ; 2.7V Operation
                                        (0428) 
                                        (0429)     M8C_SetBank0
                                        (0430) 
                                        (0431)     ;----------------------------
                                        (0432)     ; Wrap up and invoke "main"
                                        (0433)     ;----------------------------
                                        (0434) 
                                        (0435)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0436)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0437)     ;
00BF: 62 E0 00 MOV   REG[0xE0],0x0      (0438)     mov  reg[INT_MSK0],0
00C2: 71 10    OR    F,0x10             
                                        (0439) 
                                        (0440)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0441)     ;
                                        (0442)     M8C_SetBank1
00C4: 62 E0 02 MOV   REG[0xE0],0x2      (0443)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
00C7: 70 EF    AND   F,0xEF             
                                        (0444)     M8C_SetBank0
                                        (0445) 
                                        (0446)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0447)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0448)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0449)     ;
00C9: 62 E2 00 MOV   REG[0xE2],0x0      (0450)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0451)                                    ; have been set during the boot process.
                                        (0452) IF	(TOOLCHAIN & HITECH)
                                        (0453) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0454) ELSE
                                        (0455) IF ENABLE_LJMP_TO_MAIN
                                        (0456)     ljmp  _main                    ; goto main (no return)
                                        (0457) ELSE
00CC: 7C 0A C9 LCALL _main              (0458)     lcall _main                    ; call main
                                        (0459) .Exit:
00CF: 8F FF    JMP   0x00CF             (0460)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0461) ENDIF
                                        (0462) ENDIF ; TOOLCHAIN
                                        (0463) 
                                        (0464)     ;---------------------------------
                                        (0465)     ; Library Access to Global Parms
                                        (0466)     ;---------------------------------
                                        (0467)     ;
                                        (0468)  bGetPowerSetting:
                                        (0469) _bGetPowerSetting:
                                        (0470)     ; Returns value of POWER_SETTING in the A register.
                                        (0471)     ; No inputs. No Side Effects.
                                        (0472)     ;
                                        (0473) IF (POWER_SETTING & POWER_SET_2V7)
                                        (0474)     mov   A, POWER_SETTING | POWER_SET_SLOW_IMO
                                        (0475) ELSE
00D1: 50 10    MOV   A,0x10             (0476)     mov   A, POWER_SETTING          ; Supply voltage and internal main osc
                                        (0477) ENDIF
00D3: 7F       RET                      (0478)     ret
                                        (0479) 
                                        (0480) IF	(TOOLCHAIN & HITECH)
                                        (0481) ELSE
                                        (0482)     ;---------------------------------
                                        (0483)     ; Order Critical RAM & ROM AREAs
                                        (0484)     ;---------------------------------
                                        (0485)     ;  'TOP' is all that has been defined so far...
                                        (0486) 
                                        (0487)     ;  ROM AREAs for C CONST, static & global items
                                        (0488)     ;
                                        (0489)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0490)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0491) __idata_start:
                                        (0492) 
                                        (0493)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0494) __func_lit_start:
                                        (0495) 
                                        (0496)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0497)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0498) 
                                        (0499)     ; CODE segment for general use
                                        (0500)     ;
                                        (0501)     AREA text (ROM, REL, CON)
                                        (0502) __text_start:
                                        (0503) 
                                        (0504)     ; RAM area usage
                                        (0505)     ;
                                        (0506)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0507) __data_start:
                                        (0508) 
                                        (0509)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0510)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0511)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0512) __bss_start:
                                        (0513) 
                                        (0514) ENDIF ; TOOLCHAIN
                                        (0515) 
                                        (0516) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.3191
03E3: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_slc_free_28_pin_feb_16_2013_Bank1
                                        (0019) export LoadConfigTBL_slc_free_28_pin_feb_16_2013_Bank0
                                        (0020) export LoadConfigTBL_slc_free_28_pin_feb_16_2013_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_slc_free_28_pin_feb_16_2013_Bank0:
                                        (0023) ;  Instance name ADCINC, User Module ADCINC
                                        (0024) ;       Instance name ADCINC, Block Name ADC(ASD11)
                                        (0025) 	db		84h, 90h		;ADCINC_AtoDcr0(ASD11CR0)
                                        (0026) 	db		85h, 00h		;ADCINC_AtoDcr1(ASD11CR1)
                                        (0027) 	db		86h, 60h		;ADCINC_AtoDcr2(ASD11CR2)
                                        (0028) 	db		87h, f8h		;ADCINC_AtoDcr3(ASD11CR3)
                                        (0029) ;       Instance name ADCINC, Block Name PWM(DBB00)
                                        (0030) 	db		23h, 00h		;ADCINC_PWMcr0(DBB00CR0)
                                        (0031) 	db		21h, 00h		;ADCINC_PWMdr1(DBB00DR1)
                                        (0032) 	db		22h, 01h		;ADCINC_PWMdr2(DBB00DR2)
                                        (0033) ;  Instance name AMUX4_0, User Module AMUX4
                                        (0034) ;  Instance name AMUX4_1, User Module AMUX4
                                        (0035) ;  Instance name DAC6_VGND, User Module DAC6
                                        (0036) ;       Instance name DAC6_VGND, Block Name DAC(ASC10)
                                        (0037) 	db		80h, 80h		;DAC6_VGND_CR0(ASC10CR0)
                                        (0038) 	db		81h, 40h		;DAC6_VGND_CR1(ASC10CR1)
                                        (0039) 	db		82h, a0h		;DAC6_VGND_CR2(ASC10CR2)
                                        (0040) 	db		83h, 30h		;DAC6_VGND_CR3(ASC10CR3)
                                        (0041) ;  Instance name DAC9_Ia, User Module DAC9
                                        (0042) ;       Instance name DAC9_Ia, Block Name LSB(ASD20)
                                        (0043) 	db		90h, 80h		;DAC9_Ia_LSB_CR0(ASD20CR0)
                                        (0044) 	db		91h, 80h		;DAC9_Ia_LSB_CR1(ASD20CR1)
                                        (0045) 	db		92h, 20h		;DAC9_Ia_LSB_CR2(ASD20CR2)
                                        (0046) 	db		93h, 30h		;DAC9_Ia_LSB_CR3(ASD20CR3)
                                        (0047) ;       Instance name DAC9_Ia, Block Name MSB(ASC21)
                                        (0048) 	db		94h, a0h		;DAC9_Ia_MSB_CR0(ASC21CR0)
                                        (0049) 	db		95h, 41h		;DAC9_Ia_MSB_CR1(ASC21CR1)
                                        (0050) 	db		96h, a0h		;DAC9_Ia_MSB_CR2(ASC21CR2)
                                        (0051) 	db		97h, 34h		;DAC9_Ia_MSB_CR3(ASC21CR3)
                                        (0052) ;  Instance name INSAMP, User Module INSAMP
                                        (0053) ;       Instance name INSAMP, Block Name INV(ACB00)
                                        (0054) 	db		71h, ddh		;INSAMP_INV_CR0(ACB00CR0)
                                        (0055) 	db		72h, 21h		;INSAMP_INV_CR1(ACB00CR1)
                                        (0056) 	db		73h, 20h		;INSAMP_INV_CR2(ACB00CR2)
                                        (0057) 	db		70h, 00h		;INSAMP_INV_CR3(ACB00CR3)
                                        (0058) ;       Instance name INSAMP, Block Name NON_INV(ACB01)
                                        (0059) 	db		75h, 1ch		;INSAMP_NON_INV_CR0(ACB01CR0)
                                        (0060) 	db		76h, 21h		;INSAMP_NON_INV_CR1(ACB01CR1)
                                        (0061) 	db		77h, 20h		;INSAMP_NON_INV_CR2(ACB01CR2)
                                        (0062) 	db		74h, 00h		;INSAMP_NON_INV_CR3(ACB01CR3)
                                        (0063) ;  Instance name LCD, User Module LCD
                                        (0064) ;  Instance name PWM8_Heater, User Module PWM8
                                        (0065) ;       Instance name PWM8_Heater, Block Name PWM8(DBB01)
                                        (0066) 	db		27h, 00h		;PWM8_Heater_CONTROL_REG(DBB01CR0)
                                        (0067) 	db		25h, ffh		;PWM8_Heater_PERIOD_REG(DBB01DR1)
                                        (0068) 	db		26h, 00h		;PWM8_Heater_COMPARE_REG(DBB01DR2)
                                        (0069) ;  Instance name PWM8_NB_Out, User Module PWM8
                                        (0070) ;       Instance name PWM8_NB_Out, Block Name PWM8(DCB03)
                                        (0071) 	db		2fh, 00h		;PWM8_NB_Out_CONTROL_REG(DCB03CR0)
                                        (0072) 	db		2dh, ffh		;PWM8_NB_Out_PERIOD_REG(DCB03DR1)
                                        (0073) 	db		2eh, 00h		;PWM8_NB_Out_COMPARE_REG(DCB03DR2)
                                        (0074) ;  Instance name PWM8_Vout, User Module PWM8
                                        (0075) ;       Instance name PWM8_Vout, Block Name PWM8(DCB02)
                                        (0076) 	db		2bh, 00h		;PWM8_Vout_CONTROL_REG(DCB02CR0)
                                        (0077) 	db		29h, ffh		;PWM8_Vout_PERIOD_REG(DCB02DR1)
                                        (0078) 	db		2ah, 00h		;PWM8_Vout_COMPARE_REG(DCB02DR2)
                                        (0079) ;  Instance name SleepTimer, User Module SleepTimer
                                        (0080) ;  Global Register values Bank 0
                                        (0081) 	db		60h, 09h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0082) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0083) 	db		63h, 3fh		; AnalogReferenceControl register (ARF_CR)
                                        (0084) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0085) 	db		e6h, 02h		; DecimatorControl_0 register (DEC_CR0)
                                        (0086) 	db		e7h, 02h		; DecimatorControl_1 register (DEC_CR1)
                                        (0087) 	db		d6h, 00h		; I2CConfig register (I2CCFG)
                                        (0088) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0089) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0090) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0091) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0092) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0093) 	db		b5h, 88h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0094) 	db		b6h, 08h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0095) 	db		ffh
                                        (0096) LoadConfigTBL_slc_free_28_pin_feb_16_2013_Bank1:
                                        (0097) ;  Instance name ADCINC, User Module ADCINC
                                        (0098) ;       Instance name ADCINC, Block Name ADC(ASD11)
                                        (0099) ;       Instance name ADCINC, Block Name PWM(DBB00)
                                        (0100) 	db		20h, 31h		;ADCINC_PWMfn(DBB00FN)
                                        (0101) 	db		21h, 16h		;ADCINC_PWMsl(DBB00IN)
                                        (0102) 	db		22h, 40h		;ADCINC_PWMos(DBB00OU)
                                        (0103) ;  Instance name AMUX4_0, User Module AMUX4
                                        (0104) ;  Instance name AMUX4_1, User Module AMUX4
                                        (0105) ;  Instance name DAC6_VGND, User Module DAC6
                                        (0106) ;       Instance name DAC6_VGND, Block Name DAC(ASC10)
                                        (0107) ;  Instance name DAC9_Ia, User Module DAC9
                                        (0108) ;       Instance name DAC9_Ia, Block Name LSB(ASD20)
                                        (0109) ;       Instance name DAC9_Ia, Block Name MSB(ASC21)
                                        (0110) ;  Instance name INSAMP, User Module INSAMP
                                        (0111) ;       Instance name INSAMP, Block Name INV(ACB00)
                                        (0112) ;       Instance name INSAMP, Block Name NON_INV(ACB01)
                                        (0113) ;  Instance name LCD, User Module LCD
                                        (0114) ;  Instance name PWM8_Heater, User Module PWM8
                                        (0115) ;       Instance name PWM8_Heater, Block Name PWM8(DBB01)
                                        (0116) 	db		24h, 31h		;PWM8_Heater_FUNC_REG(DBB01FN)
                                        (0117) 	db		25h, 11h		;PWM8_Heater_INPUT_REG(DBB01IN)
                                        (0118) 	db		26h, 44h		;PWM8_Heater_OUTPUT_REG(DBB01OU)
                                        (0119) ;  Instance name PWM8_NB_Out, User Module PWM8
                                        (0120) ;       Instance name PWM8_NB_Out, Block Name PWM8(DCB03)
                                        (0121) 	db		2ch, 31h		;PWM8_NB_Out_FUNC_REG(DCB03FN)
                                        (0122) 	db		2dh, 14h		;PWM8_NB_Out_INPUT_REG(DCB03IN)
                                        (0123) 	db		2eh, 06h		;PWM8_NB_Out_OUTPUT_REG(DCB03OU)
                                        (0124) ;  Instance name PWM8_Vout, User Module PWM8
                                        (0125) ;       Instance name PWM8_Vout, Block Name PWM8(DCB02)
                                        (0126) 	db		28h, 31h		;PWM8_Vout_FUNC_REG(DCB02FN)
                                        (0127) 	db		29h, 14h		;PWM8_Vout_INPUT_REG(DCB02IN)
                                        (0128) 	db		2ah, 05h		;PWM8_Vout_OUTPUT_REG(DCB02OU)
                                        (0129) ;  Instance name SleepTimer, User Module SleepTimer
                                        (0130) ;  Global Register values Bank 1
                                        (0131) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0132) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0133) 	db		60h, 05h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0134) 	db		62h, 29h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0135) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0136) 	db		68h, 00h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0137) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0138) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0139) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0140) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0141) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0142) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0143) 	db		e1h, 0bh		; OscillatorControl_1 register (OSC_CR1)
                                        (0144) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0145) 	db		dfh, 2fh		; OscillatorControl_3 register (OSC_CR3)
                                        (0146) 	db		deh, 00h		; OscillatorControl_4 register (OSC_CR4)
                                        (0147) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0148) 	db		ffh
                                        (0149) AREA psoc_config(rom, rel)
                                        (0150) LoadConfigTBL_slc_free_28_pin_feb_16_2013_Ordered:
                                        (0151) ;  Ordered Global Register values
                                        (0152) 	M8C_SetBank0
03E5: 62 00 00 MOV   REG[0x0],0x0       (0153) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
03E8: 71 10    OR    F,0x10             
                                        (0154) 	M8C_SetBank1
03EA: 62 00 04 MOV   REG[0x0],0x4       (0155) 	mov	reg[00h], 04h		; Port_0_DriveMode_0 register (PRT0DM0)
03ED: 62 01 FB MOV   REG[0x1],0xFB      (0156) 	mov	reg[01h], fbh		; Port_0_DriveMode_1 register (PRT0DM1)
03F0: 70 EF    AND   F,0xEF             
                                        (0157) 	M8C_SetBank0
03F2: 62 03 FB MOV   REG[0x3],0xFB      (0158) 	mov	reg[03h], fbh		; Port_0_DriveMode_2 register (PRT0DM2)
03F5: 62 02 00 MOV   REG[0x2],0x0       (0159) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
03F8: 71 10    OR    F,0x10             
                                        (0160) 	M8C_SetBank1
03FA: 62 02 00 MOV   REG[0x2],0x0       (0161) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
03FD: 62 03 00 MOV   REG[0x3],0x0       (0162) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
0400: 70 EF    AND   F,0xEF             
                                        (0163) 	M8C_SetBank0
0402: 62 01 00 MOV   REG[0x1],0x0       (0164) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
0405: 62 04 00 MOV   REG[0x4],0x0       (0165) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
0408: 71 10    OR    F,0x10             
                                        (0166) 	M8C_SetBank1
040A: 62 04 70 MOV   REG[0x4],0x70      (0167) 	mov	reg[04h], 70h		; Port_1_DriveMode_0 register (PRT1DM0)
040D: 62 05 8F MOV   REG[0x5],0x8F      (0168) 	mov	reg[05h], 8fh		; Port_1_DriveMode_1 register (PRT1DM1)
0410: 70 EF    AND   F,0xEF             
                                        (0169) 	M8C_SetBank0
0412: 62 07 8F MOV   REG[0x7],0x8F      (0170) 	mov	reg[07h], 8fh		; Port_1_DriveMode_2 register (PRT1DM2)
0415: 62 06 70 MOV   REG[0x6],0x70      (0171) 	mov	reg[06h], 70h		; Port_1_GlobalSelect register (PRT1GS)
0418: 71 10    OR    F,0x10             
                                        (0172) 	M8C_SetBank1
041A: 62 06 00 MOV   REG[0x6],0x0       (0173) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
041D: 62 07 00 MOV   REG[0x7],0x0       (0174) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
0420: 70 EF    AND   F,0xEF             
                                        (0175) 	M8C_SetBank0
0422: 62 05 00 MOV   REG[0x5],0x0       (0176) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
0425: 62 08 00 MOV   REG[0x8],0x0       (0177) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
0428: 71 10    OR    F,0x10             
                                        (0178) 	M8C_SetBank1
042A: 62 08 FF MOV   REG[0x8],0xFF      (0179) 	mov	reg[08h], ffh		; Port_2_DriveMode_0 register (PRT2DM0)
042D: 62 09 00 MOV   REG[0x9],0x0       (0180) 	mov	reg[09h], 00h		; Port_2_DriveMode_1 register (PRT2DM1)
0430: 70 EF    AND   F,0xEF             
                                        (0181) 	M8C_SetBank0
0432: 62 0B 00 MOV   REG[0xB],0x0       (0182) 	mov	reg[0bh], 00h		; Port_2_DriveMode_2 register (PRT2DM2)
0435: 62 0A 00 MOV   REG[0xA],0x0       (0183) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
0438: 71 10    OR    F,0x10             
                                        (0184) 	M8C_SetBank1
043A: 62 0A 00 MOV   REG[0xA],0x0       (0185) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
043D: 62 0B 00 MOV   REG[0xB],0x0       (0186) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
0440: 70 EF    AND   F,0xEF             
                                        (0187) 	M8C_SetBank0
0442: 62 09 00 MOV   REG[0x9],0x0       (0188) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
0445: 70 EF    AND   F,0xEF             
                                        (0189) 	M8C_SetBank0
0447: 7F       RET                      (0190) 	ret
                                        (0191) 
                                        (0192) 
                                        (0193) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_slc_free_28_pin_feb_16_2013
                                        (0026) export _LoadConfig_slc_free_28_pin_feb_16_2013
                                        (0027) export Port_2_Data_SHADE
                                        (0028) export _Port_2_Data_SHADE
                                        (0029) export Port_2_DriveMode_0_SHADE
                                        (0030) export _Port_2_DriveMode_0_SHADE
                                        (0031) export Port_2_DriveMode_1_SHADE
                                        (0032) export _Port_2_DriveMode_1_SHADE
                                        (0033) 
                                        (0034) 
                                        (0035) export NO_SHADOW
                                        (0036) export _NO_SHADOW
                                        (0037) 
                                        (0038) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0039) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0040) 
                                        (0041) AREA psoc_config(rom, rel)
                                        (0042) 
                                        (0043) ;---------------------------------------------------------------------------
                                        (0044) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0045) ;                  parameters handled by boot code, like CPU speed). This
                                        (0046) ;                  function can be called from user code, but typically it
                                        (0047) ;                  is only called from boot.
                                        (0048) ;
                                        (0049) ;       INPUTS: None.
                                        (0050) ;      RETURNS: Nothing.
                                        (0051) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0052) ;               In the large memory model currently only the page
                                        (0053) ;               pointer registers listed below are modified.  This does
                                        (0054) ;               not guarantee that in future implementations of this
                                        (0055) ;               function other page pointer registers will not be
                                        (0056) ;               modified.
                                        (0057) ;          
                                        (0058) ;               Page Pointer Registers Modified: 
                                        (0059) ;               CUR_PP
                                        (0060) ;
                                        (0061) _LoadConfigInit:
                                        (0062)  LoadConfigInit:
                                        (0063)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0064)     
0448: 55 1A 00 MOV   [0x1A],0x0         (0065) 	mov		[Port_2_Data_SHADE], 0h
044B: 55 1B FF MOV   [0x1B],0xFF        (0066) 	mov		[Port_2_DriveMode_0_SHADE], ffh
044E: 55 1C 00 MOV   [0x1C],0x0         (0067) 	mov		[Port_2_DriveMode_1_SHADE], 0h
                                        (0068) 
0451: 7C 04 58 LCALL 0x0458             (0069) 	lcall	LoadConfig_slc_free_28_pin_feb_16_2013
0454: 7C 03 E3 LCALL 0x03E3             (0070) 	lcall	LoadConfigTBL_slc_free_28_pin_feb_16_2013_Ordered
                                        (0071) 
                                        (0072) 
                                        (0073)     RAM_EPILOGUE RAM_USE_CLASS_4
0457: 7F       RET                      (0074)     ret
                                        (0075) 
                                        (0076) ;---------------------------------------------------------------------------
                                        (0077) ; Load Configuration slc_free_28_pin_feb_16_2013
                                        (0078) ;
                                        (0079) ;    Load configuration registers for slc_free_28_pin_feb_16_2013.
                                        (0080) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0081) ;
                                        (0082) ;       INPUTS: None.
                                        (0083) ;      RETURNS: Nothing.
                                        (0084) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0085) ;               modified as may the Page Pointer registers!
                                        (0086) ;               In the large memory model currently only the page
                                        (0087) ;               pointer registers listed below are modified.  This does
                                        (0088) ;               not guarantee that in future implementations of this
                                        (0089) ;               function other page pointer registers will not be
                                        (0090) ;               modified.
                                        (0091) ;          
                                        (0092) ;               Page Pointer Registers Modified: 
                                        (0093) ;               CUR_PP
                                        (0094) ;
                                        (0095) _LoadConfig_slc_free_28_pin_feb_16_2013:
                                        (0096)  LoadConfig_slc_free_28_pin_feb_16_2013:
                                        (0097)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0098) 
0458: 10       PUSH  X                  (0099) 	push	x
0459: 70 EF    AND   F,0xEF             
                                        (0100)     M8C_SetBank0                    ; Force bank 0
045B: 50 00    MOV   A,0x0              (0101)     mov     a, 0                    ; Specify bank 0
045D: 67       ASR   A                  (0102)     asr     a                       ; Store in carry flag
                                        (0103)                                     ; Load bank 0 table:
045E: 50 03    MOV   A,0x3              (0104)     mov     A, >LoadConfigTBL_slc_free_28_pin_feb_16_2013_Bank0
0460: 57 38    MOV   X,0x38             (0105)     mov     X, <LoadConfigTBL_slc_free_28_pin_feb_16_2013_Bank0
0462: 7C 04 73 LCALL 0x0473             (0106)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0107) 
0465: 50 01    MOV   A,0x1              (0108)     mov     a, 1                    ; Specify bank 1
0467: 67       ASR   A                  (0109)     asr     a                       ; Store in carry flag
                                        (0110)                                     ; Load bank 1 table:
0468: 50 03    MOV   A,0x3              (0111)     mov     A, >LoadConfigTBL_slc_free_28_pin_feb_16_2013_Bank1
046A: 57 9D    MOV   X,0x9D             (0112)     mov     X, <LoadConfigTBL_slc_free_28_pin_feb_16_2013_Bank1
046C: 7C 04 73 LCALL 0x0473             (0113)     lcall   LoadConfig              ; Load the bank 1 values
046F: 70 EF    AND   F,0xEF             
                                        (0114) 
                                        (0115)     M8C_SetBank0                    ; Force return to bank 0
0471: 20       POP   X                  (0116) 	pop		x
                                        (0117) 
                                        (0118)     RAM_EPILOGUE RAM_USE_CLASS_4
0472: 7F       RET                      (0119)     ret
                                        (0120) 
                                        (0121) 
                                        (0122) 
                                        (0123) 
                                        (0124) ;---------------------------------------------------------------------------
                                        (0125) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0126) ;              pairs. Terminate on address=0xFF.
                                        (0127) ;
                                        (0128) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0129) ;           Flag Register Carry bit encodes the Register Bank
                                        (0130) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0131) ;
                                        (0132) ;  RETURNS: nothing.
                                        (0133) ;
                                        (0134) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0135) ;                X-3 Temporary store for register address
                                        (0136) ;                X-2 LSB of config table address
                                        (0137) ;                X-1 MSB of config table address
                                        (0138) ;
                                        (0139) LoadConfig:
                                        (0140)     RAM_PROLOGUE RAM_USE_CLASS_2
0473: 38 02    ADD   SP,0x2             (0141)     add     SP, 2                   ; Set up local vars
0475: 10       PUSH  X                  (0142)     push    X                       ; Save config table address on stack
0476: 08       PUSH  A                  (0143)     push    A
0477: 4F       MOV   X,SP               (0144)     mov     X, SP
0478: 56 FC 00 MOV   [X-4],0x0          (0145)     mov     [X-4], 0                ; Set default Destination to Bank 0
047B: D0 04    JNC   0x0480             (0146)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
047D: 56 FC 01 MOV   [X-4],0x1          (0147)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0148) .BankSelectSaved:
0480: 18       POP   A                  (0149)     pop     A
0481: 20       POP   X                  (0150)     pop     X
0482: 70 EF    AND   F,0xEF             
0484: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0151) 
                                        (0152) LoadConfigLp:
                                        (0153)     M8C_SetBank0                    ; Switch to bank 0
                                        (0154)     M8C_ClearWDT                    ; Clear the watchdog for long inits
0487: 10       PUSH  X                  (0155)     push    X                       ; Preserve the config table address
0488: 08       PUSH  A                  (0156)     push    A
0489: 28       ROMX                     (0157)     romx                            ; Load register address from table
048A: 39 FF    CMP   A,0xFF             (0158)     cmp     A, END_CONFIG_TABLE     ; End of table?
048C: A0 1F    JZ    0x04AC             (0159)     jz      EndLoadConfig           ;   Yes, go wrap it up
048E: 4F       MOV   X,SP               (0160)     mov     X, SP                   ;
048F: 48 FC 01 TST   [X-4],0x1          (0161)     tst     [X-4], 1                ; Loading IO Bank 1?
0492: A0 03    JZ    0x0496             (0162)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
0494: 71 10    OR    F,0x10             
                                        (0163)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0164) .IOBankNowSet:
0496: 54 FD    MOV   [X-3],A            (0165)     mov     [X-3], A                ; Stash the register address
0498: 18       POP   A                  (0166)     pop     A                       ; Retrieve the table address
0499: 20       POP   X                  (0167)     pop     X
049A: 75       INC   X                  (0168)     inc     X                       ; Advance to the data byte
049B: 09 00    ADC   A,0x0              (0169)     adc     A, 0
049D: 10       PUSH  X                  (0170)     push    X                       ; Save the config table address again
049E: 08       PUSH  A                  (0171)     push    A
049F: 28       ROMX                     (0172)     romx                            ; load config data from the table
04A0: 4F       MOV   X,SP               (0173)     mov     X, SP                   ; retrieve the register address
04A1: 59 FD    MOV   X,[X-3]            (0174)     mov     X, [X-3]
04A3: 61 00    MOV   REG[X+0x0],A       (0175)     mov     reg[X], A               ; Configure the register
04A5: 18       POP   A                  (0176)     pop     A                       ; retrieve the table address
04A6: 20       POP   X                  (0177)     pop     X
04A7: 75       INC   X                  (0178)     inc     X                       ; advance to next table entry
04A8: 09 00    ADC   A,0x0              (0179)     adc     A, 0
04AA: 8F D7    JMP   0x0482             (0180)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0181) EndLoadConfig:
04AC: 38 FC    ADD   SP,0xFC            (0182)     add     SP, -4
                                        (0183)     RAM_EPILOGUE RAM_USE_CLASS_2
04AE: 7F       RET                      (0184)     ret
                                        (0185) 
                                        (0186) AREA InterruptRAM(ram, rel)
                                        (0187) 
                                        (0188) NO_SHADOW:
                                        (0189) _NO_SHADOW:
                                        (0190) ; write only register shadows
                                        (0191) _Port_2_Data_SHADE:
                                        (0192) Port_2_Data_SHADE:	BLK	1
                                        (0193) _Port_2_DriveMode_0_SHADE:
                                        (0194) Port_2_DriveMode_0_SHADE:	BLK	1
                                        (0195) _Port_2_DriveMode_1_SHADE:
                                        (0196) Port_2_DriveMode_1_SHADE:	BLK	1
                                        (0197) 
FILE: lib\sleeptimerint.asm             (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   SleepTimerINT.asm
                                        (0004) ;;  Version: 1.0, Updated on 2015/3/4 at 22:26:59
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  SleepTimer Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "SleepTimer.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "m8c.inc"
                                        (0016) 
                                        (0017) ;-----------------------------------------------
                                        (0018) ;  Global Symbols
                                        (0019) ;-----------------------------------------------
                                        (0020) export  _SleepTimer_ISR
                                        (0021) 
                                        (0022) 
                                        (0023) export  SleepTimer_fTick
                                        (0024) export _SleepTimer_fTick
                                        (0025) export  SleepTimer_bTimerValue
                                        (0026) export _SleepTimer_bTimerValue
                                        (0027) export  SleepTimer_bCountDown
                                        (0028) export _SleepTimer_bCountDown
                                        (0029) export  SleepTimer_TickCount
                                        (0030) export _SleepTimer_TickCount
                                        (0031) 
                                        (0032) ;-----------------------------------------------
                                        (0033) ; Variable Allocation
                                        (0034) ;-----------------------------------------------
                                        (0035) AREA InterruptRAM (RAM, REL, CON)
                                        (0036) 
                                        (0037)  SleepTimer_fTick:
                                        (0038) _SleepTimer_fTick:        BLK  1
                                        (0039) 
                                        (0040)  SleepTimer_bTimerValue:
                                        (0041) _SleepTimer_bTimerValue:  BLK  1
                                        (0042) 
                                        (0043)  SleepTimer_bCountDown:
                                        (0044) _SleepTimer_bCountDown:   BLK  1
                                        (0045) 
                                        (0046)  SleepTimer_TickCount:
                                        (0047) _SleepTimer_TickCount:    BLK  SleepTimer_TICK_CNTR_SIZE
                                        (0048) 
                                        (0049) 
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) //14Point7 ASM Code Start
                                        (0071) Sleep_Counter:: // Sleep timer will trigger this ISR @ 512hz, Sleep Counter is used to count the number number of times this happens, Sleep Counter is used to figure how often certain routines should run
                                        (0072) _Sleep_Counter:: BLK  1
                                        (0073) //14Point7 ASM Code End
                                        (0074) 
                                        (0075) ;---------------------------------------------------
                                        (0076) ; Insert your custom declarations above this banner
                                        (0077) ;---------------------------------------------------
                                        (0078) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0079) 
                                        (0080) 
                                        (0081) AREA UserModules (ROM, REL, CON)
                                        (0082) 
                                        (0083) ;-----------------------------------------------------------------------------
                                        (0084) ;  FUNCTION NAME: _SleepTimer_ISR
                                        (0085) ;
                                        (0086) ;  DESCRIPTION:
                                        (0087) ;      interrupt handler for instance SleepTimer.
                                        (0088) ;
                                        (0089) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0090) ;     handler for this function, then place code where specified.
                                        (0091) ;-----------------------------------------------------------------------------
                                        (0092) 
                                        (0093) _SleepTimer_ISR:
                                        (0094) 
04AF: 2E 12 01 OR    [0x12],0x1         (0095)    or   [SleepTimer_fTick],0x01           ; Set tick flag
                                        (0096)  
                                        (0097)                                                 ; Decrement CountDown (Sync counter)
04B2: 47 14 FF TST   [0x14],0xFF        (0098)    tst  [SleepTimer_bCountDown],0xFF
04B5: A0 03    JZ    0x04B9             (0099)    jz   .DoTimer
04B7: 7A 14    DEC   [0x14]             (0100)    dec  [SleepTimer_bCountDown]
                                        (0101) 
                                        (0102) .DoTimer:                                       ; Decrement TimerValue, if required
04B9: 47 13 FF TST   [0x13],0xFF        (0103)    tst  [SleepTimer_bTimerValue],0xFF
04BC: A0 03    JZ    0x04C0             (0104)    jz   .IncBigCounter
04BE: 7A 13    DEC   [0x13]             (0105)    dec  [SleepTimer_bTimerValue]
                                        (0106) 
                                        (0107) .IncBigCounter:                                 ; Increment big tick counter
                                        (0108) IF (SleepTimer_TICK_CNTR_SIZE & 0x04)
04C0: 76 18    INC   [0x18]             (0109)    inc  [SleepTimer_TickCount+3]
04C2: D0 0B    JNC   0x04CE             (0110)    jnc  SleepTimer_SLEEP_ISR_END
                                        (0111) 
04C4: 76 17    INC   [0x17]             (0112)    inc  [SleepTimer_TickCount+2]
04C6: D0 07    JNC   0x04CE             (0113)    jnc  SleepTimer_SLEEP_ISR_END
                                        (0114) ENDIF
                                        (0115) 
                                        (0116) IF (SleepTimer_TICK_CNTR_SIZE & (0x04|0x02))
04C8: 76 16    INC   [0x16]             (0117)    inc  [SleepTimer_TickCount+1]
04CA: D0 03    JNC   0x04CE             (0118)    jnc  SleepTimer_SLEEP_ISR_END
                                        (0119) ENDIF
                                        (0120) 
04CC: 76 15    INC   [0x15]             (0121)    inc  [SleepTimer_TickCount+0]
                                        (0122) 
                                        (0123) SleepTimer_SLEEP_ISR_END:
                                        (0124) 
                                        (0125)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0126)    ;---------------------------------------------------
                                        (0127)    ; Insert your custom code below this banner
                                        (0128)    ;---------------------------------------------------
                                        (0129)    ;   NOTE: interrupt service routines must preserve
                                        (0130)    ;   the values of the A and X CPU registers.
                                        (0131)    //14Point7 ASM Code Start
04CE: 76 19    INC   [0x19]             (0132)    inc [Sleep_Counter]
                                        (0133)    //call  LED7SEG_Update
                                        (0134)    //14Point7 ASM Code End
                                        (0135)    ;---------------------------------------------------
                                        (0136)    ; Insert your custom code above this banner
                                        (0137)    ;---------------------------------------------------
                                        (0138)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0139) 
04D0: 7E       RETI                     (0140)    reti
                                        (0141) 
                                        (0142) ; end of file SleepTimerINT.asm
                                        (0143) 
FILE: lib\sleeptimer.asm                (0001) ;;*****************************************************************************
04D1: 43 E0 40 OR    REG[0xE0],0x40     (0002) ;;*****************************************************************************
                                        (0003) ;;  Filename:   SleepTimer.asm
                                        (0004) ;;  Version: 1.0, Updated on 2015/3/4 at 22:26:59
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  SleepTimer User Module software implementation file for the
                                        (0008) ;;                22/24/27/29xxx families.
                                        (0009) ;;
                                        (0010) ;;
                                        (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0013) ;;        This means it is the caller's responsibility to preserve any values
                                        (0014) ;;        in the X and A registers that are still needed after the API functions
                                        (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0019) ;;-----------------------------------------------------------------------------
                                        (0020) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0021) ;;*****************************************************************************
                                        (0022) ;;*****************************************************************************
                                        (0023) 
                                        (0024) 
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "SleepTimer.inc"
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ;  Global Symbols
                                        (0031) ;-----------------------------------------------
                                        (0032) ;-------------------------------------------------------------------
                                        (0033) ;  Declare the functions global for both assembler and C compiler.
                                        (0034) ;
                                        (0035) ;  Note that there are two names for each API. First name is
                                        (0036) ;  assembler reference. Name with underscore is name reference for
                                        (0037) ;  C compiler.  Calling function in C source code does not require
                                        (0038) ;  the underscore.
                                        (0039) ;-------------------------------------------------------------------
                                        (0040) export  SleepTimer_EnableInt
                                        (0041) export _SleepTimer_EnableInt
                                        (0042) export  SleepTimer_DisableInt
                                        (0043) export _SleepTimer_DisableInt
                                        (0044) 
                                        (0045) export  SleepTimer_Start
                                        (0046) export _SleepTimer_Start
                                        (0047) export  SleepTimer_Stop
                                        (0048) export _SleepTimer_Stop
                                        (0049) 
                                        (0050) export  SleepTimer_TickWait
                                        (0051) export _SleepTimer_TickWait
                                        (0052) 
                                        (0053) export  SleepTimer_SyncWait
                                        (0054) export _SleepTimer_SyncWait
                                        (0055) 
                                        (0056) export  SleepTimer_SetInterval
                                        (0057) export _SleepTimer_SetInterval
                                        (0058) 	
                                        (0059) export  SleepTimer_bGetTickCntr
                                        (0060) export _SleepTimer_bGetTickCntr
                                        (0061) 
                                        (0062) export  SleepTimer_SetTimer
                                        (0063) export _SleepTimer_SetTimer
                                        (0064) 
                                        (0065) export  SleepTimer_bGetTimer
                                        (0066) export _SleepTimer_bGetTimer
                                        (0067) 
                                        (0068) IF(SleepTimer_TICK_CNTR_SIZE & (4|2))
                                        (0069) export  SleepTimer_iGetTickCntr
                                        (0070) export _SleepTimer_iGetTickCntr
                                        (0071) ENDIF
                                        (0072) 
                                        (0073) IF(SleepTimer_TICK_CNTR_SIZE & 4)
                                        (0074) export  SleepTimer_lGetTickCntr
                                        (0075) export _SleepTimer_lGetTickCntr
                                        (0076) ENDIF
                                        (0077) 
                                        (0078) 
                                        (0079) area text (ROM,REL)
                                        (0080) 
                                        (0081) ;-----------------------------------------------
                                        (0082) ;  EQUATES
                                        (0083) ;-----------------------------------------------
                                        (0084) 
                                        (0085) ; Counter LSB Offset if 4 byte tick counter
                                        (0086) IF(SleepTimer_TICK_CNTR_SIZE & 4)
                                        (0087) ST_LSB_OFFSET:   equ  3
                                        (0088) ENDIF
                                        (0089) 
                                        (0090) ; Counter LSB Offset if 2 byte tick counter
                                        (0091) IF(SleepTimer_TICK_CNTR_SIZE & 2)
                                        (0092) ST_LSB_OFFSET:   equ  1
                                        (0093) ENDIF
                                        (0094) 
                                        (0095) ; Counter LSB Offset if 1 byte tick counter
                                        (0096) IF(SleepTimer_TICK_CNTR_SIZE & 1)
                                        (0097) ST_LSB_OFFSET:   equ  0
                                        (0098) ENDIF
                                        (0099) 
                                        (0100) 
                                        (0101) area UserModules (ROM, REL, CON)
                                        (0102) 
                                        (0103) ;=============================================================================
                                        (0104) ;=============================================================================
                                        (0105) ;
                                        (0106) ;     Low-Level Commands
                                        (0107) ;
                                        (0108) ;=============================================================================
                                        (0109) ;=============================================================================
                                        (0110) 
                                        (0111) .SECTION
                                        (0112) ;-----------------------------------------------------------------------------
                                        (0113) ;  FUNCTION NAME: SleepTimer_EnableInt
                                        (0114) ;
                                        (0115) ;  DESCRIPTION:
                                        (0116) ;     Enables SleepTimer interrupts.
                                        (0117) ;-----------------------------------------------------------------------------
                                        (0118) ;
                                        (0119) ;  ARGUMENTS:
                                        (0120) ;     none.
                                        (0121) ;
                                        (0122) ;  RETURNS:
                                        (0123) ;     none.
                                        (0124) ;
                                        (0125) ;  SIDE EFFECTS:
                                        (0126) ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0127) ;
                                        (0128) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0129) ;
                                        (0130)  SleepTimer_EnableInt:
                                        (0131) _SleepTimer_EnableInt:
                                        (0132)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0133)    M8C_EnableIntMask SleepTimer_INT_REG, SleepTimer_INT_MASK
                                        (0134)    RAM_EPILOGUE RAM_USE_CLASS_1
04D4: 7F       RET                      (0135)    ret
                                        (0136) .ENDSECTION
                                        (0137) 
                                        (0138)     
                                        (0139) .SECTION
                                        (0140) ;-----------------------------------------------------------------------------
                                        (0141) ;  FUNCTION NAME: SleepTimer_DisableInt
                                        (0142) ;
                                        (0143) ;  DESCRIPTION:
                                        (0144) ;     Disables the sleep timer. 
                                        (0145) ;
                                        (0146) ;-----------------------------------------------------------------------------
                                        (0147) ;
                                        (0148) ;  ARGUMENTS:
                                        (0149) ;     none.
                                        (0150) ;
                                        (0151) ;  RETURNS:
                                        (0152) ;     none.
                                        (0153) ;
                                        (0154) ;  SIDE EFFECTS:
                                        (0155) ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0156) ;
                                        (0157) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0158) ;
                                        (0159)  SleepTimer_DisableInt:
                                        (0160) _SleepTimer_DisableInt:
                                        (0161)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0162)    M8C_DisableIntMask SleepTimer_INT_REG, SleepTimer_INT_MASK
                                        (0163)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0164)    ret
                                        (0165) .ENDSECTION
                                        (0166) 
                                        (0167) 
                                        (0168) .SECTION
                                        (0169) ;-----------------------------------------------------------------------------
                                        (0170) ;  FUNCTION NAME: SleepTimer_Start()
                                        (0171) ;
                                        (0172) ;  DESCRIPTION:
                                        (0173) ;     Clears all the variables.  
                                        (0174) ;-----------------------------------------------------------------------------
                                        (0175) ;
                                        (0176) ;  ARGUMENTS:
                                        (0177) ;      none
                                        (0178) ;
                                        (0179) ;  RETURNS:
                                        (0180) ;     none.
                                        (0181) ;
                                        (0182) ;  SIDE EFFECTS;    
                                        (0183) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0184) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0185) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0186) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0187) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0188) ;          
                                        (0189) ;    Page Pointer Registers Modified: 
                                        (0190) ;          CUR_PP
                                        (0191) ;
                                        (0192) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0193) ;
                                        (0194)  SleepTimer_Start:
                                        (0195) _SleepTimer_Start:
                                        (0196)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0197)    RAM_SETPAGE_CUR >SleepTimer_fTick      
04D5: 50 00    MOV   A,0x0              (0198)    mov  A,0
04D7: 53 12    MOV   [0x12],A           (0199)    mov  [SleepTimer_fTick],A
04D9: 53 13    MOV   [0x13],A           (0200)    mov  [SleepTimer_bTimerValue],A
04DB: 53 14    MOV   [0x14],A           (0201)    mov  [SleepTimer_bCountDown],A
04DD: 53 18    MOV   [0x18],A           (0202)    mov  [SleepTimer_TickCount + ST_LSB_OFFSET],A        ; Clear TickCount[0:7]
                                        (0203) IF(SleepTimer_TICK_CNTR_SIZE & (4|2))
04DF: 53 17    MOV   [0x17],A           (0204)    mov  [SleepTimer_TickCount + ST_LSB_OFFSET - 1],A    ; Clear TickCount[8:15]
                                        (0205) ENDIF
                                        (0206) 
                                        (0207) 
                                        (0208) IF(SleepTimer_TICK_CNTR_SIZE & 4)
04E1: 53 16    MOV   [0x16],A           (0209)    mov   [SleepTimer_TickCount + ST_LSB_OFFSET - 2],A    ; Clear TickCount[16:31]
04E3: 53 15    MOV   [0x15],A           (0210)    mov   [SleepTimer_TickCount + ST_LSB_OFFSET - 3],A    
                                        (0211) ENDIF
                                        (0212) 
                                        (0213) 
                                        (0214)    RAM_EPILOGUE RAM_USE_CLASS_4
04E5: 7F       RET                      (0215)    ret
                                        (0216) .ENDSECTION
                                        (0217) 
                                        (0218) 
                                        (0219) .SECTION
                                        (0220) ;-----------------------------------------------------------------------------
                                        (0221) ;  FUNCTION NAME: SleepTimer_Stop
                                        (0222) ;
                                        (0223) ;  DESCRIPTION:
                                        (0224) ;   This function does nothing at this time.  It is only here as a place 
                                        (0225) ;   holder.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;
                                        (0228) ;  ARGUMENTS:
                                        (0229) ;     none.
                                        (0230) ;
                                        (0231) ;  RETURNS:
                                        (0232) ;     none.
                                        (0233) ;
                                        (0234) ;  SIDE EFFECTS:
                                        (0235) ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0236) ;
                                        (0237) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0238) ;
                                        (0239)  SleepTimer_Stop:
                                        (0240) _SleepTimer_Stop:
                                        (0241)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0242)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0243)    ret
                                        (0244) .ENDSECTION
                                        (0245) 
                                        (0246) .SECTION
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;  FUNCTION NAME: SleepTimer_SetInterval
                                        (0249) ;
                                        (0250) ;  DESCRIPTION:
                                        (0251) ;     Sets sleep timer interval
                                        (0252) ;
                                        (0253) ;-----------------------------------------------------------------------------
                                        (0254) ;
                                        (0255) ;  ARGUMENTS:
                                        (0256) ;     A <= Timer setting
                                        (0257) ;
                                        (0258) ;  RETURNS:
                                        (0259) ;     none.
                                        (0260) ;
                                        (0261) ;  SIDE EFFECTS:
                                        (0262) ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0263) ;
                                        (0264) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0265) ;
                                        (0266)  SleepTimer_SetInterval:
                                        (0267) _SleepTimer_SetInterval:
                                        (0268)    RAM_PROLOGUE RAM_USE_CLASS_2
04E6: 21 18    AND   A,0x18             (0269)    and  A,SleepTimer_CLOCK_MASK               ; Mask off invalid data
04E8: 4F       MOV   X,SP               (0270)    mov  X, SP
04E9: 08       PUSH  A                  (0271)    push A
04EA: 71 10    OR    F,0x10             
                                        (0272)    M8C_SetBank1
04EC: 5D E0    MOV   A,REG[0xE0]        (0273)    mov  A, reg[OSC_CR0]                  ; Get current timer value
04EE: 21 E7    AND   A,0xE7             (0274)    and  A,~SleepTimer_CLOCK_MASK   ; Zero out old timer value
04F0: 2B 00    OR    A,[X+0]            (0275)    or   A, [X]                           ; Set new timer values
04F2: 60 E0    MOV   REG[0xE0],A        (0276)    mov  reg[OSC_CR0],A                   ; Write it
04F4: 70 EF    AND   F,0xEF             
                                        (0277)    M8C_SetBank0
04F6: 18       POP   A                  (0278)    pop  A
                                        (0279)    RAM_EPILOGUE RAM_USE_CLASS_2
04F7: 7F       RET                      (0280)    ret
                                        (0281) .ENDSECTION
                                        (0282) 
                                        (0283) 
                                        (0284) .SECTION
                                        (0285) ;-----------------------------------------------------------------------------
                                        (0286) ;  FUNCTION NAME: SleepTimer_TickWait(BYTE bTicks)
                                        (0287) ;
                                        (0288) ;  DESCRIPTION:
                                        (0289) ;     Wait X Ticks and return
                                        (0290) ;
                                        (0291) ;-----------------------------------------------------------------------------
                                        (0292) ;
                                        (0293) ;  ARGUMENTS:
                                        (0294) ;     A <= Count down time
                                        (0295) ;
                                        (0296) ;  RETURNS:
                                        (0297) ;     none.
                                        (0298) ;
                                        (0299) ;  SIDE EFFECTS;    
                                        (0300) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0301) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0302) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0303) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0304) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0305) ;          
                                        (0306) ;    Page Pointer Registers Modified: 
                                        (0307) ;          CUR_PP
                                        (0308) ;
                                        (0309) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0310) ;
                                        (0311)  SleepTimer_TickWait:
                                        (0312) _SleepTimer_TickWait:
                                        (0313)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0314)    RAM_SETPAGE_CUR >SleepTimer_fTick      
                                        (0315)    mov   [SleepTimer_fTick],0x00          ; Clear tick flag
                                        (0316) 
                                        (0317) .WaitTick:
                                        (0318)    tst   [SleepTimer_fTick],0xFF          ; Check for tick 
                                        (0319)    jz    .WaitTick
                                        (0320)    mov   [SleepTimer_fTick],0x00          ; Clear tick flag
                                        (0321)    dec   A                                      ; Dec the timer variable
                                        (0322)    jnz   .WaitTick                              ; Loop until we count down to zero
                                        (0323) 
                                        (0324)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0325)    ret
                                        (0326) .ENDSECTION
                                        (0327) 
                                        (0328) 
                                        (0329) .SECTION
                                        (0330) ;-----------------------------------------------------------------------------
                                        (0331) ;  FUNCTION NAME: SleepTimer_SyncWait(BYTE bCounts, BYTE fMode)
                                        (0332) ;
                                        (0333) ;  DESCRIPTION:
                                        (0334) ;     This function resets the SyncWait timer.  If fMode = 0, the timer
                                        (0335) ;     is set to the new value then exits the function immediatly.  If fMode
                                        (0336) ;     is set to 1, the firmware waits for the timer to expire before the
                                        (0337) ;     timer is reset and and exits.
                                        (0338) ;
                                        (0339) ;-----------------------------------------------------------------------------
                                        (0340) ;
                                        (0341) ;  ARGUMENTS:
                                        (0342) ;     A <= tCounts to wait
                                        (0343) ;     X <= fMode    fMode = 0  Just reload the value, do not wait
                                        (0344) ;                   fMode = 1  Wait for last value to count down to zero
                                        (0345) ;                              then reload.
                                        (0346) ;
                                        (0347) ;  RETURNS:
                                        (0348) ;     none.
                                        (0349) ;
                                        (0350) ;  SIDE EFFECTS;    
                                        (0351) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0352) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0353) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0354) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0355) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0356) ;          
                                        (0357) ;    Page Pointer Registers Modified: 
                                        (0358) ;          CUR_PP
                                        (0359) ;
                                        (0360) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0361) ;
                                        (0362)  SleepTimer_SyncWait:
                                        (0363) _SleepTimer_SyncWait:
                                        (0364)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0365)    RAM_SETPAGE_CUR >SleepTimer_bCountDown
                                        (0366)    swap  A,X
                                        (0367)    AND   A,SleepTimer_FORCE_RELOAD
                                        (0368)    jnz   .ReloadIt
                                        (0369) 
                                        (0370) .WaitLoop:
                                        (0371)    tst   [SleepTimer_bCountDown],0xFF
                                        (0372)    jnz   .WaitLoop
                                        (0373) 
                                        (0374) 
                                        (0375) .ReloadIt:
                                        (0376)    swap  A,X
                                        (0377)    mov   [SleepTimer_bCountDown],A 
                                        (0378) 
                                        (0379)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0380)    ret
                                        (0381) .ENDSECTION
                                        (0382) 
                                        (0383) 
                                        (0384) 
                                        (0385) .SECTION
                                        (0386) ;-----------------------------------------------------------------------------
                                        (0387) ;  FUNCTION NAME: SleepTimer_bGetTickCntr
                                        (0388) ;
                                        (0389) ;  DESCRIPTION:
                                        (0390) ;     Returns the LSB of the tick Counter
                                        (0391) ;
                                        (0392) ;-----------------------------------------------------------------------------
                                        (0393) ;
                                        (0394) ;  ARGUMENTS:
                                        (0395) ;     none
                                        (0396) ;
                                        (0397) ;  RETURNS:
                                        (0398) ;     LSB of lTickCount
                                        (0399) ;
                                        (0400) ;  SIDE EFFECTS;    
                                        (0401) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0402) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0403) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0404) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0405) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0406) ;          
                                        (0407) ;    Page Pointer Registers Modified: 
                                        (0408) ;          CUR_PP
                                        (0409) ;
                                        (0410) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0411) ;
                                        (0412)  SleepTimer_bGetTickCntr:
                                        (0413) _SleepTimer_bGetTickCntr:
                                        (0414)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0415)    RAM_SETPAGE_CUR >SleepTimer_TickCount
                                        (0416)    mov   A,[SleepTimer_TickCount + ST_LSB_OFFSET]
                                        (0417)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0418)    ret
                                        (0419) .ENDSECTION
                                        (0420) 
                                        (0421) .SECTION
                                        (0422) ;-----------------------------------------------------------------------------
                                        (0423) ;  FUNCTION NAME: SleepTimer_SetTimer
                                        (0424) ;
                                        (0425) ;  DESCRIPTION:
                                        (0426) ;     Set timer with parameter in A
                                        (0427) ;
                                        (0428) ;-----------------------------------------------------------------------------
                                        (0429) ;
                                        (0430) ;  ARGUMENTS:
                                        (0431) ;     A => Value used to set Timer value
                                        (0432) ;
                                        (0433) ;  RETURNS:
                                        (0434) ;     None
                                        (0435) ;
                                        (0436) ;  SIDE EFFECTS;    
                                        (0437) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0438) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0439) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0440) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0441) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0442) ;          
                                        (0443) ;    Page Pointer Registers Modified: 
                                        (0444) ;          CUR_PP
                                        (0445) ;
                                        (0446) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0447) ;
                                        (0448)  SleepTimer_SetTimer:
                                        (0449) _SleepTimer_SetTimer:
                                        (0450)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0451)    RAM_SETPAGE_CUR >SleepTimer_TickCount
                                        (0452)    mov   [SleepTimer_bTimerValue],A
                                        (0453)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0454)    ret
                                        (0455) .ENDSECTION
                                        (0456) 
                                        (0457) .SECTION
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;  FUNCTION NAME: SleepTimer_bGetTimer
                                        (0460) ;
                                        (0461) ;  DESCRIPTION:
                                        (0462) ;     Returns timer value in A
                                        (0463) ;
                                        (0464) ;-----------------------------------------------------------------------------
                                        (0465) ;
                                        (0466) ;  ARGUMENTS:
                                        (0467) ;     None
                                        (0468) ;
                                        (0469) ;  RETURNS:
                                        (0470) ;     Return timer value in A
                                        (0471) ;
                                        (0472) ;  SIDE EFFECTS;    
                                        (0473) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0474) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0475) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0476) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0477) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0478) ;          
                                        (0479) ;    Page Pointer Registers Modified: 
                                        (0480) ;          CUR_PP
                                        (0481) ;
                                        (0482) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0483) ;
                                        (0484)  SleepTimer_bGetTimer:
                                        (0485) _SleepTimer_bGetTimer:
                                        (0486)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0487)    RAM_SETPAGE_CUR >SleepTimer_TickCount
                                        (0488)    mov   A,[SleepTimer_bTimerValue]
                                        (0489)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0490)    ret
                                        (0491) .ENDSECTION
                                        (0492) 
                                        (0493) IF(SleepTimer_TICK_CNTR_SIZE & (4|2))
                                        (0494) .SECTION
                                        (0495) ;-----------------------------------------------------------------------------
                                        (0496) ;  FUNCTION NAME: SleepTimer_iGetTickCntr
                                        (0497) ;
                                        (0498) ;  DESCRIPTION:
                                        (0499) ;     Returns the least significant 16 bits.
                                        (0500) ;
                                        (0501) ;-----------------------------------------------------------------------------
                                        (0502) ;
                                        (0503) ;  ARGUMENTS:
                                        (0504) ;     none
                                        (0505) ;
                                        (0506) ;  RETURNS:
                                        (0507) ;     (int)TickCount in A and X  
                                        (0508) ;     X  <= MSB
                                        (0509) ;     A  <= LSB
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS;    
                                        (0512) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0513) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0514) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0515) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0516) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0517) ;          
                                        (0518) ;    Page Pointer Registers Modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0522) ;
                                        (0523)  SleepTimer_iGetTickCntr:
                                        (0524) _SleepTimer_iGetTickCntr:
                                        (0525)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0526)    RAM_SETPAGE_CUR >SleepTimer_TickCount
                                        (0527)    ; Disable interrupt here
                                        (0528)    M8C_DisableIntMask SleepTimer_INT_REG, SleepTimer_INT_MASK
                                        (0529)    mov   A,[SleepTimer_TickCount + ST_LSB_OFFSET]    ; Place LSB in A
                                        (0530)    mov   X,[SleepTimer_TickCount + ST_LSB_OFFSET - 1]    ; Place MSB in X
                                        (0531)    M8C_EnableIntMask SleepTimer_INT_REG, SleepTimer_INT_MASK
                                        (0532)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0533)    ret
                                        (0534) .ENDSECTION
                                        (0535) ENDIF
                                        (0536) 
                                        (0537) IF(SleepTimer_TICK_CNTR_SIZE & 4)
                                        (0538) .SECTION
                                        (0539) ;-----------------------------------------------------------------------------
                                        (0540) ;  FUNCTION NAME: SleepTimer_lGetTickCntr
                                        (0541) ;
                                        (0542) ;  DESCRIPTION:
                                        (0543) ;     Returns a pointer to TickCount
                                        (0544) ;
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;
                                        (0547) ;  ARGUMENTS:
                                        (0548) ;     [A:X] => Pointer to 32 bit tick counter (X=LSB, A=MSB)
                                        (0549) ;
                                        (0550) ;  RETURNS:
                                        (0551) ;     Pointer to lTickCount
                                        (0552) ;
                                        (0553) ;  SIDE EFFECTS;    
                                        (0554) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0555) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0556) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0557) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0558) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0559) ;          
                                        (0560) ;    Page Pointer Registers Modified: 
                                        (0561) ;          CUR_PP
                                        (0562) ;
                                        (0563) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0564) ;
                                        (0565)  SleepTimer_lGetTickCntr:
                                        (0566) _SleepTimer_lGetTickCntr:
                                        (0567)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0568)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0569)    ; Disable interrupt here
                                        (0570)    M8C_DisableIntMask SleepTimer_INT_REG, SleepTimer_INT_MASK
                                        (0571)    RAM_SETPAGE_CUR >SleepTimer_TickCount
                                        (0572)    RAM_SETPAGE_IDX A
                                        (0573)    push  A
                                        (0574)    mov   A,[SleepTimer_TickCount + 0]
                                        (0575)    mov   [X + 0],A
                                        (0576)    mov   A,[SleepTimer_TickCount + 1]
                                        (0577)    mov   [X + 1],A
                                        (0578)    mov   A,[SleepTimer_TickCount + 2]
                                        (0579)    mov   [X + 2],A
                                        (0580)    mov   A,[SleepTimer_TickCount + 3]
                                        (0581)    mov   [X + 3],A
                                        (0582)    pop   A
                                        (0583)    
                                        (0584)    M8C_EnableIntMask SleepTimer_INT_REG, SleepTimer_INT_MASK
                                        (0585)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0586)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0587)    ret
                                        (0588) .ENDSECTION
                                        (0589) ENDIF
                                        (0590) 
                                        (0591) 
                                        (0592) 
                                        (0593) 
                                        (0594) ; End of File SleepTimer.asm
FILE: lib\pwm8_voutint.asm              (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_VoutINT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2015/3/4 at 22:26:52
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM8_Vout.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM8_Vout_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM8_Vout_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM8_Vout_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070) 
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
04F8: 7E       RETI                     (0076)    reti
                                        (0077) 
                                        (0078) 
                                        (0079) ; end of file PWM8_VoutINT.asm
FILE: lib\pwm8_vout.asm                 (0001) ;;*****************************************************************************
04F9: 41 E1 FB AND   REG[0xE1],0xFB     (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_Vout.asm
                                        (0004) ;;   Version: 2.60, Updated on 2015/3/4 at 22:26:52
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM8_Vout.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM8_Vout_EnableInt
                                        (0030) export _PWM8_Vout_EnableInt
                                        (0031) export  PWM8_Vout_DisableInt
                                        (0032) export _PWM8_Vout_DisableInt
                                        (0033) export  PWM8_Vout_Start
                                        (0034) export _PWM8_Vout_Start
                                        (0035) export  PWM8_Vout_Stop
                                        (0036) export _PWM8_Vout_Stop
                                        (0037) export  PWM8_Vout_WritePeriod
                                        (0038) export _PWM8_Vout_WritePeriod
                                        (0039) export  PWM8_Vout_WritePulseWidth
                                        (0040) export _PWM8_Vout_WritePulseWidth
                                        (0041) export  PWM8_Vout_bReadPulseWidth
                                        (0042) export _PWM8_Vout_bReadPulseWidth
                                        (0043) export  PWM8_Vout_bReadCounter
                                        (0044) export _PWM8_Vout_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bPWM8_Vout_ReadPulseWidth    ; deprecated
                                        (0049) export _bPWM8_Vout_ReadPulseWidth    ; deprecated
                                        (0050) export  bPWM8_Vout_ReadCounter       ; deprecated
                                        (0051) export _bPWM8_Vout_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA slc_free_28_pin_feb_16_2013_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM8_Vout_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM8_Vout_EnableInt:
                                        (0091) _PWM8_Vout_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM8_Vout_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0095)    ret
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM8_Vout_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM8_Vout_DisableInt:
                                        (0119) _PWM8_Vout_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM8_Vout_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
04FC: 7F       RET                      (0123)    ret
04FD: 43 2B 01 OR    REG[0x2B],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM8_Vout_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM8_Vout_Start:
                                        (0148) _PWM8_Vout_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM8_Vout_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
0500: 7F       RET                      (0152)    ret
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM8_Vout_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM8_Vout_Stop:
                                        (0176) _PWM8_Vout_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM8_Vout_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM8_Vout_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count register (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM8_Vout_WritePeriod:
                                        (0206) _PWM8_Vout_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0208)    mov   reg[PWM8_Vout_PERIOD_REG], A
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0210)    ret
                                        (0211) 
                                        (0212) 
                                        (0213) .ENDSECTION
                                        (0214) 
                                        (0215) .SECTION
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  FUNCTION NAME: PWM8_Vout_WritePulseWidth
                                        (0218) ;
                                        (0219) ;  DESCRIPTION:
                                        (0220) ;     Writes compare value into the Compare register (DR2).
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0224) ;  RETURNS:      Nothing
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PWM8_Vout_WritePulseWidth:
                                        (0233) _PWM8_Vout_WritePulseWidth:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
0501: 60 2A    MOV   REG[0x2A],A        (0235)    mov   reg[PWM8_Vout_COMPARE_REG], A
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
0503: 7F       RET                      (0237)    ret
                                        (0238) 
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) 
                                        (0242) .SECTION
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  FUNCTION NAME: PWM8_Vout_bReadPulseWidth
                                        (0245) ;
                                        (0246) ;  DESCRIPTION:
                                        (0247) ;     Reads the Compare register.
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;
                                        (0250) ;  ARGUMENTS:    None
                                        (0251) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0252) ;  SIDE EFFECTS:
                                        (0253) ;    The A and X registers may be modified by this or future implementations
                                        (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0257) ;    functions.
                                        (0258) ;
                                        (0259)  PWM8_Vout_bReadPulseWidth:
                                        (0260) _PWM8_Vout_bReadPulseWidth:
                                        (0261)  bPWM8_Vout_ReadPulseWidth:                      ; this name deprecated
                                        (0262) _bPWM8_Vout_ReadPulseWidth:                      ; this name deprecated
                                        (0263)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0264)    mov   A, reg[PWM8_Vout_COMPARE_REG]
                                        (0265)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0266)    ret
                                        (0267) 
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) .SECTION
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  FUNCTION NAME: PWM8_Vout_bReadCounter
                                        (0274) ;
                                        (0275) ;  DESCRIPTION:
                                        (0276) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0277) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0278) ;     from the Count to the Compare registers by holding the clock low in
                                        (0279) ;     the PSoC block.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS: None
                                        (0283) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0284) ;  SIDE EFFECTS:
                                        (0285) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0286) ;     2) The A and X registers may be modified by this or future implementations
                                        (0287) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0288) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0289) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0290) ;        functions.
                                        (0291) ;
                                        (0292)  PWM8_Vout_bReadCounter:
                                        (0293) _PWM8_Vout_bReadCounter:
                                        (0294)  bPWM8_Vout_ReadCounter:                         ; this name deprecated
                                        (0295) _bPWM8_Vout_ReadCounter:                         ; this name deprecated
                                        (0296) 
                                        (0297)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0298)    bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
                                        (0299)    wCounter:               EQU   2               ; Frame offset to temp Count   store
                                        (0300)    STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
                                        (0301) 
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0303)    mov   X, SP                                   ; X <- stack frame pointer
                                        (0304)    mov   A, reg[PWM8_Vout_COMPARE_REG]           ; Save the Compare register on the stack
                                        (0305)    push  A                                       ;
                                        (0306)    PWM8_Vout_Stop_M                              ; Disable (stop) the PWM
                                        (0307)    M8C_SetBank1                                  ;
                                        (0308)    mov   A, reg[PWM8_Vout_INPUT_REG]             ; save the clock input setting
                                        (0309)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0310)                                                  ;   hold the clock low:
                                        (0311)    mov   reg[PWM8_Vout_INPUT_REG], INPUT_REG_NULL
                                        (0312)    M8C_SetBank0
                                        (0313)                                                  ; Extract the Count via DR2 register
                                        (0314)    mov   A, reg[PWM8_Vout_COUNTER_REG]           ; DR2 <- DR0
                                        (0315)    mov   A, reg[PWM8_Vout_COMPARE_REG]           ; Stash the Count on the stack
                                        (0316)    push  A                                       ;  -stack frame is now 3 bytes
                                        (0317)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
                                        (0318)    mov   reg[PWM8_Vout_COMPARE_REG], A
                                        (0319)    M8C_SetBank1                                  ; Restore the PWM operation:
                                        (0320)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
                                        (0321)    mov   reg[PWM8_Vout_INPUT_REG], A             ;
                                        (0322)    M8C_SetBank0                                  ;
                                        (0323)    PWM8_Vout_Start_M                             ;   then re-enable the PWM.
                                        (0324)    pop   A                                       ; Setup the return value
                                        (0325)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0327)    ret
                                        (0328) 
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) ; End of File PWM8_Vout.asm
FILE: lib\pwm8_nb_outint.asm            (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_NB_OutINT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2015/3/4 at 22:26:52
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM8_NB_Out.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM8_NB_Out_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM8_NB_Out_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM8_NB_Out_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
0504: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM8_NB_OutINT.asm
FILE: lib\pwm8_nb_out.asm               (0001) ;;*****************************************************************************
0505: 41 E1 F7 AND   REG[0xE1],0xF7     (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_NB_Out.asm
                                        (0004) ;;   Version: 2.60, Updated on 2015/3/4 at 22:26:52
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM8_NB_Out.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM8_NB_Out_EnableInt
                                        (0030) export _PWM8_NB_Out_EnableInt
                                        (0031) export  PWM8_NB_Out_DisableInt
                                        (0032) export _PWM8_NB_Out_DisableInt
                                        (0033) export  PWM8_NB_Out_Start
                                        (0034) export _PWM8_NB_Out_Start
                                        (0035) export  PWM8_NB_Out_Stop
                                        (0036) export _PWM8_NB_Out_Stop
                                        (0037) export  PWM8_NB_Out_WritePeriod
                                        (0038) export _PWM8_NB_Out_WritePeriod
                                        (0039) export  PWM8_NB_Out_WritePulseWidth
                                        (0040) export _PWM8_NB_Out_WritePulseWidth
                                        (0041) export  PWM8_NB_Out_bReadPulseWidth
                                        (0042) export _PWM8_NB_Out_bReadPulseWidth
                                        (0043) export  PWM8_NB_Out_bReadCounter
                                        (0044) export _PWM8_NB_Out_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bPWM8_NB_Out_ReadPulseWidth    ; deprecated
                                        (0049) export _bPWM8_NB_Out_ReadPulseWidth    ; deprecated
                                        (0050) export  bPWM8_NB_Out_ReadCounter       ; deprecated
                                        (0051) export _bPWM8_NB_Out_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA slc_free_28_pin_feb_16_2013_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM8_NB_Out_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM8_NB_Out_EnableInt:
                                        (0091) _PWM8_NB_Out_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM8_NB_Out_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0095)    ret
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM8_NB_Out_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM8_NB_Out_DisableInt:
                                        (0119) _PWM8_NB_Out_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM8_NB_Out_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
0508: 7F       RET                      (0123)    ret
0509: 43 2F 01 OR    REG[0x2F],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM8_NB_Out_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM8_NB_Out_Start:
                                        (0148) _PWM8_NB_Out_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM8_NB_Out_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
050C: 7F       RET                      (0152)    ret
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM8_NB_Out_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM8_NB_Out_Stop:
                                        (0176) _PWM8_NB_Out_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM8_NB_Out_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM8_NB_Out_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count register (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM8_NB_Out_WritePeriod:
                                        (0206) _PWM8_NB_Out_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0208)    mov   reg[PWM8_NB_Out_PERIOD_REG], A
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0210)    ret
                                        (0211) 
                                        (0212) 
                                        (0213) .ENDSECTION
                                        (0214) 
                                        (0215) .SECTION
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  FUNCTION NAME: PWM8_NB_Out_WritePulseWidth
                                        (0218) ;
                                        (0219) ;  DESCRIPTION:
                                        (0220) ;     Writes compare value into the Compare register (DR2).
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0224) ;  RETURNS:      Nothing
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PWM8_NB_Out_WritePulseWidth:
                                        (0233) _PWM8_NB_Out_WritePulseWidth:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
050D: 60 2E    MOV   REG[0x2E],A        (0235)    mov   reg[PWM8_NB_Out_COMPARE_REG], A
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
050F: 7F       RET                      (0237)    ret
                                        (0238) 
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) 
                                        (0242) .SECTION
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  FUNCTION NAME: PWM8_NB_Out_bReadPulseWidth
                                        (0245) ;
                                        (0246) ;  DESCRIPTION:
                                        (0247) ;     Reads the Compare register.
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;
                                        (0250) ;  ARGUMENTS:    None
                                        (0251) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0252) ;  SIDE EFFECTS:
                                        (0253) ;    The A and X registers may be modified by this or future implementations
                                        (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0257) ;    functions.
                                        (0258) ;
                                        (0259)  PWM8_NB_Out_bReadPulseWidth:
                                        (0260) _PWM8_NB_Out_bReadPulseWidth:
                                        (0261)  bPWM8_NB_Out_ReadPulseWidth:                    ; this name deprecated
                                        (0262) _bPWM8_NB_Out_ReadPulseWidth:                    ; this name deprecated
                                        (0263)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0264)    mov   A, reg[PWM8_NB_Out_COMPARE_REG]
                                        (0265)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0266)    ret
                                        (0267) 
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) .SECTION
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  FUNCTION NAME: PWM8_NB_Out_bReadCounter
                                        (0274) ;
                                        (0275) ;  DESCRIPTION:
                                        (0276) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0277) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0278) ;     from the Count to the Compare registers by holding the clock low in
                                        (0279) ;     the PSoC block.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS: None
                                        (0283) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0284) ;  SIDE EFFECTS:
                                        (0285) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0286) ;     2) The A and X registers may be modified by this or future implementations
                                        (0287) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0288) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0289) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0290) ;        functions.
                                        (0291) ;
                                        (0292)  PWM8_NB_Out_bReadCounter:
                                        (0293) _PWM8_NB_Out_bReadCounter:
                                        (0294)  bPWM8_NB_Out_ReadCounter:                       ; this name deprecated
                                        (0295) _bPWM8_NB_Out_ReadCounter:                       ; this name deprecated
                                        (0296) 
                                        (0297)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0298)    bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
                                        (0299)    wCounter:               EQU   2               ; Frame offset to temp Count   store
                                        (0300)    STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
                                        (0301) 
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0303)    mov   X, SP                                   ; X <- stack frame pointer
                                        (0304)    mov   A, reg[PWM8_NB_Out_COMPARE_REG]         ; Save the Compare register on the stack
                                        (0305)    push  A                                       ;
                                        (0306)    PWM8_NB_Out_Stop_M                            ; Disable (stop) the PWM
                                        (0307)    M8C_SetBank1                                  ;
                                        (0308)    mov   A, reg[PWM8_NB_Out_INPUT_REG]           ; save the clock input setting
                                        (0309)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0310)                                                  ;   hold the clock low:
                                        (0311)    mov   reg[PWM8_NB_Out_INPUT_REG], INPUT_REG_NULL
                                        (0312)    M8C_SetBank0
                                        (0313)                                                  ; Extract the Count via DR2 register
                                        (0314)    mov   A, reg[PWM8_NB_Out_COUNTER_REG]         ; DR2 <- DR0
                                        (0315)    mov   A, reg[PWM8_NB_Out_COMPARE_REG]         ; Stash the Count on the stack
                                        (0316)    push  A                                       ;  -stack frame is now 3 bytes
                                        (0317)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
                                        (0318)    mov   reg[PWM8_NB_Out_COMPARE_REG], A
                                        (0319)    M8C_SetBank1                                  ; Restore the PWM operation:
                                        (0320)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
                                        (0321)    mov   reg[PWM8_NB_Out_INPUT_REG], A           ;
                                        (0322)    M8C_SetBank0                                  ;
                                        (0323)    PWM8_NB_Out_Start_M                           ;   then re-enable the PWM.
                                        (0324)    pop   A                                       ; Setup the return value
                                        (0325)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0327)    ret
                                        (0328) 
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) ; End of File PWM8_NB_Out.asm
FILE: lib\pwm8_heaterint.asm            (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_HeaterINT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2015/3/4 at 22:26:52
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM8_Heater.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM8_Heater_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM8_Heater_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM8_Heater_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070) 
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
0510: 7E       RETI                     (0076)    reti
                                        (0077) 
                                        (0078) 
                                        (0079) ; end of file PWM8_HeaterINT.asm
FILE: lib\pwm8_heater.asm               (0001) ;;*****************************************************************************
0511: 41 E1 FD AND   REG[0xE1],0xFD     (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_Heater.asm
                                        (0004) ;;   Version: 2.60, Updated on 2015/3/4 at 22:26:52
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM8_Heater.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM8_Heater_EnableInt
                                        (0030) export _PWM8_Heater_EnableInt
                                        (0031) export  PWM8_Heater_DisableInt
                                        (0032) export _PWM8_Heater_DisableInt
                                        (0033) export  PWM8_Heater_Start
                                        (0034) export _PWM8_Heater_Start
                                        (0035) export  PWM8_Heater_Stop
                                        (0036) export _PWM8_Heater_Stop
                                        (0037) export  PWM8_Heater_WritePeriod
                                        (0038) export _PWM8_Heater_WritePeriod
                                        (0039) export  PWM8_Heater_WritePulseWidth
                                        (0040) export _PWM8_Heater_WritePulseWidth
                                        (0041) export  PWM8_Heater_bReadPulseWidth
                                        (0042) export _PWM8_Heater_bReadPulseWidth
                                        (0043) export  PWM8_Heater_bReadCounter
                                        (0044) export _PWM8_Heater_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bPWM8_Heater_ReadPulseWidth    ; deprecated
                                        (0049) export _bPWM8_Heater_ReadPulseWidth    ; deprecated
                                        (0050) export  bPWM8_Heater_ReadCounter       ; deprecated
                                        (0051) export _bPWM8_Heater_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA slc_free_28_pin_feb_16_2013_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM8_Heater_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM8_Heater_EnableInt:
                                        (0091) _PWM8_Heater_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM8_Heater_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0095)    ret
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM8_Heater_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM8_Heater_DisableInt:
                                        (0119) _PWM8_Heater_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM8_Heater_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
0514: 7F       RET                      (0123)    ret
0515: 43 27 01 OR    REG[0x27],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM8_Heater_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM8_Heater_Start:
                                        (0148) _PWM8_Heater_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM8_Heater_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
0518: 7F       RET                      (0152)    ret
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM8_Heater_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM8_Heater_Stop:
                                        (0176) _PWM8_Heater_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM8_Heater_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM8_Heater_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count register (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM8_Heater_WritePeriod:
                                        (0206) _PWM8_Heater_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0208)    mov   reg[PWM8_Heater_PERIOD_REG], A
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0210)    ret
                                        (0211) 
                                        (0212) 
                                        (0213) .ENDSECTION
                                        (0214) 
                                        (0215) .SECTION
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  FUNCTION NAME: PWM8_Heater_WritePulseWidth
                                        (0218) ;
                                        (0219) ;  DESCRIPTION:
                                        (0220) ;     Writes compare value into the Compare register (DR2).
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0224) ;  RETURNS:      Nothing
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PWM8_Heater_WritePulseWidth:
                                        (0233) _PWM8_Heater_WritePulseWidth:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
0519: 60 26    MOV   REG[0x26],A        (0235)    mov   reg[PWM8_Heater_COMPARE_REG], A
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
051B: 7F       RET                      (0237)    ret
                                        (0238) 
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) 
                                        (0242) .SECTION
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  FUNCTION NAME: PWM8_Heater_bReadPulseWidth
                                        (0245) ;
                                        (0246) ;  DESCRIPTION:
                                        (0247) ;     Reads the Compare register.
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;
                                        (0250) ;  ARGUMENTS:    None
                                        (0251) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0252) ;  SIDE EFFECTS:
                                        (0253) ;    The A and X registers may be modified by this or future implementations
                                        (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0257) ;    functions.
                                        (0258) ;
                                        (0259)  PWM8_Heater_bReadPulseWidth:
                                        (0260) _PWM8_Heater_bReadPulseWidth:
                                        (0261)  bPWM8_Heater_ReadPulseWidth:                    ; this name deprecated
                                        (0262) _bPWM8_Heater_ReadPulseWidth:                    ; this name deprecated
                                        (0263)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0264)    mov   A, reg[PWM8_Heater_COMPARE_REG]
                                        (0265)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0266)    ret
                                        (0267) 
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) .SECTION
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  FUNCTION NAME: PWM8_Heater_bReadCounter
                                        (0274) ;
                                        (0275) ;  DESCRIPTION:
                                        (0276) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0277) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0278) ;     from the Count to the Compare registers by holding the clock low in
                                        (0279) ;     the PSoC block.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS: None
                                        (0283) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0284) ;  SIDE EFFECTS:
                                        (0285) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0286) ;     2) The A and X registers may be modified by this or future implementations
                                        (0287) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0288) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0289) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0290) ;        functions.
                                        (0291) ;
                                        (0292)  PWM8_Heater_bReadCounter:
                                        (0293) _PWM8_Heater_bReadCounter:
                                        (0294)  bPWM8_Heater_ReadCounter:                       ; this name deprecated
                                        (0295) _bPWM8_Heater_ReadCounter:                       ; this name deprecated
                                        (0296) 
                                        (0297)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0298)    bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
                                        (0299)    wCounter:               EQU   2               ; Frame offset to temp Count   store
                                        (0300)    STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
                                        (0301) 
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0303)    mov   X, SP                                   ; X <- stack frame pointer
                                        (0304)    mov   A, reg[PWM8_Heater_COMPARE_REG]         ; Save the Compare register on the stack
                                        (0305)    push  A                                       ;
                                        (0306)    PWM8_Heater_Stop_M                            ; Disable (stop) the PWM
                                        (0307)    M8C_SetBank1                                  ;
                                        (0308)    mov   A, reg[PWM8_Heater_INPUT_REG]           ; save the clock input setting
                                        (0309)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0310)                                                  ;   hold the clock low:
                                        (0311)    mov   reg[PWM8_Heater_INPUT_REG], INPUT_REG_NULL
                                        (0312)    M8C_SetBank0
                                        (0313)                                                  ; Extract the Count via DR2 register
                                        (0314)    mov   A, reg[PWM8_Heater_COUNTER_REG]         ; DR2 <- DR0
                                        (0315)    mov   A, reg[PWM8_Heater_COMPARE_REG]         ; Stash the Count on the stack
                                        (0316)    push  A                                       ;  -stack frame is now 3 bytes
                                        (0317)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
                                        (0318)    mov   reg[PWM8_Heater_COMPARE_REG], A
                                        (0319)    M8C_SetBank1                                  ; Restore the PWM operation:
                                        (0320)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
                                        (0321)    mov   reg[PWM8_Heater_INPUT_REG], A           ;
                                        (0322)    M8C_SetBank0                                  ;
                                        (0323)    PWM8_Heater_Start_M                           ;   then re-enable the PWM.
                                        (0324)    pop   A                                       ; Setup the return value
                                        (0325)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0327)    ret
                                        (0328) 
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) ; End of File PWM8_Heater.asm
FILE: lib\lcd.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD.asm
                                        (0004) ;;  Version: 1.60, Updated on 2015/3/4 at 22:26:36
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_Start
                                        (0044) export  _LCD_Start
                                        (0045) export   LCD_Init
                                        (0046) export  _LCD_Init
                                        (0047) 
                                        (0048) export   LCD_WriteData
                                        (0049) export  _LCD_WriteData
                                        (0050) 
                                        (0051) export   LCD_Control
                                        (0052) export  _LCD_Control
                                        (0053) 
                                        (0054) export  LCD_PrString
                                        (0055) export _LCD_PrString
                                        (0056) 
                                        (0057) export  LCD_PrCString
                                        (0058) export _LCD_PrCString
                                        (0059) 
                                        (0060) export  LCD_Position
                                        (0061) export _LCD_Position
                                        (0062) 
                                        (0063) export  LCD_PrHexByte
                                        (0064) export _LCD_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_PrHexInt
                                        (0067) export _LCD_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_Delay50uTimes
                                        (0070) export _LCD_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_Delay50u
                                        (0073) export _LCD_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_BARGRAPH_ENABLE)
                                        (0081) export  LCD_InitBG
                                        (0082) export _LCD_InitBG
                                        (0083) 
                                        (0084) export  LCD_InitVBG
                                        (0085) export _LCD_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_DrawVBG and
                                        (0090) ;    LCD_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_DrawVBG
                                        (0112) export _LCD_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_DrawVBG
                                        (0117) export  LCD_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_Write_Data
                                        (0127) export  _LCD_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_Port:           equ    PRT2DR
                                        (0135) LCD_PortMode0:      equ    PRT2DM0
                                        (0136) LCD_PortMode1:      equ    PRT2DM1
                                        (0137) 
                                        (0138) LCD_E:              equ    10h
                                        (0139) LCD_RW:             equ    40h
                                        (0140) LCD_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_DATA_MASK:      equ    0Fh
                                        (0143) LCD_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_DATA_READ:      equ    ( LCD_E | LCD_RW | LCD_RS )
                                        (0146) LCD_CNTL_READ:      equ    ( LCD_E | LCD_RW )
                                        (0147) LCD_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_DISP_INC:       equ    03h
                                        (0151) LCD_DISP_OFF:       equ    08h
                                        (0152) LCD_DISP_ON:        equ    0Ch
                                        (0153) LCD_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_PrCString:
                                        (0205) _LCD_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
051C: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
051D: 10       PUSH  X                  (0209)     push  X
051E: 28       ROMX                     (0210)     romx                               ; Get character from ROM
051F: B0 04    JNZ   0x0524             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
0521: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
0522: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
0523: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
0524: 90 35    CALL  LCD_WriteData|LCD_Write_Data|_LCD_WriteData|_LCD_Write_Data(0218)     call  LCD_WriteData                ; Write data to LCD
0526: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
0527: 18       POP   A                  (0220)     pop   A
0528: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
0529: DF F2    JNC   _bPWM8_Heater_ReadPulseWidth|_PWM8_Heater_bReadCounter|_bPWM8_Heater_ReadCounter|bPWM8_Heater_ReadCounter|_LCD_PrCString|LCD_PrCString|_PWM8_Heater_bReadPulseWidth(0222)     jnc   .Loop_PrCString
052B: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
052C: 8F EF    JMP   _bPWM8_Heater_ReadPulseWidth|_PWM8_Heater_bReadCounter|_bPWM8_Heater_ReadCounter|bPWM8_Heater_ReadCounter|_LCD_PrCString|LCD_PrCString|_PWM8_Heater_bReadPulseWidth(0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_PrHexByte:
                                        (0258) _LCD_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
053E: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
053F: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
0540: 67       ASR   A                  (0262)     asr   A
0541: 67       ASR   A                  (0263)     asr   A
0542: 67       ASR   A                  (0264)     asr   A
0543: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
0545: FF E7    INDEX LCD_HEX_STR        (0266)     index LCD_HEX_STR                  ; Get Hex value
0547: 90 12    CALL  LCD_WriteData|LCD_Write_Data|_LCD_WriteData|_LCD_Write_Data(0267)     call  LCD_WriteData                ; Write data to screen
0549: 18       POP   A                  (0268)     pop   A                            ; Restore value
054A: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
054C: FF E0    INDEX LCD_HEX_STR        (0270)     index LCD_HEX_STR                  ; Get Hex value
054E: 90 0B    CALL  LCD_WriteData|LCD_Write_Data|_LCD_WriteData|_LCD_Write_Data(0271)     call  LCD_WriteData                ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
0550: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_PrHexInt:
                                        (0303) _LCD_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0305)     swap  A,X
                                        (0306)     call  LCD_PrHexByte                ; Print MSB
                                        (0307)     mov   A,X                          ; Move LSB into position
                                        (0308)     call  LCD_PrHexByte                ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0310)     ret
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_PrString:
                                        (0342) _LCD_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
0551: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
0553: A0 06    JZ    0x055A             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_writeData is known not to modify X so no need to preserve
0555: 90 04    CALL  LCD_WriteData|LCD_Write_Data|_LCD_WriteData|_LCD_Write_Data(0349)     call  LCD_WriteData                ; Write data to screen
0557: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
0558: 8F F8    JMP   _LCD_PrString|_LCD_PrHexInt(0351)     jmp   .Loop_PrString               ; Go get next character
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
055A: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_WriteData:
                                        (0382) _LCD_WriteData:
                                        (0383)  LCD_Write_Data:   ; Do not use
                                        (0384) _LCD_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
055B: 90 5F    CALL  0x05BC             (0386)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_Check_Ready
055D: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
055E: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
055F: 67       ASR   A                  (0390)     asr   A
0560: 67       ASR   A                  (0391)     asr   A
0561: 67       ASR   A                  (0392)     asr   A
0562: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
0564: 90 38    CALL  0x059E             (0394)     call  LCD_WDATA_Nibble             ; Write Upper nibble
0566: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
0567: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
0569: 40       NOP                      (0397)     nop
056A: 40       NOP                      (0398)     nop
056B: 40       NOP                      (0399)     nop
056C: 90 30    CALL  0x059E             (0400)     call  LCD_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
056E: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_Control:
                                        (0430) _LCD_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
056F: 90 4B    CALL  0x05BC             (0432)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_Check_Ready
0571: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
0572: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
0573: 67       ASR   A                  (0436)     asr   A
0574: 67       ASR   A                  (0437)     asr   A
0575: 67       ASR   A                  (0438)     asr   A
0576: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
0578: 90 09    CALL  0x0583             (0440)     call  LCD_WCNTL_Nibble             ; Write high nibble
057A: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
057B: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
057D: 40       NOP                      (0443)     nop
057E: 40       NOP                      (0444)     nop
057F: 40       NOP                      (0445)     nop
0580: 90 01    CALL  0x0583             (0446)     call  LCD_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
0582: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
0583: 08       PUSH  A                  (0477)     push  A
                                        (0478)     RAM_SETPAGE_CUR >Port_2_Data_SHADE           ; Set CUR_PP to LCD variable address
0584: 26 1A 80 AND   [0x1A],0x80        (0479)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
0587: 51 1A    MOV   A,[0x1A]           (0480)     mov   A,[Port_2_Data_SHADE]
0589: 60 08    MOV   REG[0x8],A         (0481)     mov   reg[LCD_Port],A                        ; Reset control lines
                                        (0482) 
058B: 18       POP   A                  (0483)     pop   A
058C: 21 0F    AND   A,0xF              (0484)     and   A,LCD_DATA_MASK                        ; Make sure no bogus data in MSN
058E: 29 10    OR    A,0x10             (0485)     or    A,LCD_E                                ; Bring "E" Enable line high
0590: 2A 1A    OR    A,[0x1A]           (0486)     or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
0592: 60 08    MOV   REG[0x8],A         (0487)     mov   reg[LCD_Port], A                       ; Write data
0594: 53 1A    MOV   [0x1A],A           (0488)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0596: 40       NOP                      (0489)     nop
0597: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK)       ; Disable E signal and leave data on bus.
0599: 53 1A    MOV   [0x1A],A           (0491)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
059B: 60 08    MOV   REG[0x8],A         (0492)     mov   reg[LCD_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
059D: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
059E: 08       PUSH  A                  (0523)     push  A
                                        (0524)     RAM_SETPAGE_CUR >Port_2_Data_SHADE          ; Set CUR_PP to LCD variable address
059F: 26 1A 80 AND   [0x1A],0x80        (0525)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
05A2: 2E 1A 20 OR    [0x1A],0x20        (0526)     or    [Port_2_Data_SHADE],LCD_RS                  ; Raise RS to signify a Data Write
05A5: 51 1A    MOV   A,[0x1A]           (0527)     mov   A,[Port_2_Data_SHADE]
05A7: 60 08    MOV   REG[0x8],A         (0528)     mov   reg[LCD_Port],A
                                        (0529) 
05A9: 18       POP   A                  (0530)     pop   A
05AA: 21 0F    AND   A,0xF              (0531)     and   A,LCD_DATA_MASK                             ; Make sure no bogus data in A[7:4]
05AC: 29 30    OR    A,0x30             (0532)     or    A,(LCD_E | LCD_RS)                          ; Bring "E" Enable line high
05AE: 2A 1A    OR    A,[0x1A]           (0533)     or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
05B0: 60 08    MOV   REG[0x8],A         (0534)     mov   reg[LCD_Port], A                            ; Write data
05B2: 53 1A    MOV   [0x1A],A           (0535)     mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
05B4: 40       NOP                      (0536)     NOP
05B5: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK|LCD_RS)     ; Disable E signal and leave Data on bus
05B7: 53 1A    MOV   [0x1A],A           (0538)     mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
05B9: 60 08    MOV   REG[0x8],A         (0539)     mov   reg[LCD_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
05BB: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
05BC: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
                                        (0572)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                ; Set CUR_PP to LCD variable address
05BD: 26 1A 80 AND   [0x1A],0x80        (0573)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK          ; Mask of all LCD bits
05C0: 51 1A    MOV   A,[0x1A]           (0574)     mov   A,[Port_2_Data_SHADE]
05C2: 60 08    MOV   REG[0x8],A         (0575)     mov   reg[LCD_Port],A                             ; Zero LCD port bits
                                        (0576) 
05C4: 26 1B F0 AND   [0x1B],0xF0        (0577)     and   [Port_2_DriveMode_0_SHADE],~LCD_DATA_MASK   ; Clear out LCD mode bits.
05C7: 51 1B    MOV   A,[0x1B]           (0578)     mov   A,[Port_2_DriveMode_0_SHADE]
05C9: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
05CB: 60 08    MOV   REG[0x8],A         (0580)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for reading
05CD: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
05CF: 2E 1A 40 OR    [0x1A],0x40        (0583)     or    [Port_2_Data_SHADE],LCD_RW                  ; Raise RW to signify Read operation
05D2: 51 1A    MOV   A,[0x1A]           (0584)     mov   A,[Port_2_Data_SHADE]
05D4: 60 08    MOV   REG[0x8],A         (0585)     mov   reg[LCD_Port],A
05D6: 40       NOP                      (0586)     NOP
                                        (0587) 
05D7: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
05D8: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
05DA: 2E 1A 50 OR    [0x1A],0x50        (0592)     or    [Port_2_Data_SHADE], LCD_CNTL_READ                    ; Raise E to start cycle
05DD: 51 1A    MOV   A,[0x1A]           (0593)     mov   A,[Port_2_Data_SHADE]
05DF: 60 08    MOV   REG[0x8],A         (0594)     mov   reg[LCD_Port],A
                                        (0595) 
05E1: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
05E2: 40       NOP                      (0597)     nop
05E3: 5D 08    MOV   A,REG[0x8]         (0598)     mov   A,reg[LCD_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
05E5: 08       PUSH  A                  (0610)     push  A
05E6: 26 1A C0 AND   [0x1A],0xC0        (0611)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
05E9: 51 1A    MOV   A,[0x1A]           (0612)     mov   A,[Port_2_Data_SHADE]
05EB: 60 08    MOV   REG[0x8],A         (0613)     mov   reg[LCD_Port],A
                                        (0614) 
05ED: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
05EE: 40       NOP                      (0616)     nop                                    ; fastest PSoC
05EF: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
05F0: 2E 1A 50 OR    [0x1A],0x50        (0619)     or    [Port_2_Data_SHADE],LCD_CNTL_READ                     ; Raise E to start cycle
05F3: 51 1A    MOV   A,[0x1A]           (0620)     mov   A,[Port_2_Data_SHADE]
05F5: 60 08    MOV   REG[0x8],A         (0621)     mov   reg[LCD_Port],A
                                        (0622) 
05F7: 40       NOP                      (0623)     nop
05F8: 40       NOP                      (0624)     nop
                                        (0625) 
05F9: 26 1A C0 AND   [0x1A],0xC0        (0626)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
05FC: 51 1A    MOV   A,[0x1A]           (0627)     mov   A,[Port_2_Data_SHADE]
05FE: 60 08    MOV   REG[0x8],A         (0628)     mov   reg[LCD_Port],A
                                        (0629) 
0600: 18       POP   A                  (0630)     pop   A
0601: 21 08    AND   A,0x8              (0631)     and   A,LCD_READY_BIT                                       ; Check busy
                                        (0632) 
0603: A0 04    JZ    0x0608             (0633)     jz    .UNLOCK
0605: 79       DEC   X                  (0634)     dec   X
0606: BF D3    JNZ   0x05DA             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
0608: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
0609: 2E 1B 7F OR    [0x1B],0x7F        (0639)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE   ; Revert Data bit to Write mode
060C: 51 1B    MOV   A,[0x1B]           (0640)     mov   A,[Port_2_DriveMode_0_SHADE]
060E: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
0610: 60 08    MOV   REG[0x8],A         (0642)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for writing
0612: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
0614: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
0615: 7F       RET                      (0646)     ret
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_Start
                                        (0652) ;  FUNCTION NAME: LCD_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_Start:
                                        (0679) _LCD_Start:
                                        (0680)  LCD_Init:
                                        (0681) _LCD_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
                                        (0685)     and   [Port_2_DriveMode_0_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
                                        (0686)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE             ; Set LCD port for writing
                                        (0687)     and   [Port_2_DriveMode_1_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
                                        (0688) 
                                        (0689)     mov   A,[Port_2_DriveMode_0_SHADE]
                                        (0690)     M8C_SetBank1
                                        (0691)     mov   reg[LCD_PortMode0],A                                  ; Setup LCD Port for writing
                                        (0692)     mov   A,[Port_2_DriveMode_1_SHADE]
                                        (0693)     mov   reg[LCD_PortMode1],A
                                        (0694)     M8C_SetBank0
                                        (0695) 
                                        (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
                                        (0697)     call  LCD_Delay50uTimes
                                        (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
                                        (0699)     call  LCD_Delay50uTimes
                                        (0700) 
                                        (0701)     mov   A,03h
                                        (0702)     call  LCD_WCNTL_Nibble
                                        (0703) 
                                        (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
                                        (0705)     call  LCD_Delay50uTimes
                                        (0706) 
                                        (0707)     mov   A,03h
                                        (0708)     call  LCD_WCNTL_Nibble
                                        (0709) 
                                        (0710)     call  LCD_Delay50u
                                        (0711)     call  LCD_Delay50u
                                        (0712)     call  LCD_Delay50u
                                        (0713) 
                                        (0714)     mov   A,03h
                                        (0715)     call  LCD_WCNTL_Nibble
                                        (0716) 
                                        (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
                                        (0718)     call  LCD_Delay50uTimes
                                        (0719) 
                                        (0720)     mov   A,02h
                                        (0721)     call  LCD_WCNTL_Nibble
                                        (0722) 
                                        (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
                                        (0724)     call  LCD_Delay50uTimes
                                        (0725) 
                                        (0726)     mov   A,08h
                                        (0727)     call  LCD_Control
                                        (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
                                        (0729)     call  LCD_Delay50uTimes
                                        (0730) 
                                        (0731)     mov   A,01h
                                        (0732)     call  LCD_Control
                                        (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
                                        (0734)     call  LCD_Delay50uTimes
                                        (0735) 
                                        (0736)     mov   A,06h
                                        (0737)     call  LCD_Control
                                        (0738) 
                                        (0739)     mov   A,0Eh
                                        (0740)     call  LCD_Control
                                        (0741) 
                                        (0742)     mov   A,LCD_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
                                        (0743)     call  LCD_Control
                                        (0744) 
                                        (0745)     mov   A,LCD_DISP_OFF
                                        (0746)     call  LCD_Control
                                        (0747) 
                                        (0748)     mov   A,LCD_DISP_ON
                                        (0749)     call  LCD_Control
                                        (0750) 
                                        (0751)     mov   A,LCD_DISP_INC
                                        (0752)     call  LCD_Control
                                        (0753) 
                                        (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
                                        (0755)     call  LCD_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_ROW_OFFSET::
                                        (0783)      DB    LCD_ROW1_OFFSET, LCD_ROW2_OFFSET, LCD_ROW3_OFFSET, LCD_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_Position:
                                        (0788) _LCD_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
061A: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
061C: 10       PUSH  X                  (0791)     push  X                            ; Store COL
061D: FF F7    INDEX LCD_ROW_OFFSET|LCD_Init|_LCD_Init|_LCD_Start(0792)     index LCD_ROW_OFFSET ; Get ROW memory offset from table
061F: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
0620: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
0622: 20       POP   X                  (0795)     pop   X
                                        (0796) 
0623: 9F 4A    CALL  _LCD_Control       (0797)     call  LCD_Control                  ; Write control byte
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
0625: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_Delay50uTimes:
                                        (0825) _LCD_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
0626: 90 0C    CALL  _LCD_Delay50u      (0827)     call  LCD_Delay50u
0628: 78       DEC   A                  (0828)     dec   A
0629: BF FC    JNZ   _LCD_Delay50uTimes (0829)     jnz   LCD_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
062B: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_Delay50u:
                                        (0869)  _LCD_Delay50u:                        ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
0634: 08       PUSH  A                  (0871)     push  A
0635: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
0637: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
0639: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
063B: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
063D: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
063F: D0 06    JNC   0x0646             (0877)     jnc   .Delay50u_End
0641: FF E9    INDEX LCD_Delay50u_Table (0878)     index LCD_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
0643: 78       DEC   A                  (0880)     dec   A                              ; [4]
0644: BF FE    JNZ   0x0643             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
0646: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
0647: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_DrawBG:
                                        (0943)     push  X
                                        (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
                                        (0945)     call  LCD_Position                 ; Set cursor position
                                        (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
                                        (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
                                        (0950)     jnz   .LCD_CHECK1X
                                        (0951)     mov   A,00h                         ; Load empty character
                                        (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
                                        (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
                                        (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
                                        (0957)     mov   A,[X+BG_LENGTHX]
                                        (0958)     sub   [X+BG_LENGTHX],A
                                        (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
                                        (0962)     mov   A, 06h
                                        (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
                                        (0966)     call  LCD_WriteData                ; Display BG character
                                        (0967) 
                                        (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
                                        (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
                                        (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1015)     mov   X, SP
                                        (1016)     push  X
                                        (1017)     mov   A,[X+BG_ROW]                 ; Row in A
                                        (1018)     mov   X,[X+BG_COL]                 ; Col in X
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1020)     call  LCD_Position                 ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
                                        (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
                                        (1026)     jnz   .LCD_CHECK1
                                        (1027)     mov   A,00h                        ; Load empty character
                                        (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
                                        (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
                                        (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
                                        (1033)     mov   A,[X+BG_LENGTH]
                                        (1034)     sub   [X+BG_LENGTH],A
                                        (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
                                        (1038)     mov   A, 06h
                                        (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
                                        (1042)     call  LCD_WriteData                ; Display BG character
                                        (1043) 
                                        (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
                                        (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_DrawVBG:
                                        (1095) 
                                        (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
                                        (1098)     push  A
                                        (1099)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
                                        (1101)     call  LCD_Control                  ; Position Cursor
                                        (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
                                        (1103)     jnz   .VBG_NZ_SEGX
                                        (1104)     mov   A,' '                        ; Load space character
                                        (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
                                        (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
                                        (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
                                        (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
                                        (1111)     dec   A
                                        (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
                                        (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
                                        (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
                                        (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
                                        (1120)     call  LCD_WriteData                ; Write value
                                        (1121)     pop   A
                                        (1122)     dec   A
                                        (1123)     dec   [X+VBG_CHAR_HEIGHTX]
                                        (1124)     jnz   .VBG_LOOPX
                                        (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1168)     mov   X, SP
                                        (1169)     mov   A, [X+VBG_ROW]
                                        (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
                                        (1172)     push  A
                                        (1173)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
                                        (1175)     call  LCD_Control                  ; Position Cursor
                                        (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
                                        (1177)     jnz   .VBG_NZ_SEG
                                        (1178)     mov   A,' '                        ; Load space character
                                        (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
                                        (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
                                        (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
                                        (1184)     mov   A,[X+VBG_SEG_HEIGHT]
                                        (1185)     dec   A
                                        (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
                                        (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
                                        (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
                                        (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
                                        (1194)     call  LCD_WriteData                ; Write value
                                        (1195)     pop   A
                                        (1196)     dec   A
                                        (1197)     dec   [X+VBG_CHAR_HEIGHT]
                                        (1198)     jnz   .VBG_LOOP
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_InitVBG:
                                        (1236) _LCD_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1238)     mov   X,SP                         ; Get location of stack
                                        (1239)     push  A                            ; Create 2 locations
                                        (1240)     push  A
                                        (1241) 
                                        (1242)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
                                        (1243)     call  LCD_Control                  ; Position the CG pointer
                                        (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
                                        (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
                                        (1249)     mov   A,[X+VBGDATA_CTR]
                                        (1250)     cmp   A,[X+VBG_BYTES]
                                        (1251)     jnc   .VBG_SOLID
                                        (1252)     mov   A,00h                        ; Empty line
                                        (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
                                        (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
                                        (1257)     call  LCD_WriteData                ; character data
                                        (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
                                        (1259)     jnz   .VBG_Loop2                    ; End Loop 2
                                        (1260)     inc   [X+VBGDATA_CTR]
                                        (1261)     cmp   [X+VBGDATA_CTR],09h
                                        (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
                                        (1264)     pop  A
                                        (1265)     pop  A
                                        (1266)     mov  A,LCD_DISP_ON                    ; Turn on display, don't really
                                        (1267)     call LCD_Control                   ; need this.
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_InitBG:
                                        (1317) _LCD_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1319)     mov   X,SP                         ; Get location of stack
                                        (1320)     add   SP,3
                                        (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
                                        (1323)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
                                        (1324)     call  LCD_Control                  ; Position the CG pointer
                                        (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
                                        (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
                                        (1330)     mov   A,[X+BGDATA_PTR]
                                        (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
                                        (1332)     jnz   .BG_OTHER
                                        (1333)     index LCD_BG_TYPE1
                                        (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
                                        (1336)     index LCD_BG_TYPE2
                                        (1337)  .BG_Load:
                                        (1338)     call  LCD_WriteData
                                        (1339)     dec   [X+BGCHARS]                  ; Character builder counter
                                        (1340)     jnz   .BG_Loop2
                                        (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
                                        (1342)     cmp   [X+BGDATA_PTR],07h
                                        (1343)     jnz   .BG_Loop1
                                        (1344) 
                                        (1345)     add   SP,-3
                                        (1346)     mov   A,LCD_DISP_ON
                                        (1347)     call  LCD_Control
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD.asm
FILE: lib\insamp.asm                    (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   INSAMP.asm
                                        (0004) ;;  Version: 2.2, Updated on 2015/3/4 at 22:26:35
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:
                                        (0008) ;;    Assembler source code for a two-OpAmp Instrumentation Amplifier
                                        (0009) ;;    topology in the 25/26xxx family of PSoC devices
                                        (0010) ;;
                                        (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0013) ;;        This means it is the caller's responsibility to preserve any values
                                        (0014) ;;        in the X and A registers that are still needed after the API functions
                                        (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0019) ;;-----------------------------------------------------------------------------
                                        (0020) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0021) ;;*****************************************************************************
                                        (0022) ;;*****************************************************************************
                                        (0023) 
                                        (0024) include "m8c.inc"
                                        (0025) include "memory.inc"
                                        (0026) include "INSAMP.inc"
                                        (0027) 
                                        (0028) ;-----------------------------------------------
                                        (0029) ;  Global Symbols
                                        (0030) ;-----------------------------------------------
                                        (0031) 
                                        (0032) export  INSAMP_Start
                                        (0033) export _INSAMP_Start
                                        (0034) export  INSAMP_SetPower
                                        (0035) export _INSAMP_SetPower
                                        (0036) 
                                        (0037) export  INSAMP_SetGain
                                        (0038) export _INSAMP_SetGain
                                        (0039) 
                                        (0040) export  INSAMP_Stop
                                        (0041) export _INSAMP_Stop
                                        (0042) 
                                        (0043) 
                                        (0044) AREA bss (RAM,REL)
                                        (0045) 
                                        (0046) ;-----------------------------------------------
                                        (0047) ;  Constant Definitions
                                        (0048) ;-----------------------------------------------
                                        (0049) 
                                        (0050) POWERMASK:                     equ 0x03    ; Power field mask for CR2
                                        (0051) GAINMASK:                      equ F0h     ; Gain field mask for CR0
                                        (0052) 
                                        (0053) 
                                        (0054) ;-----------------------------------------------
                                        (0055) ; Variable Allocation
                                        (0056) ;-----------------------------------------------
                                        (0057) 
                                        (0058) 
                                        (0059) AREA UserModules (ROM, REL)
                                        (0060) 
                                        (0061) .SECTION
                                        (0062) ;-----------------------------------------------------------------------------
                                        (0063) ;  FUNCTION NAME: INSAMP_Start
                                        (0064) ;  FUNCTION NAME: INSAMP_Setpower
                                        (0065) ;
                                        (0066) ;  DESCRIPTION:
                                        (0067) ;    Sets power to the analog blocks used in this module. All three blocks
                                        (0068) ;    are set to the same power setting (which should be the same as the
                                        (0069) ;    analog reference power global parameter for best operation!). Constants
                                        (0070) ;    for proper values are defined in asm and C interface files.
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;
                                        (0073) ;  ARGUMENTS:    fastcall16 BYTE bPowerSetting in the A register
                                        (0074) ;  RETURNS:      Nothing
                                        (0075) ;  SIDE EFFECTS: 
                                        (0076) ;    The A and X registers may be modified by this or future implementations
                                        (0077) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0078) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0079) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0080) ;    functions.
                                        (0081) ;
                                        (0082)  INSAMP_Start:
                                        (0083) _INSAMP_Start:
                                        (0084)  INSAMP_SetPower:
                                        (0085) _INSAMP_SetPower:
                                        (0086)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0087) 
0656: 21 03    AND   A,0x3              (0088)     and  A, POWERMASK                         ; mask A to protect unchanged bits
0658: 4F       MOV   X,SP               (0089)     mov  X, SP                                ; define temp store location
                                        (0090) 
0659: 08       PUSH  A                  (0091)     push A                                    ; put power value in temp store
065A: 5D 73    MOV   A,REG[0x73]        (0092)     mov  A, reg[INSAMP_INV_CR2]     ; read power value
065C: 21 FC    AND   A,0xFC             (0093)     and  A, ~POWERMASK                        ; clear power bits in A
065E: 2B 00    OR    A,[X+0]            (0094)     or   A, [X]                               ; combine power value with balance of reg.
0660: 60 73    MOV   REG[0x73],A        (0095)     mov  reg[INSAMP_INV_CR2], A
                                        (0096) 
0662: 5D 77    MOV   A,REG[0x77]        (0097)     mov  A, reg[INSAMP_NON_INV_CR2] ; read power value
0664: 21 FC    AND   A,0xFC             (0098)     and  A, ~POWERMASK                        ; clear power bits in A
0666: 2B 00    OR    A,[X+0]            (0099)     or   A, [X]                               ; combine power value with balance of reg.
0668: 60 77    MOV   REG[0x77],A        (0100)     mov  reg[INSAMP_NON_INV_CR2], A
066A: 18       POP   A                  (0101)     pop  A
                                        (0102)     RAM_EPILOGUE RAM_USE_CLASS_2
066B: 7F       RET                      (0103)     ret
                                        (0104) 
                                        (0105) .ENDSECTION
                                        (0106) 
                                        (0107) .SECTION
                                        (0108) ;-----------------------------------------------------------------------------
                                        (0109) ;  FUNCTION NAME: INSAMP_SetGain
                                        (0110) ;
                                        (0111) ;  DESCRIPTION:
                                        (0112) ;    Applies gain set values to the module's PSoC blocks
                                        (0113) ;
                                        (0114) ;-----------------------------------------------------------------------------
                                        (0115) ;
                                        (0116) ;  ARGUMENTS:    fastcall16 BYTE bGain in the A register
                                        (0117) ;  RETURNS:      Nothing
                                        (0118) ;  SIDE EFFECTS: 
                                        (0119) ;    The A and X registers may be modified by this or future implementations
                                        (0120) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0121) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0122) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0123) ;    functions.
                                        (0124) ;
                                        (0125) ;  THEORY of OPERATION or PROCEDURE:
                                        (0126) ;    The A register contains the gain setting per values in .inc file.
                                        (0127) ;    Values in range of 00h to 07h, upper 4 bits only.
                                        (0128) ;    Gain value applied to NON_INV block.
                                        (0129) ;    Difference (E0h-gain value) applied to _INV block.
                                        (0130) ;
                                        (0131)  INSAMP_SetGain:
                                        (0132) _INSAMP_SetGain:
                                        (0133)     RAM_PROLOGUE RAM_USE_CLASS_2 
                                        (0134)     and  A, GAINMASK                          ; mask A to protect unchanged bits
                                        (0135)     mov  X, SP                                ; set base address for local variable
                                        (0136) 
                                        (0137)     push A
                                        (0138)     mov  A, reg[INSAMP_NON_INV_CR0] ; read gain value
                                        (0139)     and  A, ~GAINMASK                         ; clear gain bits in A
                                        (0140)     or   A, [X]                               ; combine gain value with balance of reg.
                                        (0141)     mov  reg[INSAMP_NON_INV_CR0], A
                                        (0142) 
                                        (0143)     mov  A, E0h                               ; load gain complement value
                                        (0144)     sub  a, [X]                               ; calculate gain value for -INV block
                                        (0145)     push A
                                        (0146)     mov  A, reg[INSAMP_INV_CR0]     ; read gain complement value
                                        (0147)     and  A, ~GAINMASK                         ; clear gain bits in A
                                        (0148)     or   A, [X+1]                             ; combine gain value with balance of reg.
                                        (0149)     mov  reg[INSAMP_INV_CR0], A
                                        (0150)     pop  A
                                        (0151)     pop  A
                                        (0152)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0153)     ret
                                        (0154) 
                                        (0155) 
                                        (0156) .ENDSECTION
                                        (0157) 
                                        (0158) .SECTION
                                        (0159) ;-----------------------------------------------------------------------------
                                        (0160) ;  FUNCTION NAME: INSAMP_Stop
                                        (0161) ;
                                        (0162) ;  DESCRIPTION: Turns off power to the two CT blocks
                                        (0163) ;-----------------------------------------------------------------------------
                                        (0164) ;
                                        (0165) ;  ARGUMENTS:    None
                                        (0166) ;  RETURNS:      Nothing
                                        (0167) ;  SIDE EFFECTS: 
                                        (0168) ;    The A and X registers may be modified by this or future implementations
                                        (0169) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0170) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0171) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0172) ;    functions.
                                        (0173) ;
                                        (0174)  INSAMP_Stop:
                                        (0175) _INSAMP_Stop:
                                        (0176)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0177)     and  reg[INSAMP_NON_INV_CR2], ~POWERMASK
                                        (0178)     and  reg[INSAMP_INV_CR2], ~POWERMASK
                                        (0179)     RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0180)     ret
                                        (0181) 
                                        (0182) .ENDSECTION
                                        (0183) 
                                        (0184) ; End of File INSAMP.asm
FILE: lib\dac9_ia.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: DAC9_Ia.asm
                                        (0004) ;;   Version: 2.2, Updated on 2015/3/4 at 22:25:15
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: DAC9 User Module software inplementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "DAC9_Ia.inc"
                                        (0023) include "m8c.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  DAC9_Ia_Start
                                        (0030) export _DAC9_Ia_Start
                                        (0031) export  DAC9_Ia_SetPower
                                        (0032) export _DAC9_Ia_SetPower
                                        (0033) 
                                        (0034) export  DAC9_Ia_WriteBlind
                                        (0035) export _DAC9_Ia_WriteBlind
                                        (0036) export  DAC9_Ia_WriteBlind2B
                                        (0037) export _DAC9_Ia_WriteBlind2B
                                        (0038) 
                                        (0039) export  DAC9_Ia_WriteStall
                                        (0040) export _DAC9_Ia_WriteStall
                                        (0041) export  DAC9_Ia_WriteStall2B
                                        (0042) export _DAC9_Ia_WriteStall2B
                                        (0043) 
                                        (0044) export  DAC9_Ia_Stop
                                        (0045) export _DAC9_Ia_Stop
                                        (0046) 
                                        (0047) ;; -----------------------------------------------------------------
                                        (0048) ;;                         Register Definitions
                                        (0049) ;; -----------------------------------------------------------------
                                        (0050) ;;
                                        (0051) ;; Uses 2 Switched Cap Blocks, LSB and MSB, configured as shown below.
                                        (0052) ;; This API depends on knowing the exact personalization of CR0
                                        (0053) ;; and CR3 bitfields for time efficiency.
                                        (0054) ;;
                                        (0055) ;; * For a Mask/Val pair this simply indicates that the value is
                                        (0056) ;;   determined by the user either through config-time parameteriza-
                                        (0057) ;;   tion or run-time manipulation.
                                        (0058) ;;
                                        (0059) ;; Setting for output=AGND to OBUS when LSB in ASA10 and MSB in ASB20:
                                        (0060) ;;     LSB.CR0=80  MSB.CR0=80
                                        (0061) ;;     LSB.CR1=40  MSB.CR1=81
                                        (0062) ;;     LSB.CR2=20  MSB.CR2=A0
                                        (0063) ;;     LSB.CR3=33  MSB.CR3=3B
                                        (0064) ;;
                                        (0065) ;;  BIT FIELD            Mask/Val Function
                                        (0066) ;;  -----------------    -------- --------------------
                                        (0067) ;;  LSB.CR0.FCap         80/1  Feedback cap size 32
                                        (0068) ;;  LSB.CR0.ClockPhase   40/0  Normal phase
                                        (0069) ;;  LSB.CR0.ASign        20/*  User parameter
                                        (0070) ;;  LSB.CR0.ACap         1F/*  User parameter
                                        (0071) ;;
                                        (0072) ;;  LSB.CR1.ACMux        E0/2  (SCA) A:VRef High, C:Don't Care
                                        (0073) ;;  LSB.CR1.BCap         1F/0  Prune B-input branch
                                        (0074) ;;
                                        (0075) ;;  LSB.CR2.AnalogBus    80/*  User Parameter: Output Bus Enable
                                        (0076) ;;  LSB.CR2.CmpBus       40/0  Comparator Bus Disabled
                                        (0077) ;;  LSB.CR2.AutoZero     20/1  Auto-Zero enabled on internal Phi 1
                                        (0078) ;;  LSB.CR2.CCap         1F/0  Prune C-input branch
                                        (0079) ;;
                                        (0080) ;;  LSB.CR3.ARefSelect   C0/0  Use AGND (to invert)
                                        (0081) ;;  LSB.CR3.FSW1         20/1  Feedback Cap Used
                                        (0082) ;;  LSB.CR3.FSW0         10/1  Feedback Cap Grounded for AZ
                                        (0083) ;;  LSB.CR3.BMux         0C/0  (SCA) Don't Care - this branch pruned
                                        (0084) ;;  LSB.CR3.PWR          03/*  User Parameter: Power; default=OFF
                                        (0085) ;;
                                        (0086) ;;  MSB.CR0.FCap         80/1  Feedback cap size 32
                                        (0087) ;;  MSB.CR0.ClockPhase   40/0  Normal phase
                                        (0088) ;;  MSB.CR0.ASign        20/*  User parameter
                                        (0089) ;;  MSB.CR0.ACap         1F/*  User parameter
                                        (0090) ;;
                                        (0091) ;;  MSB.CR1.AMux         E0/4  (SCB) VRef High
                                        (0092) ;;  MSB.CR1.BCap         1F/1  Subrange LSB block output by BCap/FCap (1/32)
                                        (0093) ;;
                                        (0094) ;;  MSB.CR2.AnalogBus    80/*  User Parameter: Output Bus Enable
                                        (0095) ;;  MSB.CR2.CmpBus       40/0  Comparator Bus Disable
                                        (0096) ;;  MSB.CR2.AutoZero     20/1  Auto-Zero enabled on internal Phi 1
                                        (0097) ;;  MSB.CR2.CCap         1F/0  Prune C-input branch
                                        (0098) ;;
                                        (0099) ;;  MSB.CR3.ARefSelect   C0/0  Use AGND (to invert)
                                        (0100) ;;  MSB.CR3.FSW1         20/1  Feedback Cap Used
                                        (0101) ;;  MSB.CR3.FSW2         10/1  Feedback Cap Grounded for AZ
                                        (0102) ;;  MSB.CR3.BSW          08/0  (SCB)    why is this cont time instead of phi2??
                                        (0103) ;;  MSB.CR3.BMux         04/?  (SCB) LSB block output; determined by placement
                                        (0104) ;;  MSB.CR3.PWR          03/*  User Parameter: Power, default=OFF
                                        (0105) 
                                        (0106) ;-----------------------------------------------
                                        (0107) ;  Constant Definitions
                                        (0108) ;-----------------------------------------------
                                        (0109) iOFFSET:   equ 255              ; Conversion term for offset binary to 2's C
                                        (0110) bPWRMASK:  equ 03h              ; Power bitfield in Switched Cap CR3 reg
                                        (0111) bCR3:      equ 30h              ; Except for power bits, CR3 always looks like
                                        (0112)                                 ; this regardless of SC block type or location.
                                        (0113) bSMMASK:   equ 3Fh              ; Sign and Magnitude bits mask
                                        (0114) bSIGNMASK: equ 20h              ; Sign bit mask
                                        (0115) bMAGMASK:  equ 1Fh              ; Magnitude bits mask
                                        (0116) bHIGHBITS: equ 80h              ; Setting for FCap and ClockPhase
                                        (0117) bHBMASK:   equ C0h              ; Mask for FCap and ClockPhase
                                        (0118) 
                                        (0119) 
                                        (0120) ;;---------------------------
                                        (0121)         macro Stall
                                        (0122) ;;---------------------------
                                        (0123)         mov reg[ASY_CR], 1
                                        (0124)         endm
                                        (0125) 
                                        (0126) ;;---------------------------
                                        (0127)         macro UnStall
                                        (0128) ;;---------------------------
                                        (0129)         mov reg[ASY_CR], 0
                                        (0130)         endm
                                        (0131) 
                                        (0132)   AREA UserModules (ROM, REL)
                                        (0133) 
                                        (0134) .SECTION
                                        (0135) ;-----------------------------------------------------------------------------
                                        (0136) ;  FUNCTION NAME: DAC9_Ia_Start
                                        (0137) ;  FUNCTION NAME: DAC9_Ia_SetPower
                                        (0138) ;
                                        (0139) ;  DESCRIPTION:
                                        (0140) ;    Applies power setting to the module's analog PSoC blocks.
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) ;  ARGUMENTS:
                                        (0145) ;    A contains the power setting 0=Off, 1=Low, 2=Med, 3=Full.
                                        (0146) ;
                                        (0147) ;  RETURNS:  none
                                        (0148) ;
                                        (0149) ;  SIDE EFFECTS:
                                        (0150) ;    The A and X registers may be modified by this or future implementations
                                        (0151) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0152) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0153) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0154) ;    functions.
                                        (0155) ;
                                        (0156)  DAC9_Ia_Start:
                                        (0157) _DAC9_Ia_Start:
                                        (0158)  DAC9_Ia_SetPower:
                                        (0159) _DAC9_Ia_SetPower:
                                        (0160)     RAM_PROLOGUE RAM_USE_CLASS_2 
066C: 21 03    AND   A,0x3              (0161)     and   A, bPWRMASK       ; trim input to bits of interest
066E: 4F       MOV   X,SP               (0162)     mov   X, SP             ; Set stack frame pointer
066F: 08       PUSH  A                  (0163)     push  A
                                        (0164)     ;; read CR3 registers, modify power bits & write back
0670: 5D 97    MOV   A,REG[0x97]        (0165)     mov   A, reg[DAC9_Ia_MSB_CR3]
0672: 21 FC    AND   A,0xFC             (0166)     and   a, ~bPWRMASK      ; clear old setting
0674: 2B 00    OR    A,[X+0]            (0167)     or    A, [X]            ; set power in MSB register image
0676: 60 97    MOV   REG[0x97],A        (0168)     mov   reg[DAC9_Ia_MSB_CR3], A
0678: 5D 93    MOV   A,REG[0x93]        (0169)     mov   A, reg[DAC9_Ia_LSB_CR3]
067A: 21 FC    AND   A,0xFC             (0170)     and   a, ~bPWRMASK      ; clear old setting
067C: 2B 00    OR    A,[X+0]            (0171)     or    A, [X]            ; set power in LSB register image
067E: 60 93    MOV   REG[0x93],A        (0172)     mov   reg[DAC9_Ia_LSB_CR3], A
0680: 18       POP   A                  (0173)     pop   A
                                        (0174)     RAM_EPILOGUE RAM_USE_CLASS_2 
0681: 7F       RET                      (0175)     ret
                                        (0176) .ENDSECTION
                                        (0177) 
                                        (0178) .SECTION
                                        (0179) ;-----------------------------------------------------------------------------
                                        (0180) ;  FUNCTION NAME: DAC9_Ia_WriteBlind
                                        (0181) ;  FUNCTION NAME: DAC9_Ia_WriteBlind2B
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Modify the DAC's update value without worrying about the clocks.
                                        (0185) ;    Lowest overhead, but may cause glitches on the output.
                                        (0186) ;
                                        (0187) ;-----------------------------------------------------------------------------
                                        (0188) ;
                                        (0189) ;  ARGUMENTS:
                                        (0190) ;     A contains the update value if data format is offset binary or
                                        (0191) ;     For offset binary format: A contains the low byte; X the high byte.
                                        (0192) ;     For twos complement format: A contains the low byte; X the high byte.
                                        (0193) ;     For two-byte sign-and-magnitude format:
                                        (0194) ;      A contains the LSB as 00smmmmm; X contains the MSB as 00tmmm00,
                                        (0195) ;      where t=s\ (the inverted sign).
                                        (0196) ;
                                        (0197) ;  RETURNS:
                                        (0198) ;
                                        (0199) ;  SIDE EFFECTS:
                                        (0200) ;    The A and X registers may be modified by this or future implementations
                                        (0201) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0202) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0203) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0204) ;    functions.
                                        (0205) ;
                                        (0206)  DAC9_Ia_WriteBlind:
                                        (0207) _DAC9_Ia_WriteBlind:
                                        (0208) 
                                        (0209)   RAM_PROLOGUE RAM_USE_CLASS_2 
                                        (0210)   IF DAC9_Ia_OFFSETBINARY
                                        (0211)     ;; Data is an unsigned byte value in [0..510] (511 unique values).
                                        (0212)     ;; Following converts it to 2's complement:
                                        (0213)     sub   A, iOFFSET
                                        (0214)     swap  A, X                  ;  A <- upper, X <- lower
                                        (0215)     sbb   A, 0
                                        (0216)     swap  A, X                  ;  A <- lower, X <- upper
                                        (0217)   ENDIF
                                        (0218) 
                                        (0219)   IF DAC9_Ia_OFFSETBINARY | DAC9_Ia_TWOSCOMPLEMENT
                                        (0220)     swap  A, X                  ;  A <- upper, X <- lower
                                        (0221)     push A                      ; Save Sign on stack - referenced using [X-N]
                                        (0222)                                 ; Sign is either FFh or 00h
                                        (0223)     dec  A                      ; set or clear Carry Flag
                                        (0224)                                 ; A is now FEh(CF=0) or FFh(CF=1)
                                        (0225)     mov  A,X                    ; MSB: 76543210
                                        (0226)     jc   BlindAdjustCycles
                                        (0227)     cpl  A                      ; change negative magnitude to positive
                                        (0228)         inc  A                      ; offset for twos complement
                                        (0229)         jmp  BlindMagSet
                                        (0230) BlindAdjustCycles:
                                        (0231)         cpl  A                                          ; make cycles used for positive same as
                                        (0232)         cpl  A                      ; cycles used for negative
                                        (0233)         jmp  BlindMagSet
                                        (0234) BlindMagSet:
                                        (0235)     push A                      ; MSB: 76543210 (mag)
                                        (0236)     asr  A                      ; MSB: 77654321
                                        (0237)     asr  A                      ; MSB: 77765432
                                        (0238)     asr  A                      ; MSB: 77776543
                                        (0239)     and  A,bMAGMASK             ; MSB: 00076543
                                        (0240)     mov  X,SP
                                        (0241)     and  [X-2],bSIGNMASK
                                        (0242)     or   A,[X-2]                ; MSB: 00s76543
                                        (0243)     mov  X,A                    ; MSB
                                        (0244)     pop  A                      ; LSB: 76543210 (mag)
                                        (0245)     push X                      ; MSB
                                        (0246)     asl  A                      ; LSB: 65432100
                                        (0247)     asl  A                      ; LSB: 54321000
                                        (0248)     and  A,bMAGMASK             ; LSB: 00021000
                                        (0249)     mov  X,SP
                                        (0250)     or   A,[X-2]                ; LSB: 00s21000
                                        (0251)     xor  A,bSIGNMASK            ; LSB: 00t21000
                                        (0252)                                 ; LSB in A
                                        (0253)     pop  X                      ; MSB in X
                                        (0254)     add  SP, -1                 ; clean up stack - from saving the sign
                                        (0255) 
                                        (0256)   ENDIF
                                        (0257) 
                                        (0258)  DAC9_Ia_WriteBlind2B:
                                        (0259) _DAC9_Ia_WriteBlind2B:
                                        (0260) ; IF DAC9_Ia_SIGNANDMAGNITUDE
                                        (0261)     or   A,bHIGHBITS            ; LSB: 10t21000
                                        (0262)     swap A,X                    ; LSB in X, MSB in A
                                        (0263)     or   A,bHIGHBITS            ; MSB: 10s76543
                                        (0264)     mov  reg[DAC9_Ia_MSB_CR0],A
                                        (0265)     mov  A,X                    ; LSB in A
                                        (0266)     mov  reg[DAC9_Ia_LSB_CR0],A
                                        (0267) ; ENDIF
                                        (0268) 
                                        (0269)   RAM_EPILOGUE RAM_USE_CLASS_2 
                                        (0270)   ret
                                        (0271) .ENDSECTION
                                        (0272) 
                                        (0273) .SECTION
                                        (0274) ;-----------------------------------------------------------------------------
                                        (0275) ;  FUNCTION NAME: DAC9_Ia_WriteStall
                                        (0276) ;  FUNCTION NAME: DAC9_Ia_WriteStall2B
                                        (0277) ;
                                        (0278) ;  DESCRIPTION:
                                        (0279) ;    Modify the DAC's update value, stalling the CPU if necessary.
                                        (0280) ;    This routine should be used with faster analog clocks or when the
                                        (0281) ;    effect of prolonging interrupt latencies can be safely tolerated.
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;    A contains the update value if data format is offset binary or
                                        (0287) ;    For offset binary format: A contains the low byte; X the high byte.
                                        (0288) ;    For twos complement format: A contains the low byte; X the high byte.
                                        (0289) ;    For two-byte sign-and-magnitude format:
                                        (0290) ;     A contains the LSB as 00smmmmm; X contains the MSB as 00tmmm00,
                                        (0291) ;     where t=s\ (the inverted sign).
                                        (0292) ;
                                        (0293) ;  RETURNS: none
                                        (0294) ;
                                        (0295) ;  SIDE EFFECTS:
                                        (0296) ;    The A and X registers may be modified by this or future implementations
                                        (0297) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0298) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0299) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0300) ;    functions.
                                        (0301) ;
                                        (0302)  DAC9_Ia_WriteStall:
                                        (0303) _DAC9_Ia_WriteStall:
                                        (0304) 
                                        (0305)   RAM_PROLOGUE RAM_USE_CLASS_2 
                                        (0306)   IF DAC9_Ia_OFFSETBINARY
                                        (0307)     ;; Data is an unsigned byte value in [0..510] (511 unique values).
                                        (0308)     ;; Following converts it to 2's complement:
0682: 11 FF    SUB   A,0xFF             (0309)     sub   A, iOFFSET
0684: 4B       SWAP  A,X                (0310)     swap  A, X                  ;  A <- upper, X <- lower
0685: 19 00    SBB   A,0x0              (0311)     sbb   A, 0
0687: 4B       SWAP  A,X                (0312)     swap  A, X                  ;  A <- lower, X <- upper
                                        (0313)   ENDIF
                                        (0314) 
                                        (0315)   IF DAC9_Ia_OFFSETBINARY | DAC9_Ia_TWOSCOMPLEMENT
0688: 4B       SWAP  A,X                (0316)     swap  A, X                  ;  A <- upper, X <- lower
0689: 08       PUSH  A                  (0317)     push A                      ; Save Sign on stack - referenced via [X-N]
                                        (0318)                                 ; Sign is either FFh or 00h
068A: 78       DEC   A                  (0319)     dec  A                      ; set or clear Carry Flag
                                        (0320)                                 ; A is now FEh(CF=0) or FFh(CF=1)
068B: 5B       MOV   A,X                (0321)     mov  A,X                    ; MSB: 76543210
068C: C0 05    JC    0x0692             (0322)     jc   StallAdjustCycles
068E: 73       CPL   A                  (0323)     cpl  A                      ; change negative magnitude to positive
068F: 74       INC   A                  (0324)         inc  A                      ; offset for twos complement
0690: 80 05    JMP   0x0696             (0325)         jmp  StallMagSet
                                        (0326) StallAdjustCycles:
0692: 73       CPL   A                  (0327)         cpl  A                                          ; make cycles used for positive same as
0693: 73       CPL   A                  (0328)         cpl  A                      ; cycles used for negative
0694: 80 01    JMP   0x0696             (0329)         jmp  StallMagSet
                                        (0330) StallMagSet:
0696: 08       PUSH  A                  (0331)         push A                      ; MSB: 76543210 (mag)
0697: 67       ASR   A                  (0332)     asr  A                      ; MSB: 77654321
0698: 67       ASR   A                  (0333)     asr  A                      ; MSB: 77765432
0699: 67       ASR   A                  (0334)     asr  A                      ; MSB: 77776543
069A: 21 1F    AND   A,0x1F             (0335)     and  A,bMAGMASK             ; MSB: 00076543
069C: 4F       MOV   X,SP               (0336)     mov  X,SP
069D: 27 FE 20 AND   [X-2],0x20         (0337)     and  [X-2],bSIGNMASK
06A0: 2B FE    OR    A,[X-2]            (0338)     or   A,[X-2]                ; MSB: 00s76543
06A2: 5C       MOV   X,A                (0339)     mov  X,A                    ; MSB
                                        (0340) 
06A3: 18       POP   A                  (0341)     pop  A                      ; LSB: 76543210 (mag)
06A4: 10       PUSH  X                  (0342)     push X                      ; MSB
                                        (0343) 
06A5: 64       ASL   A                  (0344)     asl  A                      ; LSB: 65432100
06A6: 64       ASL   A                  (0345)     asl  A                      ; LSB: 54321000
06A7: 21 1F    AND   A,0x1F             (0346)     and  A,bMAGMASK             ; LSB: 00021000
06A9: 4F       MOV   X,SP               (0347)     mov  X,SP
06AA: 2B FE    OR    A,[X-2]            (0348)     or   A,[X-2]                ; LSB: 00s21000
06AC: 31 20    XOR   A,0x20             (0349)     xor  A,bSIGNMASK            ; LSB: 00t21000
                                        (0350)                                 ; LSB in A
06AE: 20       POP   X                  (0351)     pop  X                      ; MSB in X
06AF: 38 FF    ADD   SP,0xFF            (0352)     add  SP, -1                 ; clean up stack - from saving the sign
                                        (0353)   ENDIF
                                        (0354) 
                                        (0355)  DAC9_Ia_WriteStall2B:
                                        (0356) _DAC9_Ia_WriteStall2B:
                                        (0357) ; IF DAC9_Ia_SIGNANDMAGNITUDE
06B1: 29 80    OR    A,0x80             (0358)     or   A,bHIGHBITS            ; LSB: 10t21000
06B3: 4B       SWAP  A,X                (0359)     swap A,X                    ; LSB in X, MSB in A
06B4: 29 80    OR    A,0x80             (0360)     or   A,bHIGHBITS            ; MSB: 10s76543
06B6: 43 65 01 OR    REG[0x65],0x1      
                                        (0361)     M8C_Stall
06B9: 60 94    MOV   REG[0x94],A        (0362)     mov  reg[DAC9_Ia_MSB_CR0],A
06BB: 41 65 FE AND   REG[0x65],0xFE     
                                        (0363)     M8C_Unstall
06BE: 5B       MOV   A,X                (0364)     mov  A,X                    ; LSB in A
06BF: 60 90    MOV   REG[0x90],A        (0365)     mov  reg[DAC9_Ia_LSB_CR0],A
                                        (0366) ; ENDIF
                                        (0367) 
                                        (0368)   RAM_EPILOGUE RAM_USE_CLASS_2 
06C1: 7F       RET                      (0369)   ret
                                        (0370) .ENDSECTION
                                        (0371) 
                                        (0372) .SECTION
                                        (0373) ;-----------------------------------------------------------------------------
                                        (0374) ;  FUNCTION NAME: DAC9_Ia_Stop
                                        (0375) ;
                                        (0376) ;  DESCRIPTION:
                                        (0377) ;    Cuts power to the user module.
                                        (0378) ;
                                        (0379) ;-----------------------------------------------------------------------------
                                        (0380) ;
                                        (0381) ;  ARGUMENTS: none
                                        (0382) ;
                                        (0383) ;  RETURNS: none
                                        (0384) ;
                                        (0385) ;  SIDE EFFECTS:
                                        (0386) ;    The A and X registers may be modified by this or future implementations
                                        (0387) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0388) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0389) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0390) ;    functions.
                                        (0391) ;
                                        (0392)  DAC9_Ia_Stop:
                                        (0393) _DAC9_Ia_Stop:
                                        (0394)     RAM_PROLOGUE RAM_USE_CLASS_1 
                                        (0395)     and  reg[DAC9_Ia_MSB_CR3], ~bPWRMASK
                                        (0396)     and  reg[DAC9_Ia_LSB_CR3], ~bPWRMASK
                                        (0397)     RAM_EPILOGUE RAM_USE_CLASS_1 
                                        (0398)     ret
                                        (0399) .ENDSECTION
                                        (0400) 
                                        (0401) ; End of File DAC9_Ia.asm
FILE: lib\dac6_vgnd.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: DAC6_VGND.asm
                                        (0004) ;;   Version: 4.3, Updated on 2015/3/4 at 22:25:9
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: DAC6 User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "DAC6_VGND.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "m8c.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) 
                                        (0030) export  DAC6_VGND_Start
                                        (0031) export _DAC6_VGND_Start
                                        (0032) export  DAC6_VGND_SetPower
                                        (0033) export _DAC6_VGND_SetPower
                                        (0034) 
                                        (0035) export  DAC6_VGND_WriteBlind
                                        (0036) export _DAC6_VGND_WriteBlind
                                        (0037) export  DAC6_VGND_WriteStall
                                        (0038) export _DAC6_VGND_WriteStall
                                        (0039) 
                                        (0040) export  DAC6_VGND_Stop
                                        (0041) export _DAC6_VGND_Stop
                                        (0042) 
                                        (0043) ;; -----------------------------------------------------------------
                                        (0044) ;;                         Register Definitions
                                        (0045) ;; -----------------------------------------------------------------
                                        (0046) ;;
                                        (0047) ;; Uses 1 Switched Cap Block configured as shown. This API depends
                                        (0048) ;; on knowing the exact personalization of CR0 and CR3 bitfields
                                        (0049) ;; for time efficiency.
                                        (0050) ;;
                                        (0051) ;; * For a Mask/Val pair, this simply indicates that the value is
                                        (0052) ;;   determined by the user either through config-time parameteriza-
                                        (0053) ;;   tion or run-time manipulation.
                                        (0054) ;;
                                        (0055) ;; BIT FIELD         Mask/Val Function
                                        (0056) ;; -----------------    ----- --------------------
                                        (0057) ;; CR0.FCap             80/1  Feedback cap size 32
                                        (0058) ;; CR0.ClockPhase       40/0  Normal phase
                                        (0059) ;; CR0.ASign            20/*  User parameter
                                        (0060) ;; CR0.ACap             1F/*  User parameter
                                        (0061) ;;
                                        (0062) ;; CR1.ACMux            E0/2  (SCA) A:VRef High, C:Don't Care
                                        (0063) ;; CR1.AMux             E0/4  (SCB) VRef High
                                        (0064) ;; CR1.BCap             1F/0  Prune B-input branch
                                        (0065) ;;
                                        (0066) ;; CR2.AnalogBus        80/*  User Parameter: Output Bus Enable
                                        (0067) ;; CR2.CmpBus           40/0  Comparator Bus Disable
                                        (0068) ;; CR2.AutoZero         20/1  Auto-Zero enabled on Phi 1
                                        (0069) ;; CR2.CCap             1F/0  Prune C-input branch
                                        (0070) ;;
                                        (0071) ;; CR3.ARefSelect       C0/0  Use AGND (to invert)
                                        (0072) ;; CR3.FSW1             20/1  Feedback Cap Used
                                        (0073) ;; CR3.FSW2             10/1  Feedback Cap Grounded for AZ
                                        (0074) ;; CR3.BMux             0C/0  (SCA) Don't Care - this branch pruned
                                        (0075) ;; CR3.BSW              08/0  (SCB) Don't Care - this branch pruned
                                        (0076) ;; CR3.BMux             04/0  (SCB) Don't Care - this branch pruned
                                        (0077) ;; CR3.PWR              03/*  User Parameter: Power, def=OFF
                                        (0078) ;;
                                        (0079) 
                                        (0080) ;-----------------------------------------------
                                        (0081) ;  Constant Definitions
                                        (0082) ;-----------------------------------------------
                                        (0083) cOFFSET:   equ 31               ; Conversion term for offset binary to 2's C
                                        (0084) bPWRMASK:  equ 03h              ; Power bitfield in Switched Cap CR3 reg
                                        (0085) bCR3:      equ 30h              ; Except for power bits, CR3 ALWAYS looks
                                        (0086)                                 ;    like this regardless of SC block type
                                        (0087)                                 ;    or where the DAC gets mapped.
                                        (0088) 
                                        (0089) 
                                        (0090) AREA UserModules (ROM, REL)
                                        (0091) 
                                        (0092) .SECTION
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ;  FUNCTION NAME: DAC6_VGND_Start
                                        (0095) ;  FUNCTION NAME: DAC6_VGND_SetPower
                                        (0096) ;
                                        (0097) ;  DESCRIPTION:
                                        (0098) ;    Start / SetPower - Applies power setting to the module's SC blocks
                                        (0099) ;
                                        (0100) ;-----------------------------------------------------------------------------
                                        (0101) ;
                                        (0102) ;  ARGUMENTS:
                                        (0103) ;    A contains the power setting 0=Off, 1=Low, 2=Med, 3=High
                                        (0104) ;
                                        (0105) ;  RETURNS: none
                                        (0106) ;
                                        (0107) ;  SIDE EFFECTS:
                                        (0108) ;    The A and X registers may be modified by this or future implementations
                                        (0109) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0110) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0111) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0112) ;    functions.
                                        (0113) ;
                                        (0114)  DAC6_VGND_Start:
                                        (0115) _DAC6_VGND_Start:
                                        (0116)  DAC6_VGND_SetPower:
                                        (0117) _DAC6_VGND_SetPower:
                                        (0118)         RAM_PROLOGUE RAM_USE_CLASS_1 
06C2: 21 03    AND   A,0x3              (0119)         and A, bPWRMASK
06C4: 29 30    OR    A,0x30             (0120)         or  A, bCR3             ; Set all other bits in addition to power
06C6: 60 83    MOV   REG[0x83],A        (0121)         mov reg[DAC6_VGND_CR3], A
                                        (0122)         RAM_EPILOGUE RAM_USE_CLASS_1 
06C8: 7F       RET                      (0123)         ret
                                        (0124) .ENDSECTION
                                        (0125) 
                                        (0126) .SECTION
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) ;  FUNCTION NAME: DAC6_VGND_WriteBlind
                                        (0129) ;
                                        (0130) ;  DESCRIPTION:
                                        (0131) ;    Modify the DAC's update value without worrying about the clocks
                                        (0132) ;    Lowest overhead, but output may not settle to correct value until the
                                        (0133) ;    phi2 of next full cycle following the write.
                                        (0134) ;
                                        (0135) ;-----------------------------------------------------------------------------
                                        (0136) ;
                                        (0137) ;  ARGUMENTS:
                                        (0138) ;    The accumulator, A, contains the input in the appropriate format.
                                        (0139) ;    The data format is determined by the setting of the DataFormat parameter
                                        (0140) ;    in the Device Editor.
                                        (0141) ;
                                        (0142) ;  RETURNS: none
                                        (0143) ;
                                        (0144) ;  SIDE EFFECTS:
                                        (0145) ;    The A and X registers may be modified by this or future implementations
                                        (0146) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0147) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0148) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0149) ;    functions.
                                        (0150) ;
                                        (0151)  DAC6_VGND_WriteBlind:
                                        (0152) _DAC6_VGND_WriteBlind:
                                        (0153) 
                                        (0154)   RAM_PROLOGUE RAM_USE_CLASS_1 
                                        (0155)   IF DAC6_VGND_OFFSETBINARY
                                        (0156)     ;; Data is an unsigned byte value in [0..62] (i.e., 63 unique values).
                                        (0157)     ;; Following converts it to 2's complement:
                                        (0158)     sub  A, cOFFSET         ; Apply the offset
                                        (0159)   ENDIF
                                        (0160)   IF DAC6_VGND_OFFSETBINARY | DAC6_VGND_TWOSCOMPLEMENT
                                        (0161)     ;; Data is a byte in standard 2's complement form with value in [-31..+31]
                                        (0162)     ;; Following converts it to Sign & Magnitude form "00smmmmm"
                                        (0163)     ;;   where sign, "s", is 1 for negative numbers; 0 for positive
                                        (0164)     ;;   and "m" is the magnitude.
                                        (0165)     asl  A                  ; Multiply by 2 and put sign in Carry flag
                                        (0166)     jnc  BlindPositive
                                        (0167)     ;; Neg to pos by "Invert & Add 1" procedure, but data is shifted!
                                        (0168)     cpl  A                  ; bit 0 is a "1" so, following 1 byte "inc" works
                                        (0169)     inc  A                  ;   (otherwise, we'd have to "add A, 2")
                                        (0170)     or   A, 40h             ; Make it negative by forcing sign bit
                                        (0171)     jmp  BlindMagSet
                                        (0172) BlindPositive:
                                        (0173)     nop
                                        (0174)     nop
                                        (0175)     nop
                                        (0176)     jmp  BlindMagSet
                                        (0177) BlindMagSet:
                                        (0178)     asr  A                  ; Divide by two to finish up
                                        (0179)   ENDIF
                                        (0180) 
                                        (0181)     ;; Data is in Sign & Magnitude form.
                                        (0182)     ;; Set FCap and ClockPhase bits
                                        (0183)     or   A, DAC6_VGND_CR0_HIBITS
                                        (0184)     mov  reg[DAC6_VGND_CR0], A
                                        (0185)     RAM_EPILOGUE RAM_USE_CLASS_1 
                                        (0186)     ret
                                        (0187) .ENDSECTION
                                        (0188) 
                                        (0189) .SECTION
                                        (0190) ;-----------------------------------------------------------------------------
                                        (0191) ;  FUNCTION NAME: DAC6_VGND_WriteStall
                                        (0192) ;
                                        (0193) ;  DESCRIPTION:
                                        (0194) ;    Modify the DAC's update value, stalling the CPU if necessary.
                                        (0195) ;    This routine should be used with fast analog clocks or when the
                                        (0196) ;    resulting interrupt latencies, comparable to the update period,
                                        (0197) ;    can be tolerated comfortably.
                                        (0198) ;
                                        (0199) ;-----------------------------------------------------------------------------
                                        (0200) ;
                                        (0201) ;  ARGUMENTS:
                                        (0202) ;    The accumulator, A, contains the input in the appropriate format.
                                        (0203) ;    The data format is determined by the setting of the DataFormat parameter
                                        (0204) ;    in the Device Editor.
                                        (0205) ;
                                        (0206) ;  RETURNS: none
                                        (0207) ;
                                        (0208) ;  SIDE EFFECTS:
                                        (0209) ;    The A and X registers may be modified by this or future implementations
                                        (0210) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0211) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0212) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0213) ;    functions.    
                                        (0214) ;
                                        (0215) 
                                        (0216)  DAC6_VGND_WriteStall:
                                        (0217) _DAC6_VGND_WriteStall:
                                        (0218) 
                                        (0219)   RAM_PROLOGUE RAM_USE_CLASS_1 
                                        (0220)   IF DAC6_VGND_OFFSETBINARY
                                        (0221)     ;; Data is an unsigned byte value in [0..62] (i.e., 63 unique values).
                                        (0222)     ;; Following converts it to 2's complement:
06C9: 11 1F    SUB   A,0x1F             (0223)     sub  A, cOFFSET         ; Apply the offset
                                        (0224)   ENDIF
                                        (0225)   IF DAC6_VGND_OFFSETBINARY | DAC6_VGND_TWOSCOMPLEMENT
                                        (0226)     ;; Data is a byte in standard 2's complement form with value in [-31..+31]
                                        (0227)     ;; Following converts it to Sign & Magnitude form "00smmmmm"
                                        (0228)     ;;   where sign, "s", is 1 for negative numbers; 0 for positive
                                        (0229)     ;;   and "m" is the magnitude.
06CB: 64       ASL   A                  (0230)     asl  A                  ; Multiply by 2 and put sign in Carry flag
06CC: D0 07    JNC   0x06D4             (0231)     jnc  StallPositive
06CE: 73       CPL   A                  (0232)     cpl  A                  ; "Invert" step of complement 2's complement
06CF: 74       INC   A                  (0233)     inc  A                  ; "Add 1"  step of complement 2's complement
06D0: 29 40    OR    A,0x40             (0234)     or   A, 40h             ; Make it negative
06D2: 80 06    JMP   0x06D9             (0235)     jmp  StallMagSet
                                        (0236) StallPositive:
06D4: 40       NOP                      (0237)     nop
06D5: 40       NOP                      (0238)     nop
06D6: 40       NOP                      (0239)     nop
06D7: 80 01    JMP   0x06D9             (0240)     jmp  StallMagSet
                                        (0241) StallMagSet:
06D9: 67       ASR   A                  (0242)     asr  A                  ; Divide by two to finish conversion
                                        (0243)   ENDIF
                                        (0244) 
                                        (0245)     ;; Data is in Sign & Magnitude form.
                                        (0246)     ;; Set FCap and ClockPhase bits
06DA: 29 80    OR    A,0x80             (0247)     or   A, DAC6_VGND_CR0_HIBITS
06DC: 43 65 01 OR    REG[0x65],0x1      
                                        (0248)     M8C_Stall
06DF: 60 80    MOV   REG[0x80],A        (0249)     mov  reg[DAC6_VGND_CR0], A
06E1: 41 65 FE AND   REG[0x65],0xFE     
                                        (0250)     M8C_Unstall
                                        (0251)     RAM_EPILOGUE RAM_USE_CLASS_1 
06E4: 7F       RET                      (0252)     ret
                                        (0253) .ENDSECTION
                                        (0254) 
                                        (0255) .SECTION
                                        (0256) ;-----------------------------------------------------------------------------
                                        (0257) ;  FUNCTION NAME: DAC6_VGND_Stop
                                        (0258) ;
                                        (0259) ;  DESCRIPTION:
                                        (0260) ;    Turns off power to the SC block
                                        (0261) ;
                                        (0262) ;-----------------------------------------------------------------------------
                                        (0263) ;
                                        (0264) ;  ARGUMENTS: none
                                        (0265) ;
                                        (0266) ;  RETURNS: none
                                        (0267) ;
                                        (0268) ;  SIDE EFFECTS:
                                        (0269) ;    The A and X registers may be modified by this or future implementations
                                        (0270) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0271) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0272) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0273) ;    functions.
                                        (0274) ;
                                        (0275) 
                                        (0276)  DAC6_VGND_Stop:
                                        (0277) _DAC6_VGND_Stop:
                                        (0278)     RAM_PROLOGUE RAM_USE_CLASS_1 
                                        (0279)     and reg[DAC6_VGND_CR3], ~bPWRMASK
                                        (0280)     RAM_EPILOGUE RAM_USE_CLASS_1 
                                        (0281)     ret
                                        (0282) .ENDSECTION
                                        (0283) 
                                        (0284) ; End of File DAC6_VGND.asm
FILE: lib\amux4_1.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   AMUX4_1.asm
                                        (0004) ;;  Version: 1.50, Updated on 2015/3/4 at 22:21:30
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: AMux4 User Module software implementation file devices.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) 
                                        (0023) include "AMUX4_1.inc"
                                        (0024) include "m8c.inc"
                                        (0025) include "memory.inc"
                                        (0026) 
                                        (0027) ;-----------------------------------------------
                                        (0028) ;  Global Symbols
                                        (0029) ;-----------------------------------------------
                                        (0030) export  AMUX4_1_InputSelect
                                        (0031) export _AMUX4_1_InputSelect
                                        (0032) 
                                        (0033) export  AMUX4_1_Start
                                        (0034) export _AMUX4_1_Start
                                        (0035) 
                                        (0036) export  AMUX4_1_Stop
                                        (0037) export _AMUX4_1_Stop
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  EQUATES
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) MUXMASK:                     equ 03h
                                        (0044) 
                                        (0045) AREA UserModules (ROM, REL)
                                        (0046) .SECTION
                                        (0047) ;-----------------------------------------------------------------------------
                                        (0048) ;  FUNCTION NAME: AMUX4_1_InputSelect
                                        (0049) ;
                                        (0050) ;  DESCRIPTION:
                                        (0051) ;    Place the signal from one of four port0 pins on the Analog Column bus.
                                        (0052) ;
                                        (0053) ;-----------------------------------------------------------------------------
                                        (0054) ;
                                        (0055) ;  ARGUMENTS:
                                        (0056) ;    A contains the mux input control value
                                        (0057) ;
                                        (0058) ;      Input           Code
                                        (0059) ;   Mux input 0,1       00h
                                        (0060) ;   Mux input 2,3       01h
                                        (0061) ;   Mux input 4,5       02h
                                        (0062) ;   Mux input 6,7       03h
                                        (0063) ;
                                        (0064) ;  RETURNS: none
                                        (0065) ;
                                        (0066) ;  SIDE EFFECTS:
                                        (0067) ;    The A and X registers may be modified by this or future implementations
                                        (0068) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0069) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0070) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0071) ;    functions.
                                        (0072) ;
                                        (0073)  AMUX4_1_InputSelect:
                                        (0074) _AMUX4_1_InputSelect:
                                        (0075)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0076) 	
                                        (0077) IF (AMUX4_1_COL_COUNT)
                                        (0078) 	M8C_SetBank1      ; ACE_AMX_IN is in Bank 1
                                        (0079) ENDIF
                                        (0080) 	
06E5: 21 03    AND   A,0x3              (0081)     and  A, MUXMASK                    ; Mask off only valid port0 input bits
06E7: 57 00    MOV   X,0x0              (0082)     mov  X,AMUX4_1_MUX_COL
                                        (0083) .AMUX4_ShiftIt:                         ; Shift value to correct bit position for Mux
06E9: 79       DEC   X                  (0084)     dec  X
06EA: C0 05    JC    0x06F0             (0085)     jc   .AMUX4_SetIt
06EC: 64       ASL   A                  (0086)     asl  A
06ED: 64       ASL   A                  (0087)     asl  A
06EE: 8F FA    JMP   0x06E9             (0088)     jmp  .AMUX4_ShiftIt                ; Loop until bits shifted to 2 LSBs
                                        (0089) 
                                        (0090) .AMUX4_SetIt:
06F0: 4F       MOV   X,SP               (0091)     mov  X,SP                          ; Get current stack location
06F1: 08       PUSH  A                  (0092)     push A                             ; Save a to OR it to AMX_IN later	
                                        (0093) IF (AMUX4_1_COL_COUNT)
                                        (0094) 	mov  A, reg[ACE_AMX_IN]                 ; Get current value of mux control register    
                                        (0095) ELSE
06F2: 5D 60    MOV   A,REG[0x60]        (0096) 	mov  A, reg[AMX_IN]                 ; Get current value of mux control register
                                        (0097) ENDIF
06F4: 21 FC    AND   A,0xFC             (0098)     and  A,~AMUX4_1_MUX_MASK           ; Mask off the bits for this Mux
06F6: 2B 00    OR    A,[X+0]            (0099)     or   A,[X]                         ; OR in the mux control bits
                                        (0100) IF (AMUX4_1_COL_COUNT)
                                        (0101) 	mov  reg[ACE_AMX_IN], A                 ; Get current value of mux control register    
                                        (0102) ELSE
06F8: 60 60    MOV   REG[0x60],A        (0103) 	mov  reg[AMX_IN], A                 ; Write out mux value to mux control register
                                        (0104) ENDIF	
06FA: 18       POP   A                  (0105)     pop  A                             ; Restore the stack
                                        (0106) 	
                                        (0107) IF (AMUX4_1_COL_COUNT)
                                        (0108) 	M8C_SetBank0
                                        (0109) ENDIF
                                        (0110)     RAM_EPILOGUE RAM_USE_CLASS_2
06FB: 7F       RET                      (0111)     ret
                                        (0112) .ENDSECTION
                                        (0113) 
                                        (0114) .SECTION
                                        (0115) ;-----------------------------------------------------------------------------
                                        (0116) ;  FUNCTION NAME: AMUX4_1_Start
                                        (0117) ;
                                        (0118) ;  DESCRIPTION:
                                        (0119) ;   This function does nothing at this time.  It is only here for
                                        (0120) ;   future compatibility.
                                        (0121) ;
                                        (0122) ;-----------------------------------------------------------------------------
                                        (0123) ;
                                        (0124) ;  ARGUMENTS: none
                                        (0125) ;
                                        (0126) ;  RETURNS: none
                                        (0127) ;
                                        (0128) ;  SIDE EFFECTS:
                                        (0129) ;    The A and X registers may be modified by this or future implementations
                                        (0130) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0131) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0132) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0133) ;    functions.
                                        (0134) ;
                                        (0135)  AMUX4_1_Start:
                                        (0136) _AMUX4_1_Start:
                                        (0137)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0138)     RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0139)     ret
                                        (0140) .ENDSECTION
                                        (0141) 
                                        (0142) .SECTION
                                        (0143) ;-----------------------------------------------------------------------------
                                        (0144) ;  FUNCTION NAME: AMUX4_1_Stop
                                        (0145) ;
                                        (0146) ;  DESCRIPTION:
                                        (0147) ;   This function does nothing at this time.  It is only here for
                                        (0148) ;   future compatibility.
                                        (0149) ;
                                        (0150) ;-----------------------------------------------------------------------------
                                        (0151) ;
                                        (0152) ;  ARGUMENTS:  none
                                        (0153) ;
                                        (0154) ;  RETURNS: none
                                        (0155) ;
                                        (0156) ;  SIDE EFFECTS:
                                        (0157) ;    The A and X registers may be modified by this or future implementations
                                        (0158) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0159) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0160) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0161) ;    functions.
                                        (0162) ;
                                        (0163)  AMUX4_1_Stop:
                                        (0164) _AMUX4_1_Stop:
                                        (0165)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0166)     RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0167)     ret
                                        (0168) .ENDSECTION
                                        (0169) ; End of File AMUX4_1.asm
FILE: lib\amux4_0.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   AMUX4_0.asm
                                        (0004) ;;  Version: 1.50, Updated on 2015/3/4 at 22:21:30
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: AMux4 User Module software implementation file devices.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) 
                                        (0023) include "AMUX4_0.inc"
                                        (0024) include "m8c.inc"
                                        (0025) include "memory.inc"
                                        (0026) 
                                        (0027) ;-----------------------------------------------
                                        (0028) ;  Global Symbols
                                        (0029) ;-----------------------------------------------
                                        (0030) export  AMUX4_0_InputSelect
                                        (0031) export _AMUX4_0_InputSelect
                                        (0032) 
                                        (0033) export  AMUX4_0_Start
                                        (0034) export _AMUX4_0_Start
                                        (0035) 
                                        (0036) export  AMUX4_0_Stop
                                        (0037) export _AMUX4_0_Stop
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  EQUATES
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) MUXMASK:                     equ 03h
                                        (0044) 
                                        (0045) AREA UserModules (ROM, REL)
                                        (0046) .SECTION
                                        (0047) ;-----------------------------------------------------------------------------
                                        (0048) ;  FUNCTION NAME: AMUX4_0_InputSelect
                                        (0049) ;
                                        (0050) ;  DESCRIPTION:
                                        (0051) ;    Place the signal from one of four port0 pins on the Analog Column bus.
                                        (0052) ;
                                        (0053) ;-----------------------------------------------------------------------------
                                        (0054) ;
                                        (0055) ;  ARGUMENTS:
                                        (0056) ;    A contains the mux input control value
                                        (0057) ;
                                        (0058) ;      Input           Code
                                        (0059) ;   Mux input 0,1       00h
                                        (0060) ;   Mux input 2,3       01h
                                        (0061) ;   Mux input 4,5       02h
                                        (0062) ;   Mux input 6,7       03h
                                        (0063) ;
                                        (0064) ;  RETURNS: none
                                        (0065) ;
                                        (0066) ;  SIDE EFFECTS:
                                        (0067) ;    The A and X registers may be modified by this or future implementations
                                        (0068) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0069) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0070) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0071) ;    functions.
                                        (0072) ;
                                        (0073)  AMUX4_0_InputSelect:
                                        (0074) _AMUX4_0_InputSelect:
                                        (0075)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0076) 	
                                        (0077) IF (AMUX4_0_COL_COUNT)
                                        (0078) 	M8C_SetBank1      ; ACE_AMX_IN is in Bank 1
                                        (0079) ENDIF
                                        (0080) 	
06FC: 21 03    AND   A,0x3              (0081)     and  A, MUXMASK                    ; Mask off only valid port0 input bits
06FE: 57 00    MOV   X,0x0              (0082)     mov  X,AMUX4_0_MUX_COL
                                        (0083) .AMUX4_ShiftIt:                         ; Shift value to correct bit position for Mux
0700: 79       DEC   X                  (0084)     dec  X
0701: C0 05    JC    0x0707             (0085)     jc   .AMUX4_SetIt
0703: 64       ASL   A                  (0086)     asl  A
0704: 64       ASL   A                  (0087)     asl  A
0705: 8F FA    JMP   0x0700             (0088)     jmp  .AMUX4_ShiftIt                ; Loop until bits shifted to 2 LSBs
                                        (0089) 
                                        (0090) .AMUX4_SetIt:
0707: 4F       MOV   X,SP               (0091)     mov  X,SP                          ; Get current stack location
0708: 08       PUSH  A                  (0092)     push A                             ; Save a to OR it to AMX_IN later	
                                        (0093) IF (AMUX4_0_COL_COUNT)
                                        (0094) 	mov  A, reg[ACE_AMX_IN]                 ; Get current value of mux control register    
                                        (0095) ELSE
0709: 5D 60    MOV   A,REG[0x60]        (0096) 	mov  A, reg[AMX_IN]                 ; Get current value of mux control register
                                        (0097) ENDIF
070B: 21 FC    AND   A,0xFC             (0098)     and  A,~AMUX4_0_MUX_MASK           ; Mask off the bits for this Mux
070D: 2B 00    OR    A,[X+0]            (0099)     or   A,[X]                         ; OR in the mux control bits
                                        (0100) IF (AMUX4_0_COL_COUNT)
                                        (0101) 	mov  reg[ACE_AMX_IN], A                 ; Get current value of mux control register    
                                        (0102) ELSE
070F: 60 60    MOV   REG[0x60],A        (0103) 	mov  reg[AMX_IN], A                 ; Write out mux value to mux control register
                                        (0104) ENDIF	
0711: 18       POP   A                  (0105)     pop  A                             ; Restore the stack
                                        (0106) 	
                                        (0107) IF (AMUX4_0_COL_COUNT)
                                        (0108) 	M8C_SetBank0
                                        (0109) ENDIF
                                        (0110)     RAM_EPILOGUE RAM_USE_CLASS_2
0712: 7F       RET                      (0111)     ret
                                        (0112) .ENDSECTION
                                        (0113) 
                                        (0114) .SECTION
                                        (0115) ;-----------------------------------------------------------------------------
                                        (0116) ;  FUNCTION NAME: AMUX4_0_Start
                                        (0117) ;
                                        (0118) ;  DESCRIPTION:
                                        (0119) ;   This function does nothing at this time.  It is only here for
                                        (0120) ;   future compatibility.
                                        (0121) ;
                                        (0122) ;-----------------------------------------------------------------------------
                                        (0123) ;
                                        (0124) ;  ARGUMENTS: none
                                        (0125) ;
                                        (0126) ;  RETURNS: none
                                        (0127) ;
                                        (0128) ;  SIDE EFFECTS:
                                        (0129) ;    The A and X registers may be modified by this or future implementations
                                        (0130) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0131) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0132) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0133) ;    functions.
                                        (0134) ;
                                        (0135)  AMUX4_0_Start:
                                        (0136) _AMUX4_0_Start:
                                        (0137)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0138)     RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0139)     ret
                                        (0140) .ENDSECTION
                                        (0141) 
                                        (0142) .SECTION
                                        (0143) ;-----------------------------------------------------------------------------
                                        (0144) ;  FUNCTION NAME: AMUX4_0_Stop
                                        (0145) ;
                                        (0146) ;  DESCRIPTION:
                                        (0147) ;   This function does nothing at this time.  It is only here for
                                        (0148) ;   future compatibility.
                                        (0149) ;
                                        (0150) ;-----------------------------------------------------------------------------
                                        (0151) ;
                                        (0152) ;  ARGUMENTS:  none
                                        (0153) ;
                                        (0154) ;  RETURNS: none
                                        (0155) ;
                                        (0156) ;  SIDE EFFECTS:
                                        (0157) ;    The A and X registers may be modified by this or future implementations
                                        (0158) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0159) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0160) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0161) ;    functions.
                                        (0162) ;
                                        (0163)  AMUX4_0_Stop:
                                        (0164) _AMUX4_0_Stop:
                                        (0165)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0166)     RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0167)     ret
                                        (0168) .ENDSECTION
                                        (0169) ; End of File AMUX4_0.asm
FILE: lib\adcincint.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: ADCINCINT.asm
                                        (0004) ;;  Version: 1.20, Updated on 2015/3/4 at 22:21:26
                                        (0005) ;;
                                        (0006) ;;  DESCRIPTION: Assembler interrupt service routine for the ADCINC
                                        (0007) ;;               A/D Converter User Module. This code works for both the
                                        (0008) ;;               first and second-order modulator topologies.
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) 
                                        (0014) include "m8c.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "ADCINC.inc"
                                        (0017) 
                                        (0018) 
                                        (0019) ;-----------------------------------------------
                                        (0020) ;  Global Symbols
                                        (0021) ;-----------------------------------------------
                                        (0022) 
                                        (0023) export _ADCINC_ADConversion_ISR
                                        (0024) 
                                        (0025) export _ADCINC_iResult
                                        (0026) export  ADCINC_iResult
                                        (0027) export _ADCINC_fStatus
                                        (0028) export  ADCINC_fStatus
                                        (0029) export _ADCINC_bState
                                        (0030) export  ADCINC_bState
                                        (0031) export _ADCINC_fMode
                                        (0032) export  ADCINC_fMode
                                        (0033) export _ADCINC_bNumSamples
                                        (0034) export  ADCINC_bNumSamples
                                        (0035) 
                                        (0036) ;-----------------------------------------------
                                        (0037) ; Variable Allocation
                                        (0038) ;-----------------------------------------------
                                        (0039) AREA InterruptRAM(RAM,REL)
                                        (0040)  ADCINC_iResult:
                                        (0041) _ADCINC_iResult:                           BLK  2 ;Calculated answer
                                        (0042)   iTemp:                                   BLK  2 ;internal temp storage
                                        (0043)  ADCINC_fStatus:
                                        (0044) _ADCINC_fStatus:                           BLK  1 ;ADC Status
                                        (0045)  ADCINC_bState:
                                        (0046) _ADCINC_bState:                            BLK  1 ;State value of ADC count
                                        (0047)  ADCINC_fMode:
                                        (0048) _ADCINC_fMode:                             BLK  1 ;Integrate and reset mode.
                                        (0049)  ADCINC_bNumSamples:
                                        (0050) _ADCINC_bNumSamples:                       BLK  1 ;Number of samples to take.
                                        (0051) 
                                        (0052) ;-----------------------------------------------
                                        (0053) ;  EQUATES
                                        (0054) ;-----------------------------------------------
                                        (0055) 
                                        (0056) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0057) ;---------------------------------------------------
                                        (0058) ; Insert your custom declarations below this banner
                                        (0059) ;---------------------------------------------------
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) //14Point7 ASM Code Start
                                        (0071) AREA InterruptRAM (RAM, REL, CON)
                                        (0072) ADC_Counter:: //ADC Counter
                                        (0073) _ADC_Counter:: BLK  1
                                        (0074) Ri_Max_x1:: //Peak of Nermest AC coupled signal for temperature sensing
                                        (0075) _Ri_Max_x1:: BLK  1
                                        (0076) Ri_Min_x1:: //Trough of Nermest AC coupled signal for temperature sensing
                                        (0077) _Ri_Min_x1:: BLK  1
                                        (0078) ip_x1:: //Voltage Across Pump Current sense Resistor, it is in 
                                        (0079) _ip_x1:: BLK  1
                                        (0080) ADC_IF::// Byte value used to track which ADC sample last occurred, ADC_IF[0]=1 if Ri_Min,ADC_IF[1]=1 if Ri_Max,ADC_IF[2]=1 if VR
                                        (0081) _ADC_IF:: BLK  1
                                        (0082) //14Point7 ASM Code End
                                        (0083) 
                                        (0084) ;---------------------------------------------------
                                        (0085) ; Insert your custom declarations above this banner
                                        (0086) ;---------------------------------------------------
                                        (0087) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0088) 
                                        (0089) 
                                        (0090) AREA UserModules (ROM, REL)
                                        (0091) 
                                        (0092) ;-----------------------------------------------------------------------------
                                        (0093) ;  FUNCTION NAME: _ADCINC_ADConversion_ISR
                                        (0094) ;
                                        (0095) ;  DESCRIPTION: Perform final filter operations to produce output samples.
                                        (0096) ;
                                        (0097) ;-----------------------------------------------------------------------------
                                        (0098) ;
                                        (0099) ;    The decimation rate is established by the PWM interrupt. Four timer
                                        (0100) ;    clocks elapse for each modulator output (decimator input) since the
                                        (0101) ;    phi1/phi2 generator divides by 4. This means the timer period and thus
                                        (0102) ;    it's interrupt must equal 4 times the actual decimation rate.  The
                                        (0103) ;    decimator is ru  for 2^(#bits-6).
                                        (0104) ;
                                        (0105) _ADCINC_ADConversion_ISR:
0713: 7A 22    DEC   [0x22]             (0106)     dec  [ADCINC_bState]
                                        (0107) if1:
0715: C0 02    JC    0x0718             (0108)     jc endif1 ; no underflow
0717: 7E       RETI                     (0109)     reti
                                        (0110) endif1:
0718: 3C 23 00 CMP   [0x23],0x0         (0111)     cmp [ADCINC_fMode],0
                                        (0112) if2: 
071B: B0 12    JNZ   0x072E             (0113)     jnz endif2  ;leaving reset mode
071D: 08       PUSH  A                  (0114)     push A                            ;read decimator
071E: 5D E5    MOV   A,REG[0xE5]        (0115)     mov  A, reg[DEC_DL]
0720: 53 20    MOV   [0x20],A           (0116)     mov  [iTemp + LowByte],A
0722: 5D E4    MOV   A,REG[0xE4]        (0117)     mov  A, reg[DEC_DH]
0724: 53 1F    MOV   [0x1F],A           (0118)     mov  [iTemp + HighByte], A
0726: 18       POP   A                  (0119)     pop A
0727: 55 23 01 MOV   [0x23],0x1         (0120)     mov [ADCINC_fMode],1
072A: 55 22 03 MOV   [0x22],0x3         (0121)     mov [ADCINC_bState],((1<<(ADCINC_bNUMBITS- 6))-1)
072D: 7E       RETI                     (0122)     reti
072E: 43 86 20 OR    REG[0x86],0x20     
0731: 43 87 10 OR    REG[0x87],0x10     
                                        (0123) endif2:
                                        (0124)     ;This code runs at end of integrate
                                        (0125)     ADCINC_RESET_INTEGRATOR_M
0734: 08       PUSH  A                  (0126)     push A
0735: 5D E5    MOV   A,REG[0xE5]        (0127)     mov  A, reg[DEC_DL]
0737: 12 20    SUB   A,[0x20]           (0128)     sub  A,[iTemp + LowByte]
0739: 53 20    MOV   [0x20],A           (0129)     mov  [iTemp +LowByte],A
073B: 5D E4    MOV   A,REG[0xE4]        (0130)     mov  A, reg[DEC_DH]
073D: 1A 1F    SBB   A,[0x1F]           (0131)     sbb  A,[iTemp + HighByte]
073F: 67       ASR   A                  (0132)     asr  A
0740: 6E 20    RRC   [0x20]             (0133)     rrc  [iTemp + LowByte]
                                        (0134) 
                                        (0135)        ;Covert to Unipolar
                                        (0136) IF  ADCINC_9_OR_MORE_BITS
                                        (0137)     add  A, (1<<(ADCINC_bNUMBITS - 9))
                                        (0138) ELSE
0742: 06 20 80 ADD   [0x20],0x80        (0139)     add [iTemp + LowByte], (1<<(ADCINC_bNUMBITS - 1)) ;work on lower Byte
0745: 09 00    ADC   A,0x0              (0140)     adc A,0 
                                        (0141) ENDIF
                                        (0142)        ;check for overflow
                                        (0143) IF     ADCINC_8_OR_MORE_BITS
0747: 39 01    CMP   A,0x1              (0144)     cmp A,(1<<(ADCINC_bNUMBITS - 8))
                                        (0145) if3: 
0749: B0 05    JNZ   0x074F             (0146)     jnz endif3 ;overflow
074B: 78       DEC   A                  (0147)     dec A
074C: 55 20 FF MOV   [0x20],0xFF        (0148)     mov [iTemp + LowByte],ffh
                                        (0149) endif3:
                                        (0150) ELSE
                                        (0151)     cmp [iTemp + LowByte],(1<<(ADCINC_bNUMBITS))
                                        (0152) if4: 
                                        (0153)     jnz endif4 ;overflow
                                        (0154)     dec [iTemp + LowByte]
                                        (0155) endif4:
                                        (0156) ENDIF
                                        (0157) IF ADCINC_SIGNED_DATA
                                        (0158) IF ADCINC_9_OR_MORE_BITS
                                        (0159)     sub A,(1<<(ADCINC_bNUMBITS - 9))
                                        (0160) ELSE
                                        (0161)     sub [iTemp +LowByte],(1<<(ADCINC_bNUMBITS - 1))
                                        (0162)     sbb A,0
                                        (0163) ENDIF
                                        (0164) ENDIF
074F: 5F 1E 20 MOV   [0x1E],[0x20]      (0165)     mov  [ADCINC_iResult + LowByte],[iTemp +LowByte]
0752: 53 1D    MOV   [0x1D],A           (0166)     mov  [ADCINC_iResult + HighByte],A
0754: 55 21 01 MOV   [0x21],0x1         (0167)     mov  [ADCINC_fStatus],1
                                        (0168) ConversionReady:
                                        (0169)     ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0170)     ;---------------------------------------------------
                                        (0171)     ; Insert your custom code below this banner
                                        (0172)     ;---------------------------------------------------
                                        (0173) 	//14Point7 ASM Code Start
0757: 51 25    MOV   A,[0x25]           (0174) 	mov A,[_ADC_Counter]
0759: 11 00    SUB   A,0x0              (0175)     sub A,0
075B: A0 0D    JZ    0x0769             (0176)     JZ ADC_0
                                        (0177)     
075D: 11 01    SUB   A,0x1              (0178)     sub A,1
075F: A0 17    JZ    0x0777             (0179)     JZ ADC_1
                                        (0180)     
0761: 11 01    SUB   A,0x1              (0181)     sub A,1
0763: A0 24    JZ    0x0788             (0182)    	JZ ADC_2 
                                        (0183)    	
0765: 11 01    SUB   A,0x1              (0184)     sub A,1
0767: A0 2E    JZ    0x0796             (0185)     JZ ADC_3
                                        (0186) 
                                        (0187)     ADC_0: //Ri_Max, Peak of AC coupled Temperature sense signal 
                                        (0188) 	//and reg[PRT2DR],127 //clear Ri_Out Pin so that the next ADC sample will Acquire the Trough (Ri_Min) of AC coupled Temperature sense signal 
0769: 41 00 FB AND   REG[0x0],0xFB      (0189) 	and reg[PRT0DR],251 //clear Ri_Out Pin so that the next ADC sample will Acquire the Trough (Ri_Min) of AC coupled Temperature sense signal 
076C: 5F 26 1E MOV   [0x26],[0x1E]      (0190)     mov [_Ri_Max_x1],[ADCINC_iResult + LowByte]
076F: 55 25 01 MOV   [0x25],0x1         (0191)     mov [_ADC_Counter],1
0772: 2E 29 02 OR    [0x29],0x2         (0192)     or [_ADC_IF],2 // Set ADC_IF[1] to indicate that new Ri_Max data is available
0775: 80 2F    JMP   0x07A5             (0193) 	jmp Cont
                                        (0194)     
                                        (0195)     ADC_1://Ri_Min, Trough of AC coupled Temperature sense signal 
0777: 62 60 0F MOV   REG[0x60],0xF      (0196) 	mov  reg[AMX_IN],15 //setup Mux so that Next ADC sample is a differential Ip Vs Ia (voltage across pump current sense resistor, P0[7] Vs P0[6]
                                        (0197) 	//mov  reg[AMX_IN],9 //cal lin
                                        (0198) 	//or reg[PRT2DR],128 //set Ri_Out Pin
077A: 43 00 04 OR    REG[0x0],0x4       (0199) 	or reg[PRT0DR],4 //set Ri_Out Pin
077D: 5F 27 1E MOV   [0x27],[0x1E]      (0200)     mov [_Ri_Min_x1],[ADCINC_iResult + LowByte]
0780: 2E 29 01 OR    [0x29],0x1         (0201)     or [_ADC_IF],1 // Set ADC_IF[0] to indicate that new Ri_Min data is available
0783: 55 25 02 MOV   [0x25],0x2         (0202) 	mov [_ADC_Counter],2
                                        (0203) 
0786: 80 1E    JMP   0x07A5             (0204)     jmp Cont
                                        (0205) 
                                        (0206)     ADC_2://Voltage Across Pump Current sense resistor
                                        (0207) 	//and reg[PRT2DR],127 //clear Ri_Out Pin, Next ADC sample is not the Ri_Min, but Ri_Out is cleared so that ~1khz AC signal is mantained
0788: 41 00 FB AND   REG[0x0],0xFB      (0208) 	and reg[PRT0DR],251 //clear Ri_Out Pin so that the next ADC sample will Acquire the Trough (Ri_Min) of AC coupled Temperature sense signal 
078B: 5F 28 1E MOV   [0x28],[0x1E]      (0209)     mov [_ip_x1],[ADCINC_iResult + LowByte]
078E: 2E 29 04 OR    [0x29],0x4         (0210)     or [_ADC_IF],4 // Set ADC_IF[2] to indicate that new VR data is available
0791: 55 25 03 MOV   [0x25],0x3         (0211) 	mov [_ADC_Counter],3
0794: 80 10    JMP   0x07A5             (0212) 	jmp Cont
                                        (0213) 	
                                        (0214) 	ADC_3://Voltage Across Pump Current sense resistor again, this ADC sample is need to keep timing on the ~1khz AC Temperature Sense Signal so might as well get another Sample of VR
                                        (0215) 	//or reg[PRT2DR],128 //Set Ri_Out Pin so that the next ADC sample will Acquire the Peak (Ri_Max) of AC coupled Temperature sense signal 
0796: 43 00 04 OR    REG[0x0],0x4       (0216) 	or reg[PRT0DR],4 //set Ri_Out Pin
0799: 62 60 00 MOV   REG[0x60],0x0      (0217) 	mov  reg[AMX_IN],0 // Setup Mux so that Next ADC sample is differential Ri_in Vs Vref, P0[1] Vs P0[0]
079C: 5F 28 1E MOV   [0x28],[0x1E]      (0218) 	mov [_ip_x1],[ADCINC_iResult + LowByte]
079F: 2E 29 04 OR    [0x29],0x4         (0219) 	or [_ADC_IF],4 // Set ADC_IF[2] to indicate that new VR data is available
07A2: 55 25 00 MOV   [0x25],0x0         (0220)     mov [_ADC_Counter],0
                                        (0221) 	
                                        (0222) 	Cont:
                                        (0223) 	//14Point7 ASM Code End
                                        (0224) 	
                                        (0225)     ;  Sample data is now in iResult
                                        (0226)     ;
                                        (0227)     ;  NOTE: This interrupt service routine has already
                                        (0228)     ;  preserved the values of the A CPU register. If
                                        (0229)     ;  you need to use the X register you must preserve
                                        (0230)     ;  its value and restore it before the return from
                                        (0231)     ;  interrupt.
                                        (0232)     ;---------------------------------------------------
                                        (0233)     ; Insert your custom code above this banner
                                        (0234)     ;---------------------------------------------------
                                        (0235)     ;@PSoC_UserCode_END@ (Do not change this line.)
07A5: 18       POP   A                  (0236)     pop A
07A6: 3C 24 00 CMP   [0x24],0x0         (0237)     cmp [ADCINC_bNumSamples],0
                                        (0238) if5: 
07A9: B0 0E    JNZ   0x07B8             (0239)     jnz endif5 ; Number of samples is zero
07AB: 55 23 00 MOV   [0x23],0x0         (0240)     mov [ADCINC_fMode],0
07AE: 55 22 00 MOV   [0x22],0x0         (0241)     mov [ADCINC_bState],0
07B1: 41 87 EF AND   REG[0x87],0xEF     
07B4: 41 86 DF AND   REG[0x86],0xDF     
                                        (0242)     ADCINC_ENABLE_INTEGRATOR_M
07B7: 7E       RETI                     (0243)     reti       
                                        (0244) endif5:
07B8: 7A 24    DEC   [0x24]             (0245)     dec [ADCINC_bNumSamples]
                                        (0246) if6:
07BA: A0 0E    JZ    0x07C9             (0247)     jz endif6  ; count not zero
07BC: 55 23 00 MOV   [0x23],0x0         (0248)     mov [ADCINC_fMode],0
07BF: 55 22 00 MOV   [0x22],0x0         (0249)     mov [ADCINC_bState],0
07C2: 41 87 EF AND   REG[0x87],0xEF     
07C5: 41 86 DF AND   REG[0x86],0xDF     
                                        (0250)     ADCINC_ENABLE_INTEGRATOR_M
07C8: 7E       RETI                     (0251)     reti       
07C9: 41 E1 FE AND   REG[0xE1],0xFE     
                                        (0252) endif6:
                                        (0253)     ;All samples done
                                        (0254)     ADCINC_STOPADC_M
07CC: 7E       RETI                     (0255)  reti 
FILE: lib\adcinc.asm                    (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: ADCINC.asm
                                        (0004) ;;   Version: 1.1, Updated on 2006/02/03 at 09:10:49
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Assembler source for the ADCINC A/D Converter
                                        (0008) ;;               User Module with 1st-order modulator.
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API
                                        (0014) ;;        function returns. Even though these registers may be preserved now,
                                        (0015) ;;        there is no guarantee they will be preserved in future releases.
                                        (0016) ;;-----------------------------------------------------------------------------
                                        (0017) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0018) ;;*****************************************************************************
                                        (0019) ;;*****************************************************************************
                                        (0020) 
                                        (0021) include "m8c.inc"
                                        (0022) include "memory.inc"
                                        (0023) 
                                        (0024) include "ADCINC.inc"
                                        (0025) 
                                        (0026) 
                                        (0027) ;-----------------------------------------------
                                        (0028) ;  Global Symbols
                                        (0029) ;-----------------------------------------------
                                        (0030) export  ADCINC_Start
                                        (0031) export _ADCINC_Start
                                        (0032) export  ADCINC_SetPower
                                        (0033) export _ADCINC_SetPower
                                        (0034) export  ADCINC_Stop
                                        (0035) export _ADCINC_Stop
                                        (0036) export  ADCINC_GetSamples
                                        (0037) export _ADCINC_GetSamples
                                        (0038) export  ADCINC_StopADC
                                        (0039) export _ADCINC_StopADC
                                        (0040) export  ADCINC_fIsDataAvailable
                                        (0041) export _ADCINC_fIsDataAvailable
                                        (0042) export  ADCINC_iClearFlagGetData
                                        (0043) export _ADCINC_iClearFlagGetData
                                        (0044) export  ADCINC_wClearFlagGetData
                                        (0045) export _ADCINC_wClearFlagGetData
                                        (0046) export  ADCINC_cClearFlagGetData
                                        (0047) export _ADCINC_cClearFlagGetData
                                        (0048) export  ADCINC_bClearFlagGetData
                                        (0049) export _ADCINC_bClearFlagGetData
                                        (0050) export  ADCINC_iGetData
                                        (0051) export _ADCINC_iGetData
                                        (0052) export  ADCINC_wGetData
                                        (0053) export _ADCINC_wGetData
                                        (0054) export  ADCINC_bGetData
                                        (0055) export _ADCINC_bGetData
                                        (0056) export  ADCINC_cGetData
                                        (0057) export _ADCINC_cGetData
                                        (0058) export  ADCINC_fClearFlag
                                        (0059) export _ADCINC_fClearFlag
                                        (0060) export  ADCINC_WritePulseWidth
                                        (0061) export _ADCINC_WritePulseWidth
                                        (0062) 
                                        (0063) 
                                        (0064) AREA bss (RAM,REL)
                                        (0065) 
                                        (0066) ;-----------------------------------------------
                                        (0067) ;  Constant Definitions
                                        (0068) ;-----------------------------------------------
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) 
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) 
                                        (0077) .SECTION
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;  FUNCTION NAME: ADCINC_Start
                                        (0080) ;
                                        (0081) ;  DESCRIPTION: Applies power setting to the module's analog PSoc block.
                                        (0082) ;               and starts the PWM
                                        (0083) ;-----------------------------------------------------------------------------
                                        (0084) ;
                                        (0085) ;  ARGUMENTS:    The A register contains the power setting.
                                        (0086) ;  RETURNS:      Nothing.
                                        (0087) ;  SIDE EFFECTS:
                                        (0088) ;    The A and X registers may be modified by this or future implementations
                                        (0089) ;    of this function.  When necessary, it is the calling function's
                                        (0090) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0091) ;    functions.
                                        (0092) ;
                                        (0093)  ADCINC_Start:
                                        (0094) _ADCINC_Start:
                                        (0095)    RAM_PROLOGUE RAM_USE_CLASS_1
07CD: 43 E7 C0 OR    REG[0xE7],0xC0     (0096)    or    reg[DEC_CR1],c0h
07D0: 90 0D    CALL  _ADCINC_SetPower   (0097)    call  ADCINC_SetPower
07D2: 43 86 20 OR    REG[0x86],0x20     
07D5: 43 87 10 OR    REG[0x87],0x10     
                                        (0098)    ADCINC_RESET_INTEGRATOR_M
07D8: 62 21 FF MOV   REG[0x21],0xFF     (0099)    mov   reg[ADCINC_PWMdr1],ffh
07DB: 43 23 01 OR    REG[0x23],0x1      (0100)    or    reg[ADCINC_PWMcr0],01h                      ; start PWM
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
07DE: 7F       RET                      (0102)    ret
                                        (0103) .ENDSECTION
                                        (0104) 
                                        (0105)    
                                        (0106) .SECTION
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;  FUNCTION NAME: ADCINC_SetPower
                                        (0109) ;
                                        (0110) ;  DESCRIPTION: Applies power setting to the module's analog PSoc block.
                                        (0111) ;-----------------------------------------------------------------------------
                                        (0112) ;
                                        (0113) ;  ARGUMENTS:    The A register contains the power setting.
                                        (0114) ;  RETURNS:      Nothing.
                                        (0115) ;  SIDE EFFECTS:
                                        (0116) ;    The A and X registers may be modified by this or future implementations
                                        (0117) ;    of this function.  When necessary, it is the calling function's
                                        (0118) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0119) ;    functions.
                                        (0120) ;
                                        (0121)  ADCINC_SetPower:
                                        (0122) _ADCINC_SetPower:
                                        (0123)    RAM_PROLOGUE RAM_USE_CLASS_2
07DF: 4F       MOV   X,SP               (0124)    mov  X,SP                                     ; Set up Stack frame
07E0: 21 03    AND   A,0x3              (0125)    and  A,03h                                    ; Ensure value is legal
07E2: 08       PUSH  A                  (0126)    push A
07E3: 5D 87    MOV   A,REG[0x87]        (0127)    mov  A,reg[ADCINC_AtoDcr3]                    ; First SC block:
07E5: 21 FC    AND   A,0xFC             (0128)    and  A,~03h                                   ;   clear power bits to zero
07E7: 2B 00    OR    A,[X+0]            (0129)    or   A,[ X ]                                  ;   establish new value
07E9: 60 87    MOV   REG[0x87],A        (0130)    mov  reg[ADCINC_AtoDcr3],A                    ;   change the actual setting
07EB: 18       POP   A                  (0131)    pop  A
                                        (0132)    RAM_EPILOGUE RAM_USE_CLASS_2
07EC: 7F       RET                      (0133)    ret
07ED: 41 87 EF AND   REG[0x87],0xEF     
07F0: 41 86 DF AND   REG[0x86],0xDF     
                                        (0134) .ENDSECTION
                                        (0135) 
                                        (0136) .SECTION
                                        (0137) ;-----------------------------------------------------------------------------
                                        (0138) ;  FUNCTION NAME: ADCINC_Stop
                                        (0139) ;
                                        (0140) ;  DESCRIPTION:   Removes power from the module's analog PSoc block.
                                        (0141) ;                 and turns off PWM
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) ;  ARGUMENTS:     None.
                                        (0145) ;  RETURNS:       Nothing.
                                        (0146) ;  SIDE EFFECTS:
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  When necessary, it is the calling function's
                                        (0149) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0150) ;    functions.
                                        (0151) ;
                                        (0152)  ADCINC_Stop:
                                        (0153) _ADCINC_Stop:
                                        (0154)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0155)    ADCINC_STOPADC_M
                                        (0156)    and  reg[ADCINC_AtoDcr3], ~03h
                                        (0157)    and  reg[ADCINC_PWMcr0], ~01h ; stop PWM
                                        (0158)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0159)    ret
                                        (0160) .ENDSECTION
                                        (0161) 
                                        (0162) 
                                        (0163) .SECTION
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;  FUNCTION NAME: ADCINC_GetSamples
                                        (0166) ;
                                        (0167) ;  DESCRIPTION: Activates interrupts for this user module and begins sampling.
                                        (0168) ;-----------------------------------------------------------------------------
                                        (0169) ;
                                        (0170) ;  ARGUMENTS:    A register contain number of samples
                                        (0171) ;  RETURNS:      Nothing.
                                        (0172) ;  SIDE EFFECTS:
                                        (0173) ;    The A and X registers may be modified by this or future implementations
                                        (0174) ;    of this function.  When necessary, it is the calling function's
                                        (0175) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0176) ;    functions.
                                        (0177) ;          
                                        (0178)  ADCINC_GetSamples:
                                        (0179) _ADCINC_GetSamples:
                                        (0180)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0181)    RAM_SETPAGE_CUR >ADCINC_fMode
                                        (0182)    ADCINC_ENABLE_INTEGRATOR_M
07F3: 55 23 00 MOV   [0x23],0x0         (0183)    mov [ADCINC_fMode],0
07F6: 55 22 00 MOV   [0x22],0x0         (0184)    mov [ADCINC_bState],0
07F9: 53 24    MOV   [0x24],A           (0185)    mov [ADCINC_bNumSamples],A
07FB: 5D 22    MOV   A,REG[0x22]        (0186)    mov A, reg[ADCINC_PWMdr2]
07FD: B0 04    JNZ   0x0802             (0187)    jnz  .SkipPulseWrite
07FF: 62 22 01 MOV   REG[0x22],0x1      (0188)    mov reg[ADCINC_PWMdr2], 1
0802: 62 DB FE MOV   REG[0xDB],0xFE     
0805: 43 E1 01 OR    REG[0xE1],0x1      
                                        (0189) .SkipPulseWrite:
                                        (0190)    ADCINC_STARTADC_M  ;enable interrupt 
                                        (0191)    RAM_EPILOGUE RAM_USE_CLASS_4 
0808: 7F       RET                      (0192)    ret
0809: 55 21 00 MOV   [0x21],0x0         
080C: 58 1D    MOV   X,[0x1D]           
080E: 51 1E    MOV   A,[0x1E]           
0810: 3C 21 00 CMP   [0x21],0x0         
0813: BF F5    JNZ   _ADCINC_StopADC|_ADCINC_fIsDataAvailable|_ADCINC_iClearFlagGetData|ADCINC_wClearFlagGetData|ADCINC_iClearFlagGetData|_ADCINC_wClearFlagGetData
                                        (0193) .ENDSECTION
                                        (0194) 
                                        (0195) 
                                        (0196) .SECTION
                                        (0197) ;-----------------------------------------------------------------------------
                                        (0198) ;  FUNCTION NAME: ADCINC_StopADC
                                        (0199) ;
                                        (0200) ;  DESCRIPTION: Shuts down the A/D is an orderly manner.  The interrupt
                                        (0201) ;               is disabled but the PWM output is still active.
                                        (0202) ;               Integrator is reset
                                        (0203) ;-----------------------------------------------------------------------------
                                        (0204) ;
                                        (0205) ;  ARGUMENTS:    None.
                                        (0206) ;  RETURNS:      Nothing.
                                        (0207) ;  SIDE EFFECTS:
                                        (0208) ;    The A and X registers may be modified by this or future implementations
                                        (0209) ;    of this function.  When necessary, it is the calling function's
                                        (0210) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0211) ;    functions.
                                        (0212) ;
                                        (0213)  ADCINC_StopADC:
                                        (0214) _ADCINC_StopADC:
                                        (0215)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0216)    ADCINC_STOPADC_M
                                        (0217)    ADCINC_RESET_INTEGRATOR_M
                                        (0218)    RAM_EPILOGUE RAM_USE_CLASS_1 
                                        (0219)  ret
                                        (0220) .ENDSECTION
                                        (0221) 
                                        (0222) 
                                        (0223) .SECTION
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;  FUNCTION NAME: ADCINC_fIsDataAvailable
                                        (0226) ;
                                        (0227) ;  DESCRIPTION: Returns the status of the A/D Data
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  ARGUMENTS:    None.
                                        (0230) ;  RETURNS:      fastcall BOOL DataAvailable returned in the A register
                                        (0231) ;  SIDE EFFECTS:
                                        (0232) ;    The A and X registers may be modified by this or future implementations
                                        (0233) ;    of this function.  When necessary, it is the calling function's
                                        (0234) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0235) ;    functions.
                                        (0236) ;          
                                        (0237)  ADCINC_fIsDataAvailable:
                                        (0238) _ADCINC_fIsDataAvailable:
                                        (0239)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0240)    ADCINC_fIsDataAvailable_M   
                                        (0241)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0242)    ret
                                        (0243) .ENDSECTION
                                        (0244) 
                                        (0245) 
                                        (0246) .SECTION
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;  FUNCTION NAME:  ADCINC_iClearFlagGetData
                                        (0249) ;                  ADCINC_wClearFlagGetData
                                        (0250) ;
                                        (0251) ;  DESCRIPTION:    Clears the fStatus and places ADC data in iResult A/D.
                                        (0252) ;                  Flag is checked after trandfer to insure valid data.
                                        (0253) ;                  available. Also clears the DATA_READY flag. 
                                        (0254) ;-----------------------------------------------------------------------------
                                        (0255) ;  ARGUMENTS:    None.
                                        (0256) ;  RETURNS:      fastcall int iResult returned in the X and A register
                                        (0257) ;  SIDE EFFECTS:
                                        (0258) ;    The A and X registers may be modified by this or future implementations
                                        (0259) ;    of this function.  When necessary, it is the calling function's
                                        (0260) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0261) ;    functions.
                                        (0262) ;          
                                        (0263)  ADCINC_iClearFlagGetData:
                                        (0264) _ADCINC_iClearFlagGetData:
                                        (0265)  ADCINC_wClearFlagGetData:
                                        (0266) _ADCINC_wClearFlagGetData:
                                        (0267)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0268)    ADCINC_iClearFlagGetData_M   
                                        (0269)    RAM_EPILOGUE RAM_USE_CLASS_4
0815: 7F       RET                      (0270)    ret
                                        (0271) .ENDSECTION
                                        (0272) 
                                        (0273) 
                                        (0274) .SECTION
                                        (0275) ;-----------------------------------------------------------------------------
                                        (0276) ;  FUNCTION NAME:  ADCINC_cClearFlagGetData
                                        (0277) ;                  ADCINC_bClearFlagGetData
                                        (0278) ;
                                        (0279) ;  DESCRIPTION:    Clears the fStatus and places ADC data in iResult A/D.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;  ARGUMENTS:    None.
                                        (0282) ;  RETURNS:      fastcall int iResult returned in the X and A register
                                        (0283) ;  SIDE EFFECTS:
                                        (0284) ;    The A and X registers may be modified by this or future implementations
                                        (0285) ;    of this function.  When necessary, it is the calling function's
                                        (0286) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0287) ;    functions.
                                        (0288) ;          
                                        (0289)  ADCINC_cClearFlagGetData:
                                        (0290) _ADCINC_cClearFlagGetData:
                                        (0291)  ADCINC_bClearFlagGetData:
                                        (0292) _ADCINC_bClearFlagGetData:
                                        (0293)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0294)    ADCINC_bClearFlagGetData_M     
                                        (0295)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0296)    ret
                                        (0297) .ENDSECTION
                                        (0298) .SECTION
                                        (0299) ;-----------------------------------------------------------------------------
                                        (0300) ;  FUNCTION NAME:  ADCINC_iGetData
                                        (0301) ;                  ADCINC_wGetData
                                        (0302) ;
                                        (0303) ;  DESCRIPTION:     Returns the data from the A/D.  Does not check if data is
                                        (0304) ;                   available.
                                        (0305) ;-----------------------------------------------------------------------------
                                        (0306) ;  ARGUMENTS:    None.
                                        (0307) ;  RETURNS:      fastcall int iResult is returned in the X,A registers
                                        (0308) ;  SIDE EFFECTS:
                                        (0309) ;    The A and X registers may be modified by this or future implementations
                                        (0310) ;    of this function.  When necessary, it is the calling function's
                                        (0311) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0312) ;    functions.
                                        (0313) ;          
                                        (0314)  ADCINC_iGetData:
                                        (0315) _ADCINC_iGetData:
                                        (0316)  ADCINC_wGetData:
                                        (0317) _ADCINC_wGetData:
                                        (0318)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0319)    ADCINC_wGetData_M          
                                        (0320)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0321)    ret
                                        (0322) .ENDSECTION
                                        (0323) .SECTION
                                        (0324) ;-----------------------------------------------------------------------------
                                        (0325) ;  FUNCTION NAME:  ADCINC_bGetData
                                        (0326) ;                  ADCINC_cGetData
                                        (0327) ;
                                        (0328) ;  DESCRIPTION:     Returns the data from the A/D.  Does not check if data is
                                        (0329) ;                   available.
                                        (0330) ;-----------------------------------------------------------------------------
                                        (0331) ;  ARGUMENTS:    None.
                                        (0332) ;  RETURNS:      fastcall CHAR cData returned in the A register
                                        (0333) ;  SIDE EFFECTS:
                                        (0334) ;    The A and X registers may be modified by this or future implementations
                                        (0335) ;    of this function.  When necessary, it is the calling function's
                                        (0336) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0337) ;    functions.
                                        (0338) ;          
                                        (0339)  ADCINC_bGetData:
                                        (0340) _ADCINC_bGetData:
                                        (0341)  ADCINC_cGetData:
                                        (0342) _ADCINC_cGetData:
                                        (0343)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0344)    ADCINC_cGetData_M        
                                        (0345)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0346)    ret
                                        (0347) .ENDSECTION
                                        (0348) 
                                        (0349) 
                                        (0350) .SECTION
                                        (0351) ;-----------------------------------------------------------------------------
                                        (0352) ;  FUNCTION NAME: ADCINC_fClearFlag
                                        (0353) ;
                                        (0354) ;  DESCRIPTION: Clears the data ready flag.
                                        (0355) ;-----------------------------------------------------------------------------
                                        (0356) ;  ARGUMENTS:    None.
                                        (0357) ;  RETURNS:      Nothing.
                                        (0358) ;  SIDE EFFECTS: 
                                        (0359) ;    The DATA_READY flag is cleared.
                                        (0360) ;    The A and X registers may be modified by this or future implementations
                                        (0361) ;    of this function.  When necessary, it is the calling function's
                                        (0362) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0363) ;    functions.
                                        (0364) ;          
                                        (0365)  ADCINC_fClearFlag:
                                        (0366) _ADCINC_fClearFlag:
                                        (0367)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0368)    ADCINC_fClearFlag_M    
                                        (0369)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0370)    ret
                                        (0371) .ENDSECTION
                                        (0372) 
                                        (0373) 
                                        (0374) .SECTION
                                        (0375) ;-----------------------------------------------------------------------------
                                        (0376) ;  FUNCTION NAME: ADCINC_WritePulseWidth
                                        (0377) ;
                                        (0378) ;  DESCRIPTION:
                                        (0379) ;     Write the 8-bit period value into the compare register (DR2).
                                        (0380) ;-----------------------------------------------------------------------------
                                        (0381) ;
                                        (0382) ;  ARGUMENTS: fastcall BYTE bPeriodValue (passed in A)
                                        (0383) ;  RETURNS:   Nothing
                                        (0384) ;  SIDE EFFECTS:
                                        (0385) ;    The A and X registers may be modified by this or future implementations
                                        (0386) ;    of this function.  When necessary, it is the calling function's
                                        (0387) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0388) ;    functions.
                                        (0389) ;
                                        (0390)  ADCINC_WritePulseWidth:
                                        (0391) _ADCINC_WritePulseWidth:
                                        (0392)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0393)    ADCINC_WritePulseWidth_M  
                                        (0394)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0395)    ret
                                        (0396) .ENDSECTION
                                        (0397) 
                                        (0398) ; End of File ADCINC.asm
FILE: I:\PSOCDO~1\WBOOS_~2\DSTAGE~1\DSTAGE~1\main.c
(0001) // =========================================================================================
(0002) // === DStage WBOOS - SLC Free tribute =====================================================
(0003) // =========================================================================================
(0004) // This program is a heavily modified version of the 
(0005) // 14point7 SLC Free open wideband oxygen sensor controller
(0006) //
(0007) // Version 1.2.0 2025.02.02
(0008) // 
(0009) // email: dstagegarage@gmail.com
(0010) // YT: www.youtube.com/DStageGarage
(0011) // GitHub: https://github.com/DStageGarage/WBOOS/
(0012) // =========================================================================================
(0013) 
(0014) //----------------------------------------------------------------------------
(0015) // C main line
(0016) //----------------------------------------------------------------------------
(0017) #include <m8c.h>        // part specific constants and macros
(0018) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0019) extern BYTE ADC_Counter; //Variable Declared in ADCININT.asm
(0020) extern BYTE Ri_Max_x1; //Variable Declared in ADCININT.asm
(0021) extern BYTE Ri_Min_x1; //Variable Declared in ADCININT.asm
(0022) extern BYTE ip_x1; //Variable Declared in ADCININT.asm
(0023) extern BYTE ADC_IF; //Variable Declared in ADCININT.asm
(0024) extern BYTE Sleep_Counter; //Variable Declared in SleepTimerINT.asm
(0025) 
(0026) #define Vout_Lookup_Counter_Set 25
(0027) 
(0028) //============================================
(0029) // Configure system here
(0030) //============================================
(0031) // set how often display gets refreshed, 50 is a default value meaning roughly 50x2ms=100ms or 10 times per second
(0032) #define LCD_Counter_Set 50
(0033) 
(0034) // define outout signal, Lin_Out (wide band) and NB_Out (narrow band) can be both present at once
(0035) #define Lin_Out
(0036) #define NB_Out
(0037) 
(0038) // define display type and content following these guidlines:
(0039) //   - LCD Lmbda/AFR digits cannot be used at the same time
(0040) //   - LCD Lambda/Temperature Graph cannot be used at the same time
(0041) //   - LCD Temperature digits can be used together with Lambda/AFR digits
(0042) //   - LED and LCD cannot be used at the same time
(0043) //   - LED AFR and Lambda can be used at the same time and switched with a pin
(0044) //   - comment out #define for unused options
(0045) // #define LCD_Lambda_Graph
(0046) //#define LCD_AFR_digits
(0047) // #define LCD_Lambda_digits
(0048) //#define LCD_Temperature_Graph
(0049) // #define LCD_Temperature_digits
(0050) //#define DStage_logo
(0051) #define LED_AFR
(0052) #define LED_Lambda
(0053) 
(0054) // Define port/pin for LED display controller TM1637
(0055) #define DIO_PORT 1
(0056) #define DIO_PIN 0
(0057) #define CLK_PORT 1
(0058) #define CLK_PIN 1
(0059) #define SWITCH_PORT 1
(0060) #define SWITCH_PIN 7
(0061) 
(0062) /*#define DIO_PORT 2
(0063) #define DIO_PIN 7
(0064) #define CLK_PORT 1
(0065) #define CLK_PIN 7
(0066) #define SWITCH_PORT 1
(0067) #define SWITCH_PIN 1*/
(0068) //============================================
(0069) 
(0070) #define SWPIN (1 << SWITCH_PIN)
(0071) #if SWITCH_PORT == 1
(0072) 	#define SWPORT PRT1DR
(0073) 	#define	SWDM2 PRT1DM2
(0074) 	#define	SWDM1 PRT1DM1
(0075) 	#define	SWDM0 PRT1DM0
(0076) #elif SWITCH_PORT == 2
(0077) 	#define SWPORT PRT2DR
(0078) 	#define	SWDM2 PRT2DM2
(0079) 	#define	SWDM1 PRT2DM1
(0080) 	#define	SWDM0 PRT2DM0
(0081) #else
(0082) 	#define SWPORT PRT0DR
(0083) 	#define	SWDM2 PRT0DM2
(0084) 	#define	SWDM1 PRT0DM1
(0085) 	#define	SWDM0 PRT0DM0
(0086) #endif
(0087) 
(0088) 
(0089) //#define PID_Tune
(0090) #define Ri_Filter_Strength 4
(0091) #define ip_Filter_Strength 4
(0092) 
(0093) #ifdef PID_Tune
(0094) 	INT Ri_Mid_Target= 286;//271; //
(0095) 	INT Ia_PID_Kp = 25; //35;
(0096) 	INT Ia_PID_Ki = 4; //8;
(0097) 	INT Ia_Output_Bias = 256;
(0098) 	INT Ri_Delta_Target=143; //PID Target peak to peak Voltage of Nermest Cell
(0099) 	INT Heater_PID_Kp =-72;
(0100) 	INT Heater_PID_Ki =-4;
(0101) 	INT Heater_PID_Output_Bias =128;
(0102) #else
(0103) 	#define Ri_Mid_Target 286 //271 //256+14.769 = 2.53v = 2.08v(VGND) + 0.45v, PID Target Voltage of Nermest Cell
(0104) 	#define Ia_PID_Kp 25
(0105) 	#define Ia_PID_Ki 4
(0106) 	#define Ia_Output_Bias 256
(0107) 	#define Ri_Delta_Target 143 //PID Target peak to peak Voltage of Nermest Cell
(0108) 	#define Heater_PID_Kp -72
(0109) 	#define Heater_PID_Ki -4
(0110) 	#define Heater_PID_Output_Bias 128
(0111) #endif
(0112) 
(0113) #ifdef Lin_Out
(0114) 	#define ip_to_Vout_Lookup_Start 135
(0115) 	#define ip_to_Vout_Lookup_Size 158
(0116) 	const BYTE ip_to_Vout_Lookup[ip_to_Vout_Lookup_Size] = {0,1,1,2,3,4,4,5,6,7,8,8,9,10,11,12,12,13,14,15,16,17,17,18,19,20,21,22,22,23,24,25,26,27,27,28,29,30,31,32,33,34,34,35,36,37,38,39,40,41,42,43,44,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,79,80,81,82,83,84,86,87,88,89,90,91,92,94,95,96,97,98,100,101,102,103,105,106,107,108,110,111,112,113,115,116,117,119,120,123,126,129,132,135,138,141,144,147,151,154,157,161,164,168,171,175,178,182,186,190,194,197,201,206,210,214,218,222,227,231,236,240,245,250,255}; 
(0117) #endif
(0118) 
(0119) #ifdef LCD_Lambda_Graph
(0120) 	#define ip_to_Lambda_Lookup_Start 135
(0121) 	#define ip_to_Lambda_Lookup_Size 158
(0122) 	const BYTE ip_to_Graph_Lookup[ip_to_Lambda_Lookup_Size]={1,8,8,9,9,9,9,9,10,10,10,10,10,11,11,11,11,12,12,12,12,12,13,13,13,13,14,14,14,14,14,15,15,15,15,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,22,22,22,22,23,23,23,23,24,24,24,25,25,25,25,26,26,26,26,27,27,27,28,28,28,28,29,29,29,30,30,30,31,31,31,31,32,32,32,33,33,33,34,34,34,35,35,35,36,36,36,37,37,37,38,38,38,39,39,39,40,40,41,42,42,43,44,45,46,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,72,73,75,80};
(0123) 												 // lambda = 0.68  0.69      0.70           0.71        0.72           0.73        0.74           0.75        0.76           0.77        0.78        0.79        0.8         0.81        0.82           0.83     0.84     0.85        0.86        0.87     0.88        0.89     0.90     0.91        0.92     0.93     0.94     0.95     0.96     0.97     0.98     0.99     1.00
(0124) 												 // AFR    = 10.0  10.14     10.3           10.44       10.58          10.73       10.88          11.03
(0125) #endif
(0126) 
(0127) #if defined LCD_AFR_digits || defined LED_AFR 
(0128) 	#define ip_to_AFR_Lookup_Start 135
(0129) 	#define ip_to_AFR_Lookup_Size 158
(0130) 	const BYTE ip_to_AFR_Lookup[ip_to_AFR_Lookup_Size] = {0xFC,0x00,0x00,0x01,0x01,0x02,0x02,0x02,0x02,0x03,0x03,0x03,0x04,0x04,0x04,0x05,0x05,0x05,0x05,0x06,0x06,0x07,0x07,0x07,0x07,0x08,0x08,0x09,0x09,0x09,0x09,
(0131) 														  0x10,0x10,0x11,0x11,0x11,0x12,0x12,0x12,0x13,0x13,0x13,0x13,0x14,0x14,0x15,0x15,0x15,0x16,0x16,0x16,0x17,0x17,0x17,0x18,0x18,0x18,0x19,0x19,
(0132) 														  0x20,0x20,0x20,0x21,0x21,0x22,0x22,0x22,0x23,0x23,0x24,0x24,0x24,0x25,0x25,0x25,0x26,0x26,0x27,0x27,0x27,0x28,0x28,0x29,0x29,
(0133) 														  0x30,0x30,0x31,0x31,0x31,0x32,0x32,0x33,0x33,0x34,0x34,0x35,0x35,0x35,0x36,0x36,0x37,0x37,0x38,0x38,0x38,0x39,
(0134) 														  0x40,0x40,0x40,0x41,0x42,0x42,0x42,0x43,0x44,0x44,0x44,0x45,0x45,0x46,0x47,0x47,0x48,0x49,
(0135) 														  0x51,0x52,0x53,0x54,0x55,0x56,0x58,0x59,
(0136) 														  0x60,0x62,0x63,0x64,0x66,0x67,0x69,
(0137) 														  0x70,0x71,0x73,0x75,0x76,0x77,0x79,
(0138) 														  0x81,0x82,0x84,0x85,0x87,0x89,
(0139) 														  0x91,0x93,0x94,0x96,0x98,
(0140) 														  0xFE}; 
(0141) #endif
(0142) 
(0143) #if defined LCD_Lambda_digits || defined LED_Lambda
(0144) 	#define ip_to_LambdaD_Lookup_Start 135
(0145) 	#define ip_to_LambdaD_Lookup_Size 158
(0146) 	const BYTE ip_to_Lambda_Lookup[ip_to_LambdaD_Lookup_Size]= {0xFC,0x68,0x68,0x69,0x69,0x69,0x69,0x69,
(0147) 																0x70,0x70,0x70,0x70,0x70,0x71,0x71,0x71,0x71,0x72,0x72,0x72,0x72,0x72,0x73,0x73,0x73,0x73,0x74,0x74,0x74,0x74,0x74,0x75,0x75,0x75,0x75,0x76,0x76,0x76,0x76,0x76,0x77,0x77,0x77,0x77,0x78,0x78,0x78,0x78,0x79,0x79,0x79,0x79,
(0148) 																0x80,0x80,0x80,0x80,0x81,0x81,0x81,0x81,0x82,0x82,0x82,0x82,0x83,0x83,0x83,0x83,0x84,0x84,0x84,0x85,0x85,0x85,0x85,0x86,0x86,0x86,0x86,0x87,0x87,0x87,0x88,0x88,0x88,0x88,0x89,0x89,0x89,
(0149) 																0x90,0x90,0x90,0x91,0x91,0x91,0x91,0x92,0x92,0x92,0x93,0x93,0x93,0x94,0x94,0x94,0x95,0x95,0x95,0x96,0x96,0x96,0x97,0x97,0x97,0x98,0x98,0x98,0x99,0x99,0x99,
(0150) 																0x00,0x00,0x01,0x02,0x02,0x03,0x04,0x05,0x06,0x06,0x07,0x08,0x09,
(0151) 																0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,
(0152) 																0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,
(0153) 																0x30,0x31,0x32,0x33,0x35,
(0154) 																0xFE};
(0155) #endif
(0156) 
(0157) #ifdef LCD_Temperature_Graph
(0158) 	#define Ri_Delta_to_Temperature_C_Start 113
(0159) 	#define Ri_Delta_to_Temperature_C_Size 75
(0160) 	const BYTE Ri_Delta_to_Graph[Ri_Delta_to_Temperature_C_Size]={80,78,77,75,74,73,71,70,68,67,65,64,63,61,60,59,58,56,55,54,52,51,50,49,48,46,45,44,43,42,41,40,39,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,18,17,16,15,14,13,12,11,11,10,9,8,7,6,5,5,4,3,2,1,1,0};
(0161) #endif
(0162) 
(0163) #ifdef LCD_Temperature_digits
(0164) 	#define Ri_Delta_to_Temperature_C_dig_Start 113
(0165) 	#define Ri_Delta_to_Temperature_C_dig_Size 75
(0166) 	const BYTE Ri_Delta_to_dig[Ri_Delta_to_Temperature_C_dig_Size]={0xFE,
(0167) 																	0x18,0x17,0x15,0x14,0x13,0x11,0x10,
(0168) 																	0x08,0x07,0x05,0x04,0x03,0x01,0x00,
(0169) 																	0x99,0x98,0x96,0x95,0x94,0x92,0x91,0x90,
(0170) 																	0x89,0x88,0x86,0x85,0x84,0x83,0x82,0x81,0x80,
(0171) 																	0x79,0x77,0x76,0x75,0x74,0x73,0x72,0x71,0x70,
(0172) 																	0x69,0x68,0x67,0x66,0x65,0x64,0x63,0x62,0x61,0x60,
(0173) 																	0x59,0x58,0x58,0x57,0x56,0x55,0x54,0x53,0x52,0x51,0x51,0x50,
(0174) 																	0x49,0x48,0x47,0x46,0x45,0x45,0x44,0x43,0x42,0x41,0x40,0xFC,};
(0175) #endif
(0176) 
(0177) #if defined LED_AFR || defined LED_Lambda
(0178) 	void TM1637_init(void);
(0179) 	void TM1637_setBrightness(BYTE, BYTE);
(0180) 	void TM1637_setSegments(BYTE*, BYTE, BYTE);
(0181) 	void TM1637_clear(void);
(0182) 	void TM1637_showNumberDec(int, BYTE, BYTE, BYTE);
(0183) 	void TM1637_showNumberDecEx(int, BYTE, BYTE, BYTE, BYTE);
(0184) 	void TM1637_showNumberHexEx(unsigned int, BYTE, BYTE, BYTE, BYTE);
(0185) 	void TM1637_showNumberBaseEx(BYTE, unsigned int, BYTE, BYTE, BYTE, BYTE);
(0186) 	void TM1637_start(void);
(0187) 	void TM1637_stop(void);
(0188) 	BYTE TM1637_writeByte(BYTE);
(0189) 	void TM1637_showDots(BYTE, BYTE*);
(0190) 	BYTE TM1637_encodeDigit(BYTE);
(0191) 	
(0192) 	//      A
(0193) 	//     ---
(0194) 	//  F |   | B
(0195) 	//     -G-
(0196) 	//  E |   | C
(0197) 	//     ---
(0198) 	//      D
(0199) 	const BYTE digitToSegment[] = {
(0200) 	// XGFEDCBA
(0201) 	0b00111111,    // 0
(0202) 	0b00000110,    // 1
(0203) 	0b01011011,    // 2
(0204) 	0b01001111,    // 3
(0205) 	0b01100110,    // 4
(0206) 	0b01101101,    // 5
(0207) 	0b01111101,    // 6
(0208) 	0b00000111,    // 7
(0209) 	0b01111111,    // 8
(0210) 	0b01101111,    // 9
(0211) 	//0b01110111,    // A
(0212) 	//0b01111100,    // b
(0213) 	//0b00111001,    // C
(0214) 	//0b01011110,    // d
(0215) 	//0b01111001,    // E
(0216) 	//0b01110001     // F
(0217) 	};
(0218) #endif
(0219) 
(0220) INT Ri_Mid_Error_Sum=0;
(0221) INT Ri_Mid;
(0222) INT Ri_Delta_Error_Sum=0;
(0223) INT Ri_Delta;
(0224) #define Ia_PID_Counter_Set 1
(0225) #define Heatup_Counter_Set 100
(0226) #define Heater_PID_Counter_Set 25
(0227) BYTE Heatup_Heater_Output=100;
(0228) 
(0229) INT Ri_Delta_Error;
(0230) INT Heater_Output;
(0231) INT Heater_Pout;
(0232) INT Heater_Iout;
(0233) 
(0234) //PID Controller, Input is Ri_Delta (The Peak to peak voltage on the Vs Port of the sensor) output is PWM8_Heater, PWM8_Heater is controlled such that Ri_Delta is maintained at 80 (80 =750C)
(0235) //Only a PI controller is used as adding the D term does not effect performance 
(0236) //Everything is inflated by a factor of 4 so that floating point is avioded
(0237) void Heater_PID(void) // Ned to run this when counter >50
(0238) {
(0239) 
(0240) 	Ri_Delta_Error=Ri_Delta_Target-Ri_Delta;
__UserModules_end|_ADCINC_wGetData|ADCINC_bClearFlagGetData|_ADCINC_fClearFlag|_ADCINC_iGetData|ADCINC_cGetData|_ADCINC_cClearFlagGetData|_ADCINC_bClearFlagGetData|_ADCINC_cGetData|_ADCINC_WritePulseWidth|_ADCINC_bGetData|ADCINC_wGetData|_Heater_PID|...:
    0816: 50 8F    MOV   A,0x8F
    0818: 12 46    SUB   A,[Ri_Delta+1]
    081A: 53 44    MOV   [Ri_Delta_Error+1],A
    081C: 50 00    MOV   A,0x0
    081E: 1A 45    SBB   A,[Ri_Delta]
    0820: 53 43    MOV   [Ri_Delta_Error],A
(0241) 	//Put limits on Error so PID does not go Fubar, and also so that the worst case multiplication does not overflow
(0242) 	if (Ri_Delta_Error>(-127*16/Heater_PID_Kp))
    0822: 50 1C    MOV   A,0x1C
    0824: 12 44    SUB   A,[Ri_Delta_Error+1]
    0826: 51 43    MOV   A,[Ri_Delta_Error]
    0828: 31 80    XOR   A,0x80
    082A: 53 0D    MOV   [__rX],A
    082C: 50 80    MOV   A,0x80
    082E: 1A 0D    SBB   A,[__rX]
    0830: D0 07    JNC   0x0838
(0243) 	{
(0244) 		Ri_Delta_Error=(-127*16/Heater_PID_Kp); // -> 28, used to be 56...
    0832: 55 44 1C MOV   [Ri_Delta_Error+1],0x1C
    0835: 55 43 00 MOV   [Ri_Delta_Error],0x0
(0245) 	}
(0246) 	if (Ri_Delta_Error<(127*16/Heater_PID_Kp))
    0838: 51 44    MOV   A,[Ri_Delta_Error+1]
    083A: 11 E4    SUB   A,0xE4
    083C: 51 43    MOV   A,[Ri_Delta_Error]
    083E: 31 80    XOR   A,0x80
    0840: 19 7F    SBB   A,0x7F
    0842: D0 07    JNC   0x084A
(0247) 	{
(0248) 		Ri_Delta_Error=(127*16/Heater_PID_Kp); // -> -28, used to be -56...
    0844: 55 44 E4 MOV   [Ri_Delta_Error+1],0xE4
    0847: 55 43 FF MOV   [Ri_Delta_Error],0xFF
(0249) 	}
(0250) 	Heater_Pout=(Heater_PID_Kp*Ri_Delta_Error)/16;
    084A: 5F 10 44 MOV   [__r1],[Ri_Delta_Error+1]
    084D: 5F 11 43 MOV   [__r0],[Ri_Delta_Error]
    0850: 55 0E B8 MOV   [__r3],0xB8
    0853: 55 0F FF MOV   [__r2],0xFF
    0856: 55 0D 00 MOV   [__rX],0x0
    0859: 55 0C 00 MOV   [__rY],0x0
    085C: 3C 0F 00 CMP   [__r2],0x0
    085F: B0 06    JNZ   0x0866
    0861: 3C 0E 00 CMP   [__r3],0x0
    0864: A0 17    JZ    0x087C
    0866: 70 FB    AND   F,0xFB
    0868: 6E 0F    RRC   [__r2]
    086A: 6E 0E    RRC   [__r3]
    086C: D0 09    JNC   0x0876
    086E: 51 10    MOV   A,[__r1]
    0870: 04 0D    ADD   [__rX],A
    0872: 51 11    MOV   A,[__r0]
    0874: 0C 0C    ADC   [__rY],A
    0876: 65 10    ASL   [__r1]
    0878: 6B 11    RLC   [__r0]
    087A: 8F E1    JMP   0x085C
    087C: 5F 10 0D MOV   [__r1],[__rX]
    087F: 5F 11 0C MOV   [__r0],[__rY]
    0882: 50 00    MOV   A,0x0
    0884: 08       PUSH  A
    0885: 50 10    MOV   A,0x10
    0887: 08       PUSH  A
    0888: 51 11    MOV   A,[__r0]
    088A: 08       PUSH  A
    088B: 51 10    MOV   A,[__r1]
    088D: 08       PUSH  A
    088E: 7C 0F 0D LCALL 0x0F0D
    0891: 18       POP   A
    0892: 53 40    MOV   [Heater_Pout+1],A
    0894: 18       POP   A
    0895: 53 3F    MOV   [Heater_Pout],A
    0897: 38 FE    ADD   SP,0xFE
(0251) 	Ri_Delta_Error_Sum=Ri_Delta_Error_Sum+Ri_Delta_Error;
    0899: 51 44    MOV   A,[Ri_Delta_Error+1]
    089B: 04 03    ADD   [Ri_Delta_Error_Sum+1],A
    089D: 51 43    MOV   A,[Ri_Delta_Error]
    089F: 0C 02    ADC   [Ri_Delta_Error_Sum],A
(0252) 	//If the sensor is too hot, then disreguard the Integratal contribution and just use the proportional to quickly correct the sensor temperature
(0253) 	/*
(0254) 	if((Ri_Delta<60)&&(Ri_Delta_Error_Sum>0))
(0255) 	{
(0256) 		Ri_Delta_Error_Sum=0;
(0257) 	}
(0258) 	*/
(0259) 	//Put limits on Error so PID does not go Fubar, and also so that the worst case multiplication does not overflow
(0260) 	if (Ri_Delta_Error_Sum>(-127*16/Heater_PID_Ki))
    08A1: 50 FC    MOV   A,0xFC
    08A3: 12 03    SUB   A,[Ri_Delta_Error_Sum+1]
    08A5: 51 02    MOV   A,[Ri_Delta_Error_Sum]
    08A7: 31 80    XOR   A,0x80
    08A9: 53 0D    MOV   [__rX],A
    08AB: 50 81    MOV   A,0x81
    08AD: 1A 0D    SBB   A,[__rX]
    08AF: D0 07    JNC   0x08B7
(0261) 	{
(0262) 		Ri_Delta_Error_Sum=(-127*16/Heater_PID_Ki); // -> 508, used to be 1024...
    08B1: 55 03 FC MOV   [Ri_Delta_Error_Sum+1],0xFC
    08B4: 55 02 01 MOV   [Ri_Delta_Error_Sum],0x1
(0263) 	}
(0264) 	if (Ri_Delta_Error_Sum<(127*16/Heater_PID_Ki))
    08B7: 51 03    MOV   A,[Ri_Delta_Error_Sum+1]
    08B9: 11 04    SUB   A,0x4
    08BB: 51 02    MOV   A,[Ri_Delta_Error_Sum]
    08BD: 31 80    XOR   A,0x80
    08BF: 19 7E    SBB   A,0x7E
    08C1: D0 07    JNC   0x08C9
(0265) 	{
(0266) 		Ri_Delta_Error_Sum=(127*16/Heater_PID_Ki); // -> -508, used to be -1024...
    08C3: 55 03 04 MOV   [Ri_Delta_Error_Sum+1],0x4
    08C6: 55 02 FE MOV   [Ri_Delta_Error_Sum],0xFE
(0267) 	}
(0268) 	Heater_Iout=(Heater_PID_Ki*Ri_Delta_Error_Sum)/16;
    08C9: 5F 10 03 MOV   [__r1],[Ri_Delta_Error_Sum+1]
    08CC: 5F 11 02 MOV   [__r0],[Ri_Delta_Error_Sum]
    08CF: 55 0E FC MOV   [__r3],0xFC
    08D2: 55 0F FF MOV   [__r2],0xFF
    08D5: 55 0D 00 MOV   [__rX],0x0
    08D8: 55 0C 00 MOV   [__rY],0x0
    08DB: 3C 0F 00 CMP   [__r2],0x0
    08DE: B0 06    JNZ   0x08E5
    08E0: 3C 0E 00 CMP   [__r3],0x0
    08E3: A0 17    JZ    0x08FB
    08E5: 70 FB    AND   F,0xFB
    08E7: 6E 0F    RRC   [__r2]
    08E9: 6E 0E    RRC   [__r3]
    08EB: D0 09    JNC   0x08F5
    08ED: 51 10    MOV   A,[__r1]
    08EF: 04 0D    ADD   [__rX],A
    08F1: 51 11    MOV   A,[__r0]
    08F3: 0C 0C    ADC   [__rY],A
    08F5: 65 10    ASL   [__r1]
    08F7: 6B 11    RLC   [__r0]
    08F9: 8F E1    JMP   0x08DB
    08FB: 5F 10 0D MOV   [__r1],[__rX]
    08FE: 5F 11 0C MOV   [__r0],[__rY]
    0901: 50 00    MOV   A,0x0
    0903: 08       PUSH  A
    0904: 50 10    MOV   A,0x10
    0906: 08       PUSH  A
    0907: 51 11    MOV   A,[__r0]
    0909: 08       PUSH  A
    090A: 51 10    MOV   A,[__r1]
    090C: 08       PUSH  A
    090D: 7C 0F 0D LCALL 0x0F0D
    0910: 18       POP   A
    0911: 53 3E    MOV   [Heater_Iout+1],A
    0913: 18       POP   A
    0914: 53 3D    MOV   [Heater_Iout],A
    0916: 38 FE    ADD   SP,0xFE
(0269) 	if (Heatup_Heater_Output<255) // if Heatup_Heater_Output is < 255 that means the unit just turned on and to give control to the heatup routine
    0918: 3C 04 FF CMP   [Heatup_Heater_Output],0xFF
    091B: D0 09    JNC   0x0925
(0270) 	{
(0271) 		Heater_Output=Heatup_Heater_Output;	
    091D: 5F 42 04 MOV   [Heater_Output+1],[Heatup_Heater_Output]
    0920: 55 41 00 MOV   [Heater_Output],0x0
(0272) 	}
    0923: 80 19    JMP   0x093D
(0273) 	else
(0274) 	{	
(0275) 		Heater_Output=Heater_PID_Output_Bias+Heater_Pout+Heater_Iout;			
    0925: 51 40    MOV   A,[Heater_Pout+1]
    0927: 01 80    ADD   A,0x80
    0929: 53 10    MOV   [__r1],A
    092B: 51 3F    MOV   A,[Heater_Pout]
    092D: 09 00    ADC   A,0x0
    092F: 53 11    MOV   [__r0],A
    0931: 51 10    MOV   A,[__r1]
    0933: 02 3E    ADD   A,[Heater_Iout+1]
    0935: 53 42    MOV   [Heater_Output+1],A
    0937: 51 11    MOV   A,[__r0]
    0939: 0A 3D    ADC   A,[Heater_Iout]
    093B: 53 41    MOV   [Heater_Output],A
(0276) 	}
(0277) 	//Heater_Output=Heater_PID_Output_Bias+Heater_Pout+Heater_Iout;	
(0278) 	if (Heater_Output<0)
    093D: 51 42    MOV   A,[Heater_Output+1]
    093F: 11 00    SUB   A,0x0
    0941: 51 41    MOV   A,[Heater_Output]
    0943: 31 80    XOR   A,0x80
    0945: 19 80    SBB   A,0x80
    0947: D0 07    JNC   0x094F
(0279) 	{
(0280) 		Heater_Output=0;
    0949: 55 42 00 MOV   [Heater_Output+1],0x0
    094C: 55 41 00 MOV   [Heater_Output],0x0
(0281) 	}
(0282) 	if (Heater_Output>255)
    094F: 50 FF    MOV   A,0xFF
    0951: 12 42    SUB   A,[Heater_Output+1]
    0953: 51 41    MOV   A,[Heater_Output]
    0955: 31 80    XOR   A,0x80
    0957: 53 0D    MOV   [__rX],A
    0959: 50 80    MOV   A,0x80
    095B: 1A 0D    SBB   A,[__rX]
    095D: D0 07    JNC   0x0965
(0283) 	{
(0284) 		Heater_Output=255;
    095F: 55 42 FF MOV   [Heater_Output+1],0xFF
    0962: 55 41 00 MOV   [Heater_Output],0x0
(0285) 	}
(0286) 
(0287) 
(0288) 	PWM8_Heater_WritePulseWidth(Heater_Output);
    0965: 5F 11 42 MOV   [__r0],[Heater_Output+1]
    0968: 10       PUSH  X
    0969: 51 11    MOV   A,[__r0]
    096B: 7C 05 19 LCALL PWM8_Heater_WritePulseWidth|_PWM8_Heater_WritePeriod|_PWM8_Heater_Stop|_PWM8_Heater_WritePulseWidth
    096E: 20       POP   X
    096F: 7F       RET   
(0289) 	//PWM8_Heater_WritePulseWidth(200);
(0290) }
(0291) 
(0292) INT Ri_Mid_Error;
(0293) INT Ia_Output;
(0294) INT Ia_Pout;
(0295) INT Ia_Iout;
(0296) //PID Controller, Input is Ri_Mid (The average voltage on the Vs Port of the sensor) output is DAC9_Ia, DAC9_Ia sink/sources current to the Sensor pump cell such that Ri_Mid is is the same voltage as Vref
(0297) //Only a PI controller is used as adding the D term does not effect performance 
(0298) //Everything is inflated by a factor of 4 so that floating point is avioded
(0299) void Ia_PID(void)
(0300) {
(0301) 
(0302) 
(0303) 	Ri_Mid_Error=Ri_Mid_Target-Ri_Mid;
_Ia_PID:
    0970: 50 1E    MOV   A,0x1E
    0972: 12 48    SUB   A,[Ri_Mid+1]
    0974: 53 3C    MOV   [Ri_Mid_Error+1],A
    0976: 50 01    MOV   A,0x1
    0978: 1A 47    SBB   A,[Ri_Mid]
    097A: 53 3B    MOV   [Ri_Mid_Error],A
(0304) 	//Put limits on Error so PID does not go Fubar, and also so that the worst case multiplication does not overflow
(0305) 	if (Ri_Mid_Error>(255*16/Ia_PID_Kp))
    097C: 50 A3    MOV   A,0xA3
    097E: 12 3C    SUB   A,[Ri_Mid_Error+1]
    0980: 51 3B    MOV   A,[Ri_Mid_Error]
    0982: 31 80    XOR   A,0x80
    0984: 53 0D    MOV   [__rX],A
    0986: 50 80    MOV   A,0x80
    0988: 1A 0D    SBB   A,[__rX]
    098A: D0 07    JNC   0x0992
(0306) 	{
(0307) 		Ri_Mid_Error=(255*16/Ia_PID_Kp); // 163
    098C: 55 3C A3 MOV   [Ri_Mid_Error+1],0xA3
    098F: 55 3B 00 MOV   [Ri_Mid_Error],0x0
(0308) 	}
(0309) 	if (Ri_Mid_Error<(-255*16/Ia_PID_Kp))
    0992: 51 3C    MOV   A,[Ri_Mid_Error+1]
    0994: 11 5D    SUB   A,0x5D
    0996: 51 3B    MOV   A,[Ri_Mid_Error]
    0998: 31 80    XOR   A,0x80
    099A: 19 7F    SBB   A,0x7F
    099C: D0 07    JNC   0x09A4
(0310) 	{
(0311) 		Ri_Mid_Error=(-255*16/Ia_PID_Kp); // -163
    099E: 55 3C 5D MOV   [Ri_Mid_Error+1],0x5D
    09A1: 55 3B FF MOV   [Ri_Mid_Error],0xFF
(0312) 	}
(0313) 	Ia_Pout=(Ia_PID_Kp*Ri_Mid_Error)/16;
    09A4: 5F 10 3C MOV   [__r1],[Ri_Mid_Error+1]
    09A7: 5F 11 3B MOV   [__r0],[Ri_Mid_Error]
    09AA: 55 0E 19 MOV   [__r3],0x19
    09AD: 55 0F 00 MOV   [__r2],0x0
    09B0: 55 0D 00 MOV   [__rX],0x0
    09B3: 55 0C 00 MOV   [__rY],0x0
    09B6: 3C 0F 00 CMP   [__r2],0x0
    09B9: B0 06    JNZ   0x09C0
    09BB: 3C 0E 00 CMP   [__r3],0x0
    09BE: A0 17    JZ    0x09D6
    09C0: 70 FB    AND   F,0xFB
    09C2: 6E 0F    RRC   [__r2]
    09C4: 6E 0E    RRC   [__r3]
    09C6: D0 09    JNC   0x09D0
    09C8: 51 10    MOV   A,[__r1]
    09CA: 04 0D    ADD   [__rX],A
    09CC: 51 11    MOV   A,[__r0]
    09CE: 0C 0C    ADC   [__rY],A
    09D0: 65 10    ASL   [__r1]
    09D2: 6B 11    RLC   [__r0]
    09D4: 8F E1    JMP   0x09B6
    09D6: 5F 10 0D MOV   [__r1],[__rX]
    09D9: 5F 11 0C MOV   [__r0],[__rY]
    09DC: 50 00    MOV   A,0x0
    09DE: 08       PUSH  A
    09DF: 50 10    MOV   A,0x10
    09E1: 08       PUSH  A
    09E2: 51 11    MOV   A,[__r0]
    09E4: 08       PUSH  A
    09E5: 51 10    MOV   A,[__r1]
    09E7: 08       PUSH  A
    09E8: 7C 0F 0D LCALL 0x0F0D
    09EB: 18       POP   A
    09EC: 53 38    MOV   [Ia_Pout+1],A
    09EE: 18       POP   A
    09EF: 53 37    MOV   [Ia_Pout],A
    09F1: 38 FE    ADD   SP,0xFE
(0314) 	Ri_Mid_Error_Sum=Ri_Mid_Error_Sum+Ri_Mid_Error;
    09F3: 51 3C    MOV   A,[Ri_Mid_Error+1]
    09F5: 04 01    ADD   [Ri_Mid_Error_Sum+1],A
    09F7: 51 3B    MOV   A,[Ri_Mid_Error]
    09F9: 0C 00    ADC   [Ri_Mid_Error_Sum],A
(0315) 	//Put limits on Error so PID does not go Fubar, and also so that the worst case multiplication does not overflow
(0316) 	if (Ri_Mid_Error_Sum>(255*16/Ia_PID_Ki))
    09FB: 50 FC    MOV   A,0xFC
    09FD: 12 01    SUB   A,[Ri_Mid_Error_Sum+1]
    09FF: 51 00    MOV   A,[Ri_Mid_Error_Sum]
    0A01: 31 80    XOR   A,0x80
    0A03: 53 0D    MOV   [__rX],A
    0A05: 50 83    MOV   A,0x83
    0A07: 1A 0D    SBB   A,[__rX]
    0A09: D0 07    JNC   0x0A11
(0317) 	{
(0318) 		Ri_Mid_Error_Sum=(255*16/Ia_PID_Ki); // 1020
    0A0B: 55 01 FC MOV   [Ri_Mid_Error_Sum+1],0xFC
    0A0E: 55 00 03 MOV   [Ri_Mid_Error_Sum],0x3
(0319) 	}
(0320) 	if (Ri_Mid_Error_Sum<(-255*16/Ia_PID_Ki))
    0A11: 51 01    MOV   A,[Ri_Mid_Error_Sum+1]
    0A13: 11 04    SUB   A,0x4
    0A15: 51 00    MOV   A,[Ri_Mid_Error_Sum]
    0A17: 31 80    XOR   A,0x80
    0A19: 19 7C    SBB   A,0x7C
    0A1B: D0 07    JNC   0x0A23
(0321) 	{
(0322) 		Ri_Mid_Error_Sum=(-255*16/Ia_PID_Ki); // -1020
    0A1D: 55 01 04 MOV   [Ri_Mid_Error_Sum+1],0x4
    0A20: 55 00 FC MOV   [Ri_Mid_Error_Sum],0xFC
(0323) 	}
(0324) 	Ia_Iout=(Ia_PID_Ki*Ri_Mid_Error_Sum)/16;
    0A23: 5F 10 01 MOV   [__r1],[Ri_Mid_Error_Sum+1]
    0A26: 5F 11 00 MOV   [__r0],[Ri_Mid_Error_Sum]
    0A29: 65 10    ASL   [__r1]
    0A2B: 6B 11    RLC   [__r0]
    0A2D: 65 10    ASL   [__r1]
    0A2F: 6B 11    RLC   [__r0]
    0A31: 50 00    MOV   A,0x0
    0A33: 08       PUSH  A
    0A34: 50 10    MOV   A,0x10
    0A36: 08       PUSH  A
    0A37: 51 11    MOV   A,[__r0]
    0A39: 08       PUSH  A
    0A3A: 51 10    MOV   A,[__r1]
    0A3C: 08       PUSH  A
    0A3D: 7C 0F 0D LCALL 0x0F0D
    0A40: 18       POP   A
    0A41: 53 36    MOV   [Ia_Iout+1],A
    0A43: 18       POP   A
    0A44: 53 35    MOV   [Ia_Iout],A
    0A46: 38 FE    ADD   SP,0xFE
(0325) 	Ia_Output=Ia_Output_Bias+Ia_Pout+Ia_Iout;
    0A48: 51 38    MOV   A,[Ia_Pout+1]
    0A4A: 01 00    ADD   A,0x0
    0A4C: 53 10    MOV   [__r1],A
    0A4E: 51 37    MOV   A,[Ia_Pout]
    0A50: 09 01    ADC   A,0x1
    0A52: 53 11    MOV   [__r0],A
    0A54: 51 10    MOV   A,[__r1]
    0A56: 02 36    ADD   A,[Ia_Iout+1]
    0A58: 53 3A    MOV   [Ia_Output+1],A
    0A5A: 51 11    MOV   A,[__r0]
    0A5C: 0A 35    ADC   A,[Ia_Iout]
    0A5E: 53 39    MOV   [Ia_Output],A
(0326) 	//9 Bit Dac so only 0-511 is allowed, for some reason i put the limit at 510, I foget exactly why.
(0327) 	if (Ia_Output<0)
    0A60: 51 3A    MOV   A,[Ia_Output+1]
    0A62: 11 00    SUB   A,0x0
    0A64: 51 39    MOV   A,[Ia_Output]
    0A66: 31 80    XOR   A,0x80
    0A68: 19 80    SBB   A,0x80
    0A6A: D0 07    JNC   0x0A72
(0328) 	{
(0329) 		Ia_Output=0;
    0A6C: 55 3A 00 MOV   [Ia_Output+1],0x0
    0A6F: 55 39 00 MOV   [Ia_Output],0x0
(0330) 	}
(0331) 	if (Ia_Output>510)
    0A72: 50 FE    MOV   A,0xFE
    0A74: 12 3A    SUB   A,[Ia_Output+1]
    0A76: 51 39    MOV   A,[Ia_Output]
    0A78: 31 80    XOR   A,0x80
    0A7A: 53 0D    MOV   [__rX],A
    0A7C: 50 81    MOV   A,0x81
    0A7E: 1A 0D    SBB   A,[__rX]
    0A80: D0 07    JNC   0x0A88
(0332) 	{
(0333) 		Ia_Output=510;
    0A82: 55 3A FE MOV   [Ia_Output+1],0xFE
    0A85: 55 39 01 MOV   [Ia_Output],0x1
(0334) 	}
(0335) 	DAC9_Ia_WriteStall (Ia_Output);
    0A88: 10       PUSH  X
    0A89: 58 39    MOV   X,[Ia_Output]
    0A8B: 51 3A    MOV   A,[Ia_Output+1]
    0A8D: 7C 06 82 LCALL _DAC9_Ia_WriteStall|_DAC9_Ia_WriteBlind|DAC9_Ia_WriteBlind2B|_DAC9_Ia_WriteBlind2B
    0A90: 20       POP   X
    0A91: 7F       RET   
(0336) 	//DAC9_Ia_WriteStall (256);
(0337) }
(0338) INT IIR_Int(INT Vin, INT Vout, BYTE A)
(0339) {
_IIR_Int:
  A                    --> X-8
  Vout                 --> X-7
  Vin                  --> X-5
    0A92: 10       PUSH  X
    0A93: 4F       MOV   X,SP
(0340) 	return (Vout + (Vin - Vout)/A);
    0A94: 52 FC    MOV   A,[X-4]
    0A96: 13 FA    SUB   A,[X-6]
    0A98: 53 10    MOV   [__r1],A
    0A9A: 52 FB    MOV   A,[X-5]
    0A9C: 1B F9    SBB   A,[X-7]
    0A9E: 53 11    MOV   [__r0],A
    0AA0: 52 F8    MOV   A,[X-8]
    0AA2: 53 0E    MOV   [__r3],A
    0AA4: 50 00    MOV   A,0x0
    0AA6: 08       PUSH  A
    0AA7: 51 0E    MOV   A,[__r3]
    0AA9: 08       PUSH  A
    0AAA: 51 11    MOV   A,[__r0]
    0AAC: 08       PUSH  A
    0AAD: 51 10    MOV   A,[__r1]
    0AAF: 08       PUSH  A
    0AB0: 7C 0F 0D LCALL 0x0F0D
    0AB3: 18       POP   A
    0AB4: 53 10    MOV   [__r1],A
    0AB6: 18       POP   A
    0AB7: 53 11    MOV   [__r0],A
    0AB9: 38 FE    ADD   SP,0xFE
    0ABB: 52 FA    MOV   A,[X-6]
    0ABD: 02 10    ADD   A,[__r1]
    0ABF: 53 10    MOV   [__r1],A
    0AC1: 52 F9    MOV   A,[X-7]
    0AC3: 0A 11    ADC   A,[__r0]
    0AC5: 53 11    MOV   [__r0],A
    0AC7: 20       POP   X
    0AC8: 7F       RET   
(0341) }
(0342) 
(0343) 
(0344) BYTE Ia_PID_Counter=0;
(0345) BYTE Vout_Lookup_Counter=0;
(0346) BYTE Heater_PID_Counter=0;
(0347) BYTE LCD_Counter=0;
(0348) BYTE Heatup_Counter=0;
(0349) INT Ri_Min,Ri_Max;
(0350) INT ip,ip_Justified;
(0351) BYTE Lambda_x100;
(0352) INT LSU_Temperature_C;
(0353) //char Str1[] = "Lambda=x.xx";
(0354) //char Str2[] = "Temperature=xxxC"; 
(0355) void main(void)
(0356) {
_main:
  temp_int2            --> X+11
  temp_ulong           --> X+7
  digits               --> X+3
  temp_byte            --> X+2
  temp_int             --> X+0
    0AC9: 10       PUSH  X
    0ACA: 4F       MOV   X,SP
    0ACB: 38 0D    ADD   SP,0xD
(0357) 	unsigned long temp_ulong;
(0358) 	INT temp_int,temp_int2;
(0359) 	BYTE temp_byte;
(0360) 	
(0361) 	#if defined LED_AFR || defined LED_Lambda
(0362) 		// empty, 1, -, -
(0363) 		BYTE digits[4] = {0b00000000, 0b00000110, 0b01000000, 0b01000000};
    0ACD: 55 10 34 MOV   [__r1],0x34
    0AD0: 55 11 03 MOV   [__r0],0x3
    0AD3: 5A 0E    MOV   [__r3],X
    0AD5: 06 0E 03 ADD   [__r3],0x3
    0AD8: 10       PUSH  X
    0AD9: 55 0D 00 MOV   [__rX],0x0
    0ADC: 51 11    MOV   A,[__r0]
    0ADE: 58 10    MOV   X,[__r1]
    0AE0: 08       PUSH  A
    0AE1: 28       ROMX  
    0AE2: 3F 0E    MVI   [__r3],A
    0AE4: 18       POP   A
    0AE5: 75       INC   X
    0AE6: 09 00    ADC   A,0x0
    0AE8: 76 0D    INC   [__rX]
    0AEA: 3C 0D 04 CMP   [__rX],0x4
    0AED: BF F2    JNZ   0x0AE0
(0364) 	#endif
(0365) 	
(0366) 	AMUX4_0_InputSelect(AMUX4_0_PORT0_1);        
    0AEF: 50 00    MOV   A,0x0
    0AF1: 7C 06 FC LCALL _AMUX4_1_Start|_AMUX4_1_Stop|_AMUX4_0_InputSelect|AMUX4_0_InputSelect
(0367)    	AMUX4_1_InputSelect(AMUX4_1_PORT0_0);
    0AF4: 50 00    MOV   A,0x0
    0AF6: 7C 06 E5 LCALL AMUX4_1_InputSelect|_DAC6_VGND_Stop|_AMUX4_1_InputSelect
(0368)    	INSAMP_Start(INSAMP_LOWPOWER); 
    0AF9: 50 01    MOV   A,0x1
    0AFB: 7C 06 56 LCALL _INSAMP_SetPower|INSAMP_Start|_LCD_InitBG|_INSAMP_Start|INSAMP_SetPower
(0369)     ADCINC_Start(ADCINC_HIGHPOWER);      
    0AFE: 50 03    MOV   A,0x3
    0B00: 7C 07 CD LCALL _ADCINC_Start
(0370)    	DAC9_Ia_Start(DAC9_Ia_HIGHPOWER);
    0B03: 50 03    MOV   A,0x3
    0B05: 7C 06 6C LCALL _DAC9_Ia_Start|_INSAMP_SetGain|DAC9_Ia_Start|_INSAMP_Stop|DAC9_Ia_SetPower|_DAC9_Ia_SetPower
(0371) 	DAC6_VGND_Start(DAC6_VGND_MEDPOWER);
    0B08: 50 02    MOV   A,0x2
    0B0A: 7C 06 C2 LCALL _DAC9_Ia_Stop|DAC6_VGND_Start|_DAC6_VGND_Start|_DAC6_VGND_SetPower|DAC6_VGND_SetPower
(0372) 	DAC6_VGND_WriteStall (31);
    0B0D: 50 1F    MOV   A,0x1F
    0B0F: 7C 06 C9 LCALL DAC6_VGND_WriteStall|_DAC6_VGND_WriteBlind|_DAC6_VGND_WriteStall
(0373)     PWM8_Vout_DisableInt();  
    0B12: 7C 04 F9 LCALL _PWM8_Vout_DisableInt|_PWM8_Vout_EnableInt
(0374)     PWM8_Vout_Start();     
    0B15: 7C 04 FD LCALL _PWM8_Vout_Start
(0375)     PWM8_Heater_DisableInt();  
    0B18: 7C 05 11 LCALL _PWM8_Heater_DisableInt|_PWM8_Heater_EnableInt
(0376)     PWM8_Heater_Start();
    0B1B: 7C 05 15 LCALL _PWM8_Heater_Start
(0377) 	PWM8_NB_Out_DisableInt();  
    0B1E: 7C 05 05 LCALL PWM8_NB_Out_DisableInt|_PWM8_NB_Out_EnableInt|_PWM8_NB_Out_DisableInt
(0378)     PWM8_NB_Out_Start(); 
    0B21: 7C 05 09 LCALL _PWM8_NB_Out_Start
(0379) 	ADCINC_GetSamples(0);
    0B24: 50 00    MOV   A,0x0
    0B26: 7C 07 ED LCALL _ADCINC_GetSamples|_ADCINC_Stop
(0380) 	SleepTimer_Start();  
    0B29: 7C 04 D5 LCALL _SleepTimer_Start|_SleepTimer_DisableInt
(0381)    	SleepTimer_SetInterval(SleepTimer_512_HZ);  
    0B2C: 50 00    MOV   A,0x0
    0B2E: 7C 04 E6 LCALL _SleepTimer_SetInterval|_SleepTimer_Stop
(0382)    	SleepTimer_EnableInt();   
    0B31: 7C 04 D1 LCALL _SleepTimer_EnableInt
    0B34: 20       POP   X
(0383) 	M8C_EnableGInt ;  
    0B35: 71 01    OR    F,0x1
(0384) 	
(0385) 	// initialize LCD only when needed (DStage WBOOS can be used with LED or without any display)
(0386) 	#if defined LCD_AFR_digits || defined LCD_Lambda_digits || defined LCD_Temperature_digits || defined DStage_logo || defined LCD_Lambda_Graph || defined LCD_Temperature_Graph
(0387) 		LCD_Start();                  // Initialize LCD
(0388) 		LCD_InitBG(LCD_SOLID_BG);
(0389) 	#endif
(0390) 
(0391) 	#ifdef LCD_AFR_digits
(0392) 		LCD_Position(0,0);
(0393) 		LCD_PrCString("AFR: 1\0");
(0394) 	#endif
(0395) 	
(0396) 	#ifdef LCD_Lambda_digits
(0397) 		LCD_Position(0,0);
(0398) 		LCD_PrCString("LAM: 0\0");
(0399) 	#endif
(0400) 	
(0401) 	#ifdef LCD_Temperature_digits
(0402) 		#ifdef LCD_Lambda_Graph
(0403) 			LCD_Position(0,10);
(0404) 			LCD_PrCString("T:\0");
(0405) 			LCD_Position(0,15);
(0406) 			LCD_WriteData(0xDF); // degre
(0407) 		#else
(0408) 			LCD_Position(1,0);
(0409) 			LCD_PrCString("TMP:\0");
(0410) 			LCD_Position(1,8);
(0411) 			LCD_WriteData(0xDF); // degre
(0412) 		#endif
(0413) 	#endif
(0414) 	
(0415) 	#ifdef DStage_logo
(0416) 		#ifndef LCD_Lambda_Graph
(0417) 			LCD_Position(0,10);
(0418) 			LCD_PrCString("DStage\0");
(0419) 			LCD_Position(1,10);
(0420) 			LCD_PrCString("Garage\0");
(0421) 		#endif
(0422) 	#endif
(0423) 	
(0424) 	#if defined LED_AFR || defined LED_Lambda
(0425) 		TM1637_init();
    0B37: 92 A9    CALL  _TM1637_init
(0426) 		TM1637_setSegments(digits, 4, 0);
    0B39: 50 00    MOV   A,0x0
    0B3B: 08       PUSH  A
    0B3C: 50 04    MOV   A,0x4
    0B3E: 08       PUSH  A
    0B3F: 5A 10    MOV   [__r1],X
    0B41: 06 10 03 ADD   [__r1],0x3
    0B44: 51 11    MOV   A,[__r0]
    0B46: 08       PUSH  A
    0B47: 51 10    MOV   A,[__r1]
    0B49: 08       PUSH  A
    0B4A: 92 C7    CALL  _TM1637_setSegments
    0B4C: 38 FC    ADD   SP,0xFC
(0427) 		//TM1637_showNumberDec(123, 0, 3, 1);
(0428) 	#endif
(0429) 
(0430) 	for(;;)
(0431)     {
(0432) 		temp_ulong++;
    0B4E: 07 0A 01 ADD   [X+10],0x1
    0B51: 0F 09 00 ADC   [X+9],0x0
    0B54: 0F 08 00 ADC   [X+8],0x0
    0B57: 0F 07 00 ADC   [X+7],0x0
(0433) 		if ((ADC_IF&1)==1)
    0B5A: 51 29    MOV   A,[0x29]
    0B5C: 21 01    AND   A,0x1
    0B5E: 39 01    CMP   A,0x1
    0B60: B0 56    JNZ   0x0BB7
(0434) 		{
(0435) 			ADC_IF=ADC_IF&254;
    0B62: 26 29 FE AND   [0x29],0xFE
(0436) 			Ri_Min=IIR_Int(Ri_Min_x1*2,Ri_Min,Ri_Filter_Strength);
    0B65: 50 04    MOV   A,0x4
    0B67: 08       PUSH  A
    0B68: 51 33    MOV   A,[Ri_Min]
    0B6A: 08       PUSH  A
    0B6B: 51 34    MOV   A,[Ri_Min+1]
    0B6D: 08       PUSH  A
    0B6E: 5F 10 27 MOV   [__r1],[0x27]
    0B71: 55 11 00 MOV   [__r0],0x0
    0B74: 65 10    ASL   [__r1]
    0B76: 6B 11    RLC   [__r0]
    0B78: 51 11    MOV   A,[__r0]
    0B7A: 08       PUSH  A
    0B7B: 51 10    MOV   A,[__r1]
    0B7D: 08       PUSH  A
    0B7E: 9F 12    CALL  _IIR_Int
    0B80: 38 FB    ADD   SP,0xFB
    0B82: 5F 34 10 MOV   [Ri_Min+1],[__r1]
    0B85: 5F 33 11 MOV   [Ri_Min],[__r0]
(0437) 			Ri_Delta=Ri_Max-Ri_Min;
    0B88: 51 32    MOV   A,[Ri_Max+1]
    0B8A: 12 34    SUB   A,[Ri_Min+1]
    0B8C: 53 46    MOV   [Ri_Delta+1],A
    0B8E: 51 31    MOV   A,[Ri_Max]
    0B90: 1A 33    SBB   A,[Ri_Min]
    0B92: 53 45    MOV   [Ri_Delta],A
(0438) 			Ri_Mid=(Ri_Max+Ri_Min)/2;
    0B94: 51 32    MOV   A,[Ri_Max+1]
    0B96: 02 34    ADD   A,[Ri_Min+1]
    0B98: 53 10    MOV   [__r1],A
    0B9A: 51 31    MOV   A,[Ri_Max]
    0B9C: 0A 33    ADC   A,[Ri_Min]
    0B9E: 53 11    MOV   [__r0],A
    0BA0: 50 00    MOV   A,0x0
    0BA2: 08       PUSH  A
    0BA3: 50 02    MOV   A,0x2
    0BA5: 08       PUSH  A
    0BA6: 51 11    MOV   A,[__r0]
    0BA8: 08       PUSH  A
    0BA9: 51 10    MOV   A,[__r1]
    0BAB: 08       PUSH  A
    0BAC: 7C 0F 0D LCALL 0x0F0D
    0BAF: 18       POP   A
    0BB0: 53 48    MOV   [Ri_Mid+1],A
    0BB2: 18       POP   A
    0BB3: 53 47    MOV   [Ri_Mid],A
    0BB5: 38 FE    ADD   SP,0xFE
(0439) 		}
(0440) 		if ((ADC_IF&2)==2)
    0BB7: 51 29    MOV   A,[0x29]
    0BB9: 21 02    AND   A,0x2
    0BBB: 39 02    CMP   A,0x2
    0BBD: B0 56    JNZ   0x0C14
(0441) 		{
(0442) 			ADC_IF=ADC_IF&253;
    0BBF: 26 29 FD AND   [0x29],0xFD
(0443) 			Ri_Max=IIR_Int(Ri_Max_x1*2,Ri_Max,Ri_Filter_Strength);
    0BC2: 50 04    MOV   A,0x4
    0BC4: 08       PUSH  A
    0BC5: 51 31    MOV   A,[Ri_Max]
    0BC7: 08       PUSH  A
    0BC8: 51 32    MOV   A,[Ri_Max+1]
    0BCA: 08       PUSH  A
    0BCB: 5F 10 26 MOV   [__r1],[0x26]
    0BCE: 55 11 00 MOV   [__r0],0x0
    0BD1: 65 10    ASL   [__r1]
    0BD3: 6B 11    RLC   [__r0]
    0BD5: 51 11    MOV   A,[__r0]
    0BD7: 08       PUSH  A
    0BD8: 51 10    MOV   A,[__r1]
    0BDA: 08       PUSH  A
    0BDB: 9E B5    CALL  _IIR_Int
    0BDD: 38 FB    ADD   SP,0xFB
    0BDF: 5F 32 10 MOV   [Ri_Max+1],[__r1]
    0BE2: 5F 31 11 MOV   [Ri_Max],[__r0]
(0444) 			Ri_Delta=Ri_Max-Ri_Min;
    0BE5: 51 32    MOV   A,[Ri_Max+1]
    0BE7: 12 34    SUB   A,[Ri_Min+1]
    0BE9: 53 46    MOV   [Ri_Delta+1],A
    0BEB: 51 31    MOV   A,[Ri_Max]
    0BED: 1A 33    SBB   A,[Ri_Min]
    0BEF: 53 45    MOV   [Ri_Delta],A
(0445) 			Ri_Mid=(Ri_Max+Ri_Min)/2;
    0BF1: 51 32    MOV   A,[Ri_Max+1]
    0BF3: 02 34    ADD   A,[Ri_Min+1]
    0BF5: 53 10    MOV   [__r1],A
    0BF7: 51 31    MOV   A,[Ri_Max]
    0BF9: 0A 33    ADC   A,[Ri_Min]
    0BFB: 53 11    MOV   [__r0],A
    0BFD: 50 00    MOV   A,0x0
    0BFF: 08       PUSH  A
    0C00: 50 02    MOV   A,0x2
    0C02: 08       PUSH  A
    0C03: 51 11    MOV   A,[__r0]
    0C05: 08       PUSH  A
    0C06: 51 10    MOV   A,[__r1]
    0C08: 08       PUSH  A
    0C09: 7C 0F 0D LCALL 0x0F0D
    0C0C: 18       POP   A
    0C0D: 53 48    MOV   [Ri_Mid+1],A
    0C0F: 18       POP   A
    0C10: 53 47    MOV   [Ri_Mid],A
    0C12: 38 FE    ADD   SP,0xFE
(0446) 		}
(0447) 		if ((ADC_IF&4)==4)
    0C14: 51 29    MOV   A,[0x29]
    0C16: 21 04    AND   A,0x4
    0C18: 39 04    CMP   A,0x4
    0C1A: B0 27    JNZ   0x0C42
(0448) 		{
(0449) 			ADC_IF=ADC_IF&251;
    0C1C: 26 29 FB AND   [0x29],0xFB
(0450) 			ip=IIR_Int(ip_x1*2,ip,ip_Filter_Strength);
    0C1F: 50 04    MOV   A,0x4
    0C21: 08       PUSH  A
    0C22: 51 2F    MOV   A,[ip]
    0C24: 08       PUSH  A
    0C25: 51 30    MOV   A,[ip+1]
    0C27: 08       PUSH  A
    0C28: 5F 10 28 MOV   [__r1],[0x28]
    0C2B: 55 11 00 MOV   [__r0],0x0
    0C2E: 65 10    ASL   [__r1]
    0C30: 6B 11    RLC   [__r0]
    0C32: 51 11    MOV   A,[__r0]
    0C34: 08       PUSH  A
    0C35: 51 10    MOV   A,[__r1]
    0C37: 08       PUSH  A
    0C38: 9E 58    CALL  _IIR_Int
    0C3A: 38 FB    ADD   SP,0xFB
    0C3C: 5F 30 10 MOV   [ip+1],[__r1]
    0C3F: 5F 2F 11 MOV   [ip],[__r0]
(0451) 		}
(0452) 		Ia_PID_Counter+=Sleep_Counter;
    0C42: 51 19    MOV   A,[0x19]
    0C44: 04 05    ADD   [Ia_PID_Counter],A
(0453) 		Heater_PID_Counter+=Sleep_Counter;
    0C46: 51 19    MOV   A,[0x19]
    0C48: 04 07    ADD   [Heater_PID_Counter],A
(0454) 		Heatup_Counter+=Sleep_Counter;
    0C4A: 51 19    MOV   A,[0x19]
    0C4C: 04 09    ADD   [Heatup_Counter],A
(0455) 		Vout_Lookup_Counter+=Sleep_Counter;
    0C4E: 51 19    MOV   A,[0x19]
    0C50: 04 06    ADD   [Vout_Lookup_Counter],A
(0456) 		LCD_Counter+=Sleep_Counter;
    0C52: 51 19    MOV   A,[0x19]
    0C54: 04 08    ADD   [LCD_Counter],A
(0457) 		Sleep_Counter=0;
    0C56: 55 19 00 MOV   [0x19],0x0
(0458) 		if (Ia_PID_Counter>Ia_PID_Counter_Set)
    0C59: 50 01    MOV   A,0x1
    0C5B: 3A 05    CMP   A,[Ia_PID_Counter]
    0C5D: D0 06    JNC   0x0C64
(0459) 		{
(0460) 			Ia_PID_Counter=0;
    0C5F: 55 05 00 MOV   [Ia_PID_Counter],0x0
(0461) 			Ia_PID();
    0C62: 9D 0C    CALL  _Ia_PID
(0462) 		}
(0463) 		if (Heater_PID_Counter>Heater_PID_Counter_Set)
    0C64: 50 19    MOV   A,0x19
    0C66: 3A 07    CMP   A,[Heater_PID_Counter]
    0C68: D0 06    JNC   0x0C6F
(0464) 		{
(0465) 			Heater_PID_Counter=0;
    0C6A: 55 07 00 MOV   [Heater_PID_Counter],0x0
(0466) 			Heater_PID();
    0C6D: 9B A7    CALL  __UserModules_end|_ADCINC_wGetData|ADCINC_bClearFlagGetData|_ADCINC_fClearFlag|_ADCINC_iGetData|ADCINC_cGetData|_ADCINC_cClearFlagGetData|_ADCINC_bClearFlagGetData|_ADCINC_cGetData|_ADCINC_WritePulseWidth|_ADCINC_bGetData|ADCINC_wGetData|_Heater_PID|...
(0467) 		}
(0468) 		if (Vout_Lookup_Counter>Vout_Lookup_Counter_Set)
    0C6F: 50 19    MOV   A,0x19
    0C71: 3A 06    CMP   A,[Vout_Lookup_Counter]
    0C73: D0 43    JNC   0x0CB7
(0469) 		{
(0470) 			Vout_Lookup_Counter=0;
    0C75: 55 06 00 MOV   [Vout_Lookup_Counter],0x0
    0C78: 93 0E    CALL  <created procedures>
    0C7A: 40       NOP   
(0471) 			temp_int=ip-ip_to_Vout_Lookup_Start;
    0C7B: 01 50    ADD   A,0x50
    0C7D: 53 10    MOV   [__r1],A
    0C7F: 52 00    MOV   A,[X+0]
    0C81: 09 01    ADC   A,0x1
    0C83: 10       PUSH  X
    0C84: 58 10    MOV   X,[__r1]
    0C86: 28       ROMX  
    0C87: 7C 05 01 LCALL _PWM8_Vout_WritePulseWidth|_PWM8_Vout_Stop|_PWM8_Vout_WritePeriod
    0C8A: 20       POP   X
(0472) 			if (temp_int<0)
(0473) 			{
(0474) 				temp_int=0;
(0475) 			}
(0476) 			if (temp_int>(ip_to_Vout_Lookup_Size-1))
(0477) 			{
(0478) 				temp_int=(ip_to_Vout_Lookup_Size-1);
(0479) 			}
(0480) 			PWM8_Vout_WritePulseWidth(ip_to_Vout_Lookup[temp_int]);
(0481) 			
(0482) 			#ifdef NB_Out
(0483) 				temp_byte=23;//0.45v
    0C8B: 56 02 17 MOV   [X+2],0x17
(0484) 				if (ip<251) // 251 =0.9797787392968
    0C8E: 51 30    MOV   A,[ip+1]
    0C90: 11 FB    SUB   A,0xFB
    0C92: 51 2F    MOV   A,[ip]
    0C94: 31 80    XOR   A,0x80
    0C96: 19 80    SBB   A,0x80
    0C98: D0 04    JNC   0x0C9D
(0485) 				{
(0486) 					temp_byte=46; //0.9v
    0C9A: 56 02 2E MOV   [X+2],0x2E
(0487) 					
(0488) 				}
(0489) 				if (ip>259) //259 = 1.02295956968912
    0C9D: 50 03    MOV   A,0x3
    0C9F: 12 30    SUB   A,[ip+1]
    0CA1: 51 2F    MOV   A,[ip]
    0CA3: 31 80    XOR   A,0x80
    0CA5: 53 0D    MOV   [__rX],A
    0CA7: 50 81    MOV   A,0x81
    0CA9: 1A 0D    SBB   A,[__rX]
    0CAB: D0 04    JNC   0x0CB0
(0490) 				{
(0491) 					temp_byte=0; //0v
    0CAD: 56 02 00 MOV   [X+2],0x0
(0492) 				}
(0493) 				PWM8_NB_Out_WritePulseWidth(temp_byte);
    0CB0: 10       PUSH  X
    0CB1: 52 02    MOV   A,[X+2]
    0CB3: 7C 05 0D LCALL _PWM8_NB_Out_Stop|_PWM8_NB_Out_WritePulseWidth|_PWM8_NB_Out_WritePeriod|PWM8_NB_Out_WritePulseWidth
    0CB6: 20       POP   X
(0494) 			#endif
(0495) 			
(0496) 		}
(0497) 		if (LCD_Counter>LCD_Counter_Set)
    0CB7: 50 32    MOV   A,0x32
    0CB9: 3A 08    CMP   A,[LCD_Counter]
    0CBB: D0 DE    JNC   0x0D9A
(0498) 		{
(0499) 			LCD_Counter=0;
    0CBD: 55 08 00 MOV   [LCD_Counter],0x0
    0CC0: 92 C6    CALL  <created procedures>
    0CC2: 40       NOP   
(0500) 			
(0501) 			#ifdef LCD_Lambda_Graph
(0502) 				temp_int=ip-ip_to_Lambda_Lookup_Start;
(0503) 				if (temp_int<0)
(0504) 				{
(0505) 					temp_int=0;
(0506) 				}
(0507) 				if (temp_int>(ip_to_Lambda_Lookup_Size-1))
(0508) 				{
(0509) 					temp_int=(ip_to_Lambda_Lookup_Size-1);
(0510) 				}
(0511) 				Lambda_x100=ip_to_Graph_Lookup[temp_int];
(0512) 				
(0513) 				// if both numeric AFR and Lambda bargraph is to be used put bargraph in second row
(0514) 				#ifdef LCD_AFR_digits
(0515) 					LCD_DrawBG(1,0,16,Lambda_x100);
(0516) 				#else
(0517) 					#ifdef LCD_Lambda_digits
(0518) 						LCD_DrawBG(1,0,16,Lambda_x100);
(0519) 					#else
(0520) 						LCD_DrawBG(0,0,16,Lambda_x100);
(0521) 					#endif
(0522) 				#endif
(0523) 			#endif
(0524) 			
(0525) 			#ifdef LCD_AFR_digits
(0526) 				temp_int=ip-ip_to_AFR_Lookup_Start;
(0527) 				if (temp_int<0)
(0528) 				{
(0529) 					temp_int=0;
(0530) 				}
(0531) 				if (temp_int>(ip_to_AFR_Lookup_Size-1))
(0532) 				{
(0533) 					temp_int=(ip_to_AFR_Lookup_Size-1);
(0534) 				}
(0535) 				temp_byte = temp_int;	// code size optimization
(0536) 				
(0537) 				// AFR integer part (temporarly first digit is always "1")
(0538) 				LCD_Position(0,6);
(0539) 				LCD_WriteData('0' + ((ip_to_AFR_Lookup[temp_byte] & 0xF0) >> 4));
(0540) 				
(0541) 				// AFR decimal point part
(0542) 				LCD_WriteData('.');
(0543) 				LCD_WriteData('0' + (ip_to_AFR_Lookup[temp_byte] & 0x0F));
(0544) 			#endif
(0545) 			
(0546) 			#ifdef LCD_Lambda_digits
(0547) 				temp_int=ip-ip_to_LambdaD_Lookup_Start;	
(0548) 				if (temp_int<0)
(0549) 				{
(0550) 					temp_int=0;
(0551) 				}
(0552) 				if (temp_int>(ip_to_LambdaD_Lookup_Size-1))
(0553) 				{
(0554) 					temp_int=(ip_to_LambdaD_Lookup_Size-1);
(0555) 				}
(0556) 				temp_byte = temp_int;	// code size optimization
(0557) 				
(0558) 				// Lambda int part	
(0559) 				LCD_Position(0,5);
(0560) 				if (temp_byte < 120) 	// 120th value is equal to lambda 1.00
(0561) 					Lambda_x100 = '0';
(0562) 				else
(0563) 					Lambda_x100 = '1';
(0564) 				LCD_WriteData(Lambda_x100);
(0565) 				
(0566) 				// Lambda 0.x part
(0567) 				LCD_WriteData('.');
(0568) 				LCD_WriteData('0' + ((ip_to_Lambda_Lookup[temp_byte] & 0xF0) >> 4));
(0569) 				
(0570) 				// Lambda 0.0x part
(0571) 				LCD_WriteData('0' + (ip_to_Lambda_Lookup[temp_byte] & 0x0F));
(0572) 			#endif
(0573) 			
(0574) 			#ifdef LCD_Temperature_Graph
(0575) 				temp_int=Ri_Delta-Ri_Delta_to_Temperature_C_Start;
(0576) 				if (temp_int<0)
(0577) 				{
(0578) 					temp_int=0;
(0579) 				}
(0580) 				if (temp_int>(Ri_Delta_to_Temperature_C_Size-1))
(0581) 				{
(0582) 					temp_int=(Ri_Delta_to_Temperature_C_Size-1);
(0583) 				}
(0584) 				LSU_Temperature_C=Ri_Delta_to_Graph[temp_int];
(0585) 				LCD_DrawBG(1,0,16,LSU_Temperature_C);
(0586) 			#endif
(0587) 			
(0588) 			#ifdef LCD_Temperature_digits
(0589) 				temp_int=Ri_Delta-Ri_Delta_to_Temperature_C_dig_Start;
(0590) 				if (temp_int<0)
(0591) 				{
(0592) 					temp_int=0;
(0593) 				}
(0594) 				if (temp_int>(Ri_Delta_to_Temperature_C_dig_Size-1))
(0595) 				{
(0596) 					temp_int=(Ri_Delta_to_Temperature_C_dig_Size-1);
(0597) 				}
(0598) 				temp_byte = temp_int;	// code size optimization
(0599) 	
(0600) 				// Temperature hundreds part (7 or 8)	
(0601) 				#ifdef LCD_Lambda_Graph
(0602) 					LCD_Position(0,12);
(0603) 				#else
(0604) 					LCD_Position(1,5);
(0605) 				#endif
(0606) 
(0607) 				if (temp_byte < 15)
(0608) 					Lambda_x100 = '8';
(0609) 				else
(0610) 					Lambda_x100 = '7';
(0611) 				
(0612) 				LCD_WriteData(Lambda_x100);
(0613) 						
(0614) 				// Temperature tens part
(0615) 				LCD_WriteData('0' + ((Ri_Delta_to_dig[temp_int] & 0xF0) >> 4));
(0616) 				
(0617) 				// Temperature ones part
(0618) 				LCD_WriteData('0' + (Ri_Delta_to_dig[temp_int] & 0x0F));
(0619) 			#endif
(0620) 			
(0621) 			#ifdef LED_AFR		
(0622) 				temp_int=ip-ip_to_AFR_Lookup_Start;
    0CC3: 54 02    MOV   [X+2],A
(0623) 				if (temp_int<0)
(0624) 				{
(0625) 					temp_int=0;
(0626) 				}
(0627) 				if (temp_int>(ip_to_AFR_Lookup_Size-1))
(0628) 				{
(0629) 					temp_int=(ip_to_AFR_Lookup_Size-1);
(0630) 				}
(0631) 				temp_byte = temp_int;	// code size optimization
(0632) 				
(0633) 				/*// AFR integer part (temporarly first digit is always "1"), add dot
(0634) 				digits[0] = digitToSegment[(ip_to_AFR_Lookup[temp_byte] & 0xF0) >> 4] | 0x80;
(0635) 				
(0636) 				// AFR decimal part
(0637) 				digits[1] = digitToSegment[ip_to_AFR_Lookup[temp_byte] & 0x0F];
(0638) 				
(0639) 				TM1637_setSegments(digits, 2, 2);*/
(0640) 				
(0641) 				#ifdef LED_Lambda
(0642) 					if ((SWPORT & SWPIN) == 0)
    0CC5: 5D 04    MOV   A,REG[0x4]
    0CC7: 53 11    MOV   [__r0],A
    0CC9: 47 11 80 TST   [__r0],0x80
    0CCC: B0 57    JNZ   0x0D24
(0643) 					{
(0644) 						// AFR integer part (temporarly first digit is always "1"), add dot
(0645) 						digits[1] = digitToSegment[(ip_to_AFR_Lookup[temp_byte] & 0xF0) >> 4] | 0x80;
    0CCE: 52 02    MOV   A,[X+2]
    0CD0: 53 10    MOV   [__r1],A
    0CD2: 55 11 00 MOV   [__r0],0x0
    0CD5: 06 10 EE ADD   [__r1],0xEE
    0CD8: 0E 11 01 ADC   [__r0],0x1
    0CDB: 92 E2    CALL  0x0FBF
    0CDD: 40       NOP   
    0CDE: 29 80    OR    A,0x80
    0CE0: 54 04    MOV   [X+4],A
(0646) 						
(0647) 						// AFR decimal part
(0648) 						digits[2] = digitToSegment[ip_to_AFR_Lookup[temp_byte] & 0x0F];
    0CE2: 52 02    MOV   A,[X+2]
    0CE4: 53 10    MOV   [__r1],A
    0CE6: 55 11 00 MOV   [__r0],0x0
    0CE9: 06 10 EE ADD   [__r1],0xEE
    0CEC: 0E 11 01 ADC   [__r0],0x1
    0CEF: 51 11    MOV   A,[__r0]
    0CF1: 10       PUSH  X
    0CF2: 58 10    MOV   X,[__r1]
    0CF4: 28       ROMX  
    0CF5: 20       POP   X
    0CF6: 53 10    MOV   [__r1],A
    0CF8: 55 11 00 MOV   [__r0],0x0
    0CFB: 26 10 0F AND   [__r1],0xF
    0CFE: 26 11 00 AND   [__r0],0x0
    0D01: 92 EC    CALL  0x0FEF
    0D03: 40       NOP   
    0D04: 54 05    MOV   [X+5],A
(0649) 						
(0650) 						digits[0] = digitToSegment[1]; // temporarly first digit is always "1"
    0D06: 50 03    MOV   A,0x3
    0D08: 10       PUSH  X
    0D09: 57 2B    MOV   X,0x2B
    0D0B: 28       ROMX  
    0D0C: 20       POP   X
    0D0D: 54 03    MOV   [X+3],A
(0651) 						TM1637_setSegments(digits, 3, 1);
    0D0F: 50 01    MOV   A,0x1
    0D11: 08       PUSH  A
    0D12: 50 03    MOV   A,0x3
    0D14: 08       PUSH  A
    0D15: 5A 10    MOV   [__r1],X
    0D17: 06 10 03 ADD   [__r1],0x3
    0D1A: 51 11    MOV   A,[__r0]
    0D1C: 08       PUSH  A
    0D1D: 51 10    MOV   A,[__r1]
    0D1F: 08       PUSH  A
    0D20: 90 F1    CALL  _TM1637_setSegments
    0D22: 38 FC    ADD   SP,0xFC
(0652) 					}	
(0653) 				#else
(0654) 					// AFR integer part (temporarly first digit is always "1"), add dot
(0655) 					digits[0] = digitToSegment[(ip_to_AFR_Lookup[temp_byte] & 0xF0) >> 4] | 0x80;
(0656) 				
(0657) 					// AFR decimal part
(0658) 					digits[1] = digitToSegment[ip_to_AFR_Lookup[temp_byte] & 0x0F];
(0659) 				
(0660) 					TM1637_setSegments(digits, 2, 2);
(0661) 				#endif
(0662) 			#endif
(0663) 			
(0664) 			#ifdef LED_Lambda
(0665) 				temp_int=ip-ip_to_LambdaD_Lookup_Start;	
    0D24: 92 62    CALL  <created procedures>
    0D26: 40       NOP   
    0D27: 54 02    MOV   [X+2],A
(0666) 				if (temp_int<0)
(0667) 				{
(0668) 					temp_int=0;
(0669) 				}
(0670) 				if (temp_int>(ip_to_LambdaD_Lookup_Size-1))
(0671) 				{
(0672) 					temp_int=(ip_to_LambdaD_Lookup_Size-1);
(0673) 				}
(0674) 				temp_byte = temp_int;	// code size optimization
(0675) 				
(0676) 				#ifdef LED_AFR
(0677) 					if ((SWPORT & SWPIN) != 0)
    0D29: 5D 04    MOV   A,REG[0x4]
    0D2B: 53 11    MOV   [__r0],A
    0D2D: 47 11 80 TST   [__r0],0x80
    0D30: A0 69    JZ    0x0D9A
(0678) 					{
(0679) 						// Lambda int part, add dot
(0680) 						if (temp_byte < 120) 	// 120th value is equal to lambda 1.00
    0D32: 3D 02 78 CMP   [X+2],0x78
    0D35: D0 0E    JNC   0x0D44
(0681) 							digits[0] = digitToSegment[0] | 0x80;
    0D37: 50 03    MOV   A,0x3
    0D39: 10       PUSH  X
    0D3A: 57 2A    MOV   X,0x2A
    0D3C: 28       ROMX  
    0D3D: 20       POP   X
    0D3E: 29 80    OR    A,0x80
    0D40: 54 03    MOV   [X+3],A
    0D42: 80 0C    JMP   0x0D4F
(0682) 						else
(0683) 							digits[0] = digitToSegment[1] | 0x80;
    0D44: 50 03    MOV   A,0x3
    0D46: 10       PUSH  X
    0D47: 57 2B    MOV   X,0x2B
    0D49: 28       ROMX  
    0D4A: 20       POP   X
    0D4B: 29 80    OR    A,0x80
    0D4D: 54 03    MOV   [X+3],A
(0684) 					
(0685) 						// Lambda 0.x0 part
(0686) 						digits[1] = digitToSegment[(ip_to_Lambda_Lookup[temp_byte] & 0xF0) >> 4];
    0D4F: 52 02    MOV   A,[X+2]
    0D51: 53 10    MOV   [__r1],A
    0D53: 55 11 00 MOV   [__r0],0x0
    0D56: 06 10 8C ADD   [__r1],0x8C
    0D59: 0E 11 02 ADC   [__r0],0x2
    0D5C: 92 61    CALL  0x0FBF
    0D5E: 40       NOP   
    0D5F: 54 04    MOV   [X+4],A
(0687) 					
(0688) 						// Lambda 0.0x part
(0689) 						digits[2] = digitToSegment[ip_to_Lambda_Lookup[temp_byte] & 0x0F];
    0D61: 52 02    MOV   A,[X+2]
    0D63: 53 10    MOV   [__r1],A
    0D65: 55 11 00 MOV   [__r0],0x0
    0D68: 06 10 8C ADD   [__r1],0x8C
    0D6B: 0E 11 02 ADC   [__r0],0x2
    0D6E: 51 11    MOV   A,[__r0]
    0D70: 10       PUSH  X
    0D71: 58 10    MOV   X,[__r1]
    0D73: 28       ROMX  
    0D74: 20       POP   X
    0D75: 53 10    MOV   [__r1],A
    0D77: 55 11 00 MOV   [__r0],0x0
    0D7A: 26 10 0F AND   [__r1],0xF
    0D7D: 26 11 00 AND   [__r0],0x0
    0D80: 92 6D    CALL  0x0FEF
    0D82: 40       NOP   
    0D83: 54 05    MOV   [X+5],A
(0690) 							
(0691) 						TM1637_setSegments(digits, 3, 1);
    0D85: 50 01    MOV   A,0x1
    0D87: 08       PUSH  A
    0D88: 50 03    MOV   A,0x3
    0D8A: 08       PUSH  A
    0D8B: 5A 10    MOV   [__r1],X
    0D8D: 06 10 03 ADD   [__r1],0x3
    0D90: 51 11    MOV   A,[__r0]
    0D92: 08       PUSH  A
    0D93: 51 10    MOV   A,[__r1]
    0D95: 08       PUSH  A
    0D96: 90 7B    CALL  _TM1637_setSegments
    0D98: 38 FC    ADD   SP,0xFC
(0692) 					}
(0693) 				#else
(0694) 					// Lambda int part, add dot
(0695) 					if (temp_byte < 120) 	// 120th value is equal to lambda 1.00
(0696) 						digits[0] = digitToSegment[0] | 0x80;
(0697) 					else
(0698) 						digits[0] = digitToSegment[1] | 0x80;
(0699) 					
(0700) 					// Lambda 0.x0 part
(0701) 					digits[1] = digitToSegment[(ip_to_Lambda_Lookup[temp_byte] & 0xF0) >> 4];
(0702) 					
(0703) 					// Lambda 0.0x part
(0704) 					digits[2] = digitToSegment[ip_to_Lambda_Lookup[temp_byte] & 0x0F];
(0705) 							
(0706) 					TM1637_setSegments(digits, 3, 1);
(0707) 				#endif
(0708) 			#endif
(0709) 		}
(0710) 		if (Heatup_Heater_Output<255)
    0D9A: 3C 04 FF CMP   [Heatup_Heater_Output],0xFF
    0D9D: DD B0    JNC   0x0B4E
(0711) 		{   
(0712) 			if (Heatup_Counter>Heatup_Counter_Set)
    0D9F: 50 64    MOV   A,0x64
    0DA1: 3A 09    CMP   A,[Heatup_Counter]
    0DA3: D0 06    JNC   0x0DAA
(0713) 			{
(0714) 				Heatup_Counter=0;
    0DA5: 55 09 00 MOV   [Heatup_Counter],0x0
(0715) 				Heatup_Heater_Output++;
    0DA8: 76 04    INC   [Heatup_Heater_Output]
(0716) 			}
(0717) 			if ((Ri_Min>50) && (Ri_Max<475) && (Ri_Delta<Ri_Delta_Target))
    0DAA: 50 32    MOV   A,0x32
    0DAC: 12 34    SUB   A,[Ri_Min+1]
    0DAE: 51 33    MOV   A,[Ri_Min]
    0DB0: 31 80    XOR   A,0x80
    0DB2: 53 0D    MOV   [__rX],A
    0DB4: 50 80    MOV   A,0x80
    0DB6: 1A 0D    SBB   A,[__rX]
    0DB8: DD 95    JNC   0x0B4E
    0DBA: 51 32    MOV   A,[Ri_Max+1]
    0DBC: 11 DB    SUB   A,0xDB
    0DBE: 51 31    MOV   A,[Ri_Max]
    0DC0: 31 80    XOR   A,0x80
    0DC2: 19 81    SBB   A,0x81
    0DC4: DD 89    JNC   0x0B4E
    0DC6: 51 46    MOV   A,[Ri_Delta+1]
    0DC8: 11 8F    SUB   A,0x8F
    0DCA: 51 45    MOV   A,[Ri_Delta]
    0DCC: 31 80    XOR   A,0x80
    0DCE: 19 80    SBB   A,0x80
    0DD0: DD 7D    JNC   0x0B4E
(0718) 			{
(0719) 				Heatup_Heater_Output=255;
    0DD2: 55 04 FF MOV   [Heatup_Heater_Output],0xFF
(0720) 				Ri_Delta_Error_Sum=0;
    0DD5: 55 03 00 MOV   [Ri_Delta_Error_Sum+1],0x0
    0DD8: 55 02 00 MOV   [Ri_Delta_Error_Sum],0x0
(0721) 			}
(0722) 		}
(0723) 	}
    0DDB: 8D 72    JMP   0x0B4E
    0DDD: 38 F3    ADD   SP,0xF3
    0DDF: 20       POP   X
    0DE0: 8F FF    JMP   0x0DE0
(0724) }
(0725) 
(0726) #if defined LED_AFR || defined LED_Lambda
(0727) // ================================================================================
(0728) // === TM1637 control functions ===================================================
(0729) // ================================================================================
(0730) 
(0731) //  Modified (heavily) for PSoC 1 CY8C24423-24 by: dstagegarage@gmail.com
(0732) //  Original author for Arduino: avishorp@gmail.com
(0733) //
(0734) //  This library is free software; you can redistribute it and/or
(0735) //  modify it under the terms of the GNU Lesser General Public
(0736) //  License as published by the Free Software Foundation; either
(0737) //  version 2.1 of the License, or (at your option) any later version.
(0738) //
(0739) //  This library is distributed in the hope that it will be useful,
(0740) //  but WITHOUT ANY WARRANTY; without even the implied warranty of
(0741) //  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
(0742) //  Lesser General Public License for more details.
(0743) //
(0744) //  You should have received a copy of the GNU Lesser General Public
(0745) //  License along with this library; if not, write to the Free Software
(0746) //  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
(0747) 
(0748) // ----------------------------------------
(0749) #if DIO_PORT == 1
(0750) 	#define DIOPORT PRT1DR
(0751) 	#define	DIODM2 PRT1DM2
(0752) 	#define	DIODM1 PRT1DM1
(0753) 	#define	DIODM0 PRT1DM0
(0754) #elif DIO_PORT == 2
(0755) 	#define DIOPORT PRT2DR
(0756) 	#define	DIODM2 PRT2DM2
(0757) 	#define	DIODM1 PRT2DM1
(0758) 	#define	DIODM0 PRT2DM0
(0759) #else
(0760) 	#define DIOPORT PRT0DR
(0761) 	#define	DIODM2 PRT0DM2
(0762) 	#define	DIODM1 PRT0DM1
(0763) 	#define	DIODM0 PRT0DM0
(0764) #endif
(0765) #if CLK_PORT == 1
(0766) 	#define CLKPORT PRT1DR
(0767) 	#define	CLKDM2 PRT1DM2
(0768) 	#define	CLKDM1 PRT1DM1
(0769) 	#define	CLKDM0 PRT1DM0
(0770) #elif CLK_PORT == 2
(0771) 	#define CLKPORT PRT2DR
(0772) 	#define	CLKDM2 PRT2DM2
(0773) 	#define	CLKDM1 PRT2DM1
(0774) 	#define	CLKDM0 PRT2DM0
(0775) #else
(0776) 	#define CLKPORT PRT0DR
(0777) 	#define	CLKDM2 PRT0DM2
(0778) 	#define	CLKDM1 PRT0DM1
(0779) 	#define	CLKDM0 PRT0DM0
(0780) #endif
(0781) #define DIOPIN (1 << DIO_PIN)
(0782) #define CLKPIN (1 << CLK_PIN)
(0783) #define TM1637_CLK_L CLKPORT &= ~CLKPIN
(0784) #define TM1637_CLK_H CLKPORT |= CLKPIN
(0785) #define TM1637_DIO_L DIOPORT &= ~DIOPIN
(0786) #define TM1637_DIO_H DIOPORT |= DIOPIN
(0787) #define TM1637_DIO_READ DIOPORT & DIOPIN
(0788) /*#define IOPIN7	0x80
(0789) #define TM1637_CLK_L PRT1DR &= ~IOPIN7
(0790) #define TM1637_CLK_H PRT1DR |= IOPIN7
(0791) #define TM1637_DIO_L PRT2DR &= ~IOPIN7
(0792) #define TM1637_DIO_H PRT2DR |= IOPIN7
(0793) #define TM1637_DIO_READ PRT2DR & IOPIN7*/
(0794) 
(0795) #define BITDELAY 2
(0796) 
(0797) #define TM1637_I2C_COMM1    0x40
(0798) #define TM1637_I2C_COMM2    0xC0
(0799) #define TM1637_I2C_COMM3    0x80
(0800) 
(0801) BYTE m_brightness = 0x0C;
(0802) 
(0803) /* moved to the top of main.c//
(0804) //      A
(0805) //     ---
(0806) //  F |   | B
(0807) //     -G-
(0808) //  E |   | C
(0809) //     ---
(0810) //      D
(0811) const BYTE digitToSegment[] = {
(0812)  // XGFEDCBA
(0813)   0b00111111,    // 0
(0814)   0b00000110,    // 1
(0815)   0b01011011,    // 2
(0816)   0b01001111,    // 3
(0817)   0b01100110,    // 4
(0818)   0b01101101,    // 5
(0819)   0b01111101,    // 6
(0820)   0b00000111,    // 7
(0821)   0b01111111,    // 8
(0822)   0b01101111,    // 9
(0823)   //0b01110111,    // A
(0824)   //0b01111100,    // b
(0825)   //0b00111001,    // C
(0826)   //0b01011110,    // d
(0827)   //0b01111001,    // E
(0828)   //0b01110001     // F
(0829)   };*/
(0830) 
(0831) //static const BYTE minusSegments = 0b01000000;
(0832) 
(0833) void TM1637_init(void)
(0834) {
(0835) 	// DStage DSpeed has extra pads for pins P1.7 and P2.7 and programming pins P1.0 and P1.1
(0836) 	// DStage WBOOS has extra pads for pins P0.4, P1.2, P1.3, P1.7, P2.7, programming pins P1.0 and P1.1 and all LCD pins are free in this mode
(0837) 	
(0838) 	// CLK line 
(0839) 	// 001 strong high and low; theoritically it should be resistive high strong low to allow for display response but
(0840) 	// it requires stronger pull-up resistor most likey and was ustable in experiments, would be good to check current when ACK i aplied by the display
(0841) 	CLKDM2 &= ~CLKPIN;
_TM1637_init:
    0DE2: 41 07 FD AND   REG[0x7],0xFD
(0842) 	CLKDM1 &= ~CLKPIN;
    0DE5: 71 10    OR    F,0x10
    0DE7: 41 05 FD AND   REG[0x5],0xFD
(0843) 	CLKDM0 |= CLKPIN;
    0DEA: 43 04 02 OR    REG[0x4],0x2
(0844) 	TM1637_CLK_H;
    0DED: 70 CF    AND   F,0xCF
    0DEF: 43 04 02 OR    REG[0x4],0x2
(0845) 	
(0846) 	// DIO line
(0847) 	// 001 strong high and low; theoritically it should be resistive high strong low to allow for display response but
(0848) 	// it requires stronger pull-up resistor most likey and was ustable in experiments, would be good to check current when ACK i aplied by the display
(0849) 	DIODM2 &= ~DIOPIN;
    0DF2: 41 07 FE AND   REG[0x7],0xFE
(0850) 	DIODM1 &= ~DIOPIN;
    0DF5: 71 10    OR    F,0x10
    0DF7: 41 05 FE AND   REG[0x5],0xFE
(0851) 	DIODM0 |= DIOPIN;
    0DFA: 43 04 01 OR    REG[0x4],0x1
(0852) 	TM1637_DIO_H;
    0DFD: 70 CF    AND   F,0xCF
    0DFF: 43 04 01 OR    REG[0x4],0x1
(0853) 	
(0854) 	#if defined LED_AFR && defined LED_Lambda
(0855) 		// LED AFR/Lambda switch line
(0856) 		// 011 resistive high (pull-up), strong low -> used as input with pull-up, recommended external pull-up or direct high/low state switching
(0857) 		SWDM2 &= ~SWPIN;
    0E02: 41 07 7F AND   REG[0x7],0x7F
(0858) 		SWDM1 |= SWPIN;
    0E05: 71 10    OR    F,0x10
    0E07: 43 05 80 OR    REG[0x5],0x80
(0859) 		SWDM0 |= SWPIN;
    0E0A: 43 04 80 OR    REG[0x4],0x80
(0860) 		SWPORT |= SWPIN;
    0E0D: 70 CF    AND   F,0xCF
    0E0F: 43 04 80 OR    REG[0x4],0x80
    0E12: 7F       RET   
(0861) 	#endif
(0862) }
(0863) 
(0864) /*void TM1637_setBrightness(BYTE brightness, BYTE on)
(0865) {
(0866) 	m_brightness = (brightness & 0x7) | (on? 0x08 : 0x00);
(0867) }*/
(0868) 
(0869) void TM1637_setSegments(BYTE segments[], BYTE length, BYTE pos)
(0870) {
_TM1637_setSegments:
  k                    --> X+0
  pos                  --> X-7
  length               --> X-6
  segments             --> X-5
    0E13: 10       PUSH  X
    0E14: 4F       MOV   X,SP
    0E15: 38 01    ADD   SP,0x1
(0871) 	BYTE k;
(0872)     // Write COMM1
(0873) 	TM1637_start();
    0E17: 90 45    CALL  _TM1637_start
(0874) 	TM1637_writeByte(TM1637_I2C_COMM1);
    0E19: 50 40    MOV   A,0x40
    0E1B: 08       PUSH  A
    0E1C: 90 6A    CALL  _TM1637_writeByte
(0875) 	TM1637_stop();
    0E1E: 90 49    CALL  _TM1637_stop
(0876) 
(0877) 	// Write COMM2 + first digit address
(0878) 	TM1637_start();
    0E20: 90 3C    CALL  _TM1637_start
(0879) 	TM1637_writeByte(TM1637_I2C_COMM2 + (pos & 0x03));
    0E22: 52 F9    MOV   A,[X-7]
    0E24: 21 03    AND   A,0x3
    0E26: 01 C0    ADD   A,0xC0
    0E28: 08       PUSH  A
    0E29: 90 5D    CALL  _TM1637_writeByte
    0E2B: 38 FE    ADD   SP,0xFE
(0880) 
(0881) 	// Write the data bytes
(0882) 	for (k=0; k < length; k++)
    0E2D: 56 00 00 MOV   [X+0],0x0
    0E30: 80 12    JMP   0x0E43
(0883) 	  TM1637_writeByte(segments[k]);
    0E32: 52 00    MOV   A,[X+0]
    0E34: 53 10    MOV   [__r1],A
    0E36: 52 FC    MOV   A,[X-4]
    0E38: 04 10    ADD   [__r1],A
    0E3A: 3E 10    MVI   A,[__r1]
    0E3C: 08       PUSH  A
    0E3D: 90 49    CALL  _TM1637_writeByte
    0E3F: 38 FF    ADD   SP,0xFF
    0E41: 77 00    INC   [X+0]
    0E43: 52 00    MOV   A,[X+0]
    0E45: 3B FA    CMP   A,[X-6]
    0E47: CF EA    JC    0x0E32
(0884) 
(0885) 	TM1637_stop();
    0E49: 90 1E    CALL  _TM1637_stop
(0886) 
(0887) 	// Write COMM3 + brightness
(0888) 	TM1637_start();
    0E4B: 90 11    CALL  _TM1637_start
(0889) 	TM1637_writeByte(TM1637_I2C_COMM3 + (m_brightness & 0x0f));
    0E4D: 51 0A    MOV   A,[m_brightness]
    0E4F: 21 0F    AND   A,0xF
    0E51: 01 80    ADD   A,0x80
    0E53: 08       PUSH  A
    0E54: 90 32    CALL  _TM1637_writeByte
    0E56: 38 FF    ADD   SP,0xFF
(0890) 	TM1637_stop();
    0E58: 90 0F    CALL  _TM1637_stop
    0E5A: 38 FF    ADD   SP,0xFF
    0E5C: 20       POP   X
    0E5D: 7F       RET   
(0891) }
(0892) 
(0893) /*void TM1637_clear()
(0894) {
(0895)     BYTE data[] = { 0, 0, 0, 0 };
(0896) 	TM1637_setSegments(data);
(0897) }*/
(0898) /*
(0899) void TM1637_showNumberDec(int num, BYTE leading_zero, BYTE length, BYTE pos)
(0900) {
(0901)   TM1637_showNumberDecEx(num, 0, leading_zero, length, pos);
(0902) }
(0903) 
(0904) void TM1637_showNumberDecEx(int num, BYTE dots, BYTE leading_zero, BYTE length, BYTE pos)
(0905) {
(0906)   TM1637_showNumberBaseEx(num < 0? -10 : 10, num < 0? -num : num, dots, leading_zero, length, pos);
(0907) }
(0908) 
(0909) void TM1637_showNumberHexEx(unsigned int num, BYTE dots, BYTE leading_zero, BYTE length, BYTE pos)
(0910) {
(0911)   TM1637_showNumberBaseEx(16, num, dots, leading_zero, length, pos);
(0912) }
(0913) 
(0914) void TM1637_showNumberBaseEx(BYTE base, unsigned int num, BYTE dots, BYTE leading_zero, BYTE length, BYTE pos)
(0915) {
(0916) 	int i;
(0917)     BYTE negative = 0;
(0918) 	BYTE digits[4];
(0919) 	BYTE digit;
(0920) 	
(0921) 	if (base < 0) 
(0922) 	{
(0923) 	    base = -base;
(0924) 		negative = 1;
(0925) 	}
(0926) 
(0927) 	if (num == 0 && !leading_zero) 
(0928) 	{
(0929) 		// Singular case - take care separately
(0930) 		for(i = 0; i < (length-1); i++)
(0931) 			digits[i] = 0;
(0932) 		digits[length-1] = TM1637_encodeDigit(0);
(0933) 	}
(0934) 	else 
(0935) 	{
(0936) 		//uint8_t i = length-1;
(0937) 		//if (negative) {
(0938) 		//	// Negative number, show the minus sign
(0939) 		//    digits[i] = minusSegments;
(0940) 		//	i--;
(0941) 		//}
(0942) 		
(0943) 		for(i = length-1; i >= 0; --i)
(0944) 		{
(0945) 		    digit = num % base;
(0946) 			
(0947) 			if (digit == 0 && num == 0 && leading_zero == 0)
(0948) 			    // Leading zero is blank
(0949) 				digits[i] = 0;
(0950) 			else
(0951) 			    digits[i] = TM1637_encodeDigit(digit);
(0952) 				
(0953) 			if (digit == 0 && num == 0 && negative) 
(0954) 			{
(0955) 			    digits[i] = minusSegments;
(0956) 				negative = 0;
(0957) 			}
(0958) 
(0959) 			num /= base;
(0960) 		}
(0961)     }
(0962) 	
(0963) 	if(dots != 0)
(0964) 	{
(0965) 		TM1637_showDots(dots, digits);
(0966) 	}
(0967)     
(0968)     TM1637_setSegments(digits, length, pos);
(0969) }
(0970) */
(0971) /*void TM1637_LCD_Delay50uTimes(BITDELAY)
(0972) {
(0973) 	TM1637_delayMicroseconds(m_bitDelay);
(0974) }*/
(0975) 
(0976) void TM1637_start(void)
(0977) {
(0978)   TM1637_DIO_L;
_TM1637_start:
    0E5E: 41 04 FE AND   REG[0x4],0xFE
(0979)   LCD_Delay50uTimes(BITDELAY);
    0E61: 10       PUSH  X
    0E62: 50 02    MOV   A,0x2
    0E64: 7C 06 26 LCALL _LCD_Delay50uTimes
    0E67: 20       POP   X
    0E68: 7F       RET   
(0980) }
(0981) 
(0982) void TM1637_stop(void)
(0983) {
(0984) 	TM1637_DIO_L;
_TM1637_stop:
    0E69: 41 04 FE AND   REG[0x4],0xFE
(0985) 	LCD_Delay50uTimes(BITDELAY);
    0E6C: 10       PUSH  X
    0E6D: 50 02    MOV   A,0x2
    0E6F: 7C 06 26 LCALL _LCD_Delay50uTimes
    0E72: 20       POP   X
(0986) 	TM1637_CLK_H;
    0E73: 43 04 02 OR    REG[0x4],0x2
(0987) 	LCD_Delay50uTimes(BITDELAY);
    0E76: 10       PUSH  X
    0E77: 50 02    MOV   A,0x2
    0E79: 7C 06 26 LCALL _LCD_Delay50uTimes
    0E7C: 20       POP   X
(0988) 	TM1637_DIO_H;
    0E7D: 43 04 01 OR    REG[0x4],0x1
(0989) 	LCD_Delay50uTimes(BITDELAY);
    0E80: 10       PUSH  X
    0E81: 50 02    MOV   A,0x2
    0E83: 7C 06 26 LCALL _LCD_Delay50uTimes
    0E86: 20       POP   X
    0E87: 7F       RET   
(0990) }
(0991) 
(0992) BYTE TM1637_writeByte(BYTE b)
(0993) {
_TM1637_writeByte:
  ack                  --> X+2
  i                    --> X+1
  data                 --> X+0
  b                    --> X-4
    0E88: 10       PUSH  X
    0E89: 4F       MOV   X,SP
    0E8A: 38 03    ADD   SP,0x3
(0994)   BYTE data = b;
    0E8C: 52 FC    MOV   A,[X-4]
    0E8E: 54 00    MOV   [X+0],A
(0995)   BYTE i, ack;
(0996) 
(0997)   // 8 Data Bits
(0998)   for(i = 0; i < 8; i++) {
    0E90: 56 01 00 MOV   [X+1],0x0
    0E93: 80 2F    JMP   0x0EC3
(0999)     // CLK low
(1000)     TM1637_CLK_L;
    0E95: 41 04 FD AND   REG[0x4],0xFD
(1001)     LCD_Delay50uTimes(BITDELAY);
    0E98: 10       PUSH  X
    0E99: 50 02    MOV   A,0x2
    0E9B: 7C 06 26 LCALL _LCD_Delay50uTimes
    0E9E: 20       POP   X
(1002) 
(1003) 	// Set data bit
(1004)     if (data & 0x01)
    0E9F: 48 00 01 TST   [X+0],0x1
    0EA2: A0 06    JZ    0x0EA9
(1005)       TM1637_DIO_H;
    0EA4: 43 04 01 OR    REG[0x4],0x1
    0EA7: 80 04    JMP   0x0EAC
(1006)     else
(1007)       TM1637_DIO_L;
    0EA9: 41 04 FE AND   REG[0x4],0xFE
(1008) 
(1009)     LCD_Delay50uTimes(BITDELAY);
    0EAC: 10       PUSH  X
    0EAD: 50 02    MOV   A,0x2
    0EAF: 7C 06 26 LCALL _LCD_Delay50uTimes
    0EB2: 20       POP   X
(1010) 
(1011) 	// CLK high
(1012)     TM1637_CLK_H;
    0EB3: 43 04 02 OR    REG[0x4],0x2
(1013)     LCD_Delay50uTimes(BITDELAY);
    0EB6: 10       PUSH  X
    0EB7: 50 02    MOV   A,0x2
    0EB9: 7C 06 26 LCALL _LCD_Delay50uTimes
    0EBC: 20       POP   X
(1014)     data = data >> 1;
    0EBD: 70 FB    AND   F,0xFB
    0EBF: 6F 00    RRC   [X+0]
(1015)   }
    0EC1: 77 01    INC   [X+1]
    0EC3: 3D 01 08 CMP   [X+1],0x8
    0EC6: CF CE    JC    0x0E95
(1016) 
(1017)   // Wait for acknowledge
(1018)   // CLK to zero
(1019)   TM1637_CLK_L;
    0EC8: 41 04 FD AND   REG[0x4],0xFD
(1020)   TM1637_DIO_H;
    0ECB: 43 04 01 OR    REG[0x4],0x1
(1021)   LCD_Delay50uTimes(BITDELAY);
    0ECE: 10       PUSH  X
    0ECF: 50 02    MOV   A,0x2
    0ED1: 7C 06 26 LCALL _LCD_Delay50uTimes
    0ED4: 20       POP   X
(1022) 
(1023)   // CLK to high
(1024)   TM1637_CLK_H;
    0ED5: 43 04 02 OR    REG[0x4],0x2
(1025)   LCD_Delay50uTimes(BITDELAY);
    0ED8: 10       PUSH  X
    0ED9: 50 02    MOV   A,0x2
    0EDB: 7C 06 26 LCALL _LCD_Delay50uTimes
    0EDE: 20       POP   X
(1026)   ack = TM1637_DIO_READ; //digitalRead(m_pinDIO);
    0EDF: 5D 04    MOV   A,REG[0x4]
    0EE1: 21 01    AND   A,0x1
    0EE3: 54 02    MOV   [X+2],A
(1027)   if (ack == 0)
    0EE5: 3D 02 00 CMP   [X+2],0x0
    0EE8: B0 04    JNZ   0x0EED
(1028)     TM1637_DIO_L;
    0EEA: 41 04 FE AND   REG[0x4],0xFE
(1029) 
(1030)   LCD_Delay50uTimes(BITDELAY);
    0EED: 10       PUSH  X
    0EEE: 50 02    MOV   A,0x2
    0EF0: 7C 06 26 LCALL _LCD_Delay50uTimes
    0EF3: 20       POP   X
(1031)   TM1637_CLK_L;
    0EF4: 41 04 FD AND   REG[0x4],0xFD
(1032)   LCD_Delay50uTimes(BITDELAY);
    0EF7: 10       PUSH  X
    0EF8: 50 02    MOV   A,0x2
    0EFA: 7C 06 26 LCALL _LCD_Delay50uTimes
    0EFD: 20       POP   X
(1033)   
(1034)   if (ack == 0)
    0EFE: 3D 02 00 CMP   [X+2],0x0
    0F01: B0 05    JNZ   0x0F07
(1035)   	return 0;
    0F03: 50 00    MOV   A,0x0
    0F05: 80 03    JMP   0x0F09
(1036)   else
(1037)     return 1;
    0F07: 50 01    MOV   A,0x1
(1038)   //return ack;
(1039) }
(1040) 
(1041) /*void TM1637_showDots(BYTE dots, BYTE* digits)
(1042) {
(1043) 	BYTE i;
(1044)     for(i = 0; i < 4; ++i)
(1045)     {
(1046)         digits[i] |= (dots & 0x80);
(1047)         dots <<= 1;
(1048)     }
(1049) }
(1050) 
(1051) BYTE TM1637_encodeDigit(BYTE digit)
(1052) {
(1053) 	return digitToSegment[digit & 0x0f];
(1054) }*/
(1055) // ================================================================================
(1056) #endif    0F09: 38 FD    ADD   SP,0xFD
    0F0B: 20       POP   X
    0F0C: 7F       RET   
<created procedures>:
    0F88: 51 30    MOV   A,[ip+1]
    0F8A: 11 87    SUB   A,0x87
    0F8C: 54 01    MOV   [X+1],A
    0F8E: 51 2F    MOV   A,[ip]
    0F90: 19 00    SBB   A,0x0
    0F92: 54 00    MOV   [X+0],A
    0F94: 52 01    MOV   A,[X+1]
    0F96: 11 00    SUB   A,0x0
    0F98: 52 00    MOV   A,[X+0]
    0F9A: 31 80    XOR   A,0x80
    0F9C: 19 80    SBB   A,0x80
    0F9E: D0 07    JNC   0x0FA6
    0FA0: 56 01 00 MOV   [X+1],0x0
    0FA3: 56 00 00 MOV   [X+0],0x0
    0FA6: 50 9D    MOV   A,0x9D
    0FA8: 13 01    SUB   A,[X+1]
    0FAA: 52 00    MOV   A,[X+0]
    0FAC: 31 80    XOR   A,0x80
    0FAE: 53 0D    MOV   [__rX],A
    0FB0: 50 80    MOV   A,0x80
    0FB2: 1A 0D    SBB   A,[__rX]
    0FB4: D0 07    JNC   0x0FBC
    0FB6: 56 01 9D MOV   [X+1],0x9D
    0FB9: 56 00 00 MOV   [X+0],0x0
    0FBC: 52 01    MOV   A,[X+1]
    0FBE: 7F       RET   
    0FBF: 51 11    MOV   A,[__r0]
    0FC1: 10       PUSH  X
    0FC2: 58 10    MOV   X,[__r1]
    0FC4: 28       ROMX  
    0FC5: 20       POP   X
    0FC6: 53 10    MOV   [__r1],A
    0FC8: 55 11 00 MOV   [__r0],0x0
    0FCB: 26 10 F0 AND   [__r1],0xF0
    0FCE: 26 11 00 AND   [__r0],0x0
    0FD1: 68 11    ASR   [__r0]
    0FD3: 6E 10    RRC   [__r1]
    0FD5: 68 11    ASR   [__r0]
    0FD7: 6E 10    RRC   [__r1]
    0FD9: 68 11    ASR   [__r0]
    0FDB: 6E 10    RRC   [__r1]
    0FDD: 68 11    ASR   [__r0]
    0FDF: 6E 10    RRC   [__r1]
    0FE1: 06 10 2A ADD   [__r1],0x2A
    0FE4: 0E 11 03 ADC   [__r0],0x3
    0FE7: 51 11    MOV   A,[__r0]
    0FE9: 10       PUSH  X
    0FEA: 58 10    MOV   X,[__r1]
    0FEC: 28       ROMX  
    0FED: 20       POP   X
    0FEE: 7F       RET   
    0FEF: 06 10 2A ADD   [__r1],0x2A
    0FF2: 0E 11 03 ADC   [__r0],0x3
    0FF5: 51 11    MOV   A,[__r0]
    0FF7: 10       PUSH  X
    0FF8: 58 10    MOV   X,[__r1]
    0FFA: 28       ROMX  
    0FFB: 20       POP   X
    0FFC: 7F       RET   
