                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
                        .area lit(rom, con, rel, lit)
 0000           _ip_to_Vout_Lookup::
 0000 0001              .byte 0,1
 0002 0102              .byte 1,2
 0004 0304              .byte 3,4
 0006 0405              .byte 4,5
 0008 0607              .byte 6,7
 000A 0808              .byte 8,8
 000C 090A              .byte 9,10
 000E 0B0C              .byte 11,12
 0010 0C0D              .byte 12,13
 0012 0E0F              .byte 14,15
 0014 1011              .byte 16,17
 0016 1112              .byte 17,18
 0018 1314              .byte 19,20
 001A 1516              .byte 21,22
 001C 1617              .byte 22,23
 001E 1819              .byte 24,25
 0020 1A1B              .byte 26,27
 0022 1B1C              .byte 27,28
 0024 1D1E              .byte 29,30
 0026 1F20              .byte 31,32
 0028 2122              .byte 33,34
 002A 2223              .byte 34,35
 002C 2425              .byte 36,37
 002E 2627              .byte 38,39
 0030 2829              .byte 40,41
 0032 2A2B              .byte 42,43
 0034 2C2C              .byte 44,44
 0036 2D2E              .byte 45,46
 0038 2F30              .byte 47,48
 003A 3132              .byte 49,50
 003C 3334              .byte 51,52
 003E 3536              .byte 53,54
 0040 3738              .byte 55,56
 0042 393A              .byte 57,58
 0044 3B3C              .byte 59,60
 0046 3D3E              .byte 61,62
 0048 3F40              .byte 63,64
 004A 4142              .byte 'A,'B
 004C 4344              .byte 'C,'D
 004E 4546              .byte 'E,'F
 0050 4748              .byte 'G,'H
 0052 494A              .byte 'I,'J
 0054 4C4D              .byte 'L,'M
 0056 4E4F              .byte 'N,'O
 0058 5051              .byte 'P,'Q
 005A 5253              .byte 'R,'S
 005C 5456              .byte 'T,'V
 005E 5758              .byte 'W,'X
 0060 595A              .byte 'Y,'Z
 0062 5B5C              .byte 91,92
 0064 5E5F              .byte 94,95
 0066 6061              .byte 96,'a
 0068 6264              .byte 'b,'d
 006A 6566              .byte 'e,'f
 006C 6769              .byte 'g,'i
 006E 6A6B              .byte 'j,'k
 0070 6C6E              .byte 'l,'n
 0072 6F70              .byte 'o,'p
 0074 7173              .byte 'q,'s
 0076 7475              .byte 't,'u
 0078 7778              .byte 'w,'x
 007A 7B7E              .byte 123,126
 007C 8184              .byte 129,132
 007E 878A              .byte 135,138
 0080 8D90              .byte 141,144
 0082 9397              .byte 147,151
 0084 9A9D              .byte 154,157
 0086 A1A4              .byte 161,164
 0088 A8AB              .byte 168,171
 008A AFB2              .byte 175,178
 008C B6BA              .byte 182,186
 008E BEC2              .byte 190,194
 0090 C5C9              .byte 197,201
 0092 CED2              .byte 206,210
 0094 D6DA              .byte 214,218
 0096 DEE3              .byte 222,227
 0098 E7EC              .byte 231,236
 009A F0F5              .byte 240,245
 009C FAFF              .byte 250,255
 009E                   .dbfile I:\PSOCDO~1\WBOOS_~2\DSTAGE~1\DSTAGE~1\main.c
 009E                   .dbsym e ip_to_Vout_Lookup _ip_to_Vout_Lookup A[158:158]kc
 009E           _ip_to_AFR_Lookup::
 009E FC00              .byte 252,0
 00A0 0001              .byte 0,1
 00A2 0102              .byte 1,2
 00A4 0202              .byte 2,2
 00A6 0203              .byte 2,3
 00A8 0303              .byte 3,3
 00AA 0404              .byte 4,4
 00AC 0405              .byte 4,5
 00AE 0505              .byte 5,5
 00B0 0506              .byte 5,6
 00B2 0607              .byte 6,7
 00B4 0707              .byte 7,7
 00B6 0708              .byte 7,8
 00B8 0809              .byte 8,9
 00BA 0909              .byte 9,9
 00BC 0910              .byte 9,16
 00BE 1011              .byte 16,17
 00C0 1111              .byte 17,17
 00C2 1212              .byte 18,18
 00C4 1213              .byte 18,19
 00C6 1313              .byte 19,19
 00C8 1314              .byte 19,20
 00CA 1415              .byte 20,21
 00CC 1515              .byte 21,21
 00CE 1616              .byte 22,22
 00D0 1617              .byte 22,23
 00D2 1717              .byte 23,23
 00D4 1818              .byte 24,24
 00D6 1819              .byte 24,25
 00D8 1920              .byte 25,32
 00DA 2020              .byte 32,32
 00DC 2121              .byte 33,33
 00DE 2222              .byte 34,34
 00E0 2223              .byte 34,35
 00E2 2324              .byte 35,36
 00E4 2424              .byte 36,36
 00E6 2525              .byte 37,37
 00E8 2526              .byte 37,38
 00EA 2627              .byte 38,39
 00EC 2727              .byte 39,39
 00EE 2828              .byte 40,40
 00F0 2929              .byte 41,41
 00F2 3030              .byte 48,48
 00F4 3131              .byte 49,49
 00F6 3132              .byte 49,50
 00F8 3233              .byte 50,51
 00FA 3334              .byte 51,52
 00FC 3435              .byte 52,53
 00FE 3535              .byte 53,53
 0100 3636              .byte 54,54
 0102 3737              .byte 55,55
 0104 3838              .byte 56,56
 0106 3839              .byte 56,57
 0108 4040              .byte 64,64
 010A 4041              .byte 64,'A
 010C 4242              .byte 'B,'B
 010E 4243              .byte 'B,'C
 0110 4444              .byte 'D,'D
 0112 4445              .byte 'D,'E
 0114 4546              .byte 'E,'F
 0116 4747              .byte 'G,'G
 0118 4849              .byte 'H,'I
 011A 5152              .byte 'Q,'R
 011C 5354              .byte 'S,'T
 011E 5556              .byte 'U,'V
 0120 5859              .byte 'X,'Y
 0122 6062              .byte 96,'b
 0124 6364              .byte 'c,'d
 0126 6667              .byte 'f,'g
 0128 6970              .byte 'i,'p
 012A 7173              .byte 'q,'s
 012C 7576              .byte 'u,'v
 012E 7779              .byte 'w,'y
 0130 8182              .byte 129,130
 0132 8485              .byte 132,133
 0134 8789              .byte 135,137
 0136 9193              .byte 145,147
 0138 9496              .byte 148,150
 013A 98FE              .byte 152,254
 013C                   .dbsym e ip_to_AFR_Lookup _ip_to_AFR_Lookup A[158:158]kc
 013C           _ip_to_Lambda_Lookup::
 013C FC68              .byte 252,'h
 013E 6869              .byte 'h,'i
 0140 6969              .byte 'i,'i
 0142 6969              .byte 'i,'i
 0144 7070              .byte 'p,'p
 0146 7070              .byte 'p,'p
 0148 7071              .byte 'p,'q
 014A 7171              .byte 'q,'q
 014C 7172              .byte 'q,'r
 014E 7272              .byte 'r,'r
 0150 7272              .byte 'r,'r
 0152 7373              .byte 's,'s
 0154 7373              .byte 's,'s
 0156 7474              .byte 't,'t
 0158 7474              .byte 't,'t
 015A 7475              .byte 't,'u
 015C 7575              .byte 'u,'u
 015E 7576              .byte 'u,'v
 0160 7676              .byte 'v,'v
 0162 7676              .byte 'v,'v
 0164 7777              .byte 'w,'w
 0166 7777              .byte 'w,'w
 0168 7878              .byte 'x,'x
 016A 7878              .byte 'x,'x
 016C 7979              .byte 'y,'y
 016E 7979              .byte 'y,'y
 0170 8080              .byte 128,128
 0172 8080              .byte 128,128
 0174 8181              .byte 129,129
 0176 8181              .byte 129,129
 0178 8282              .byte 130,130
 017A 8282              .byte 130,130
 017C 8383              .byte 131,131
 017E 8383              .byte 131,131
 0180 8484              .byte 132,132
 0182 8485              .byte 132,133
 0184 8585              .byte 133,133
 0186 8586              .byte 133,134
 0188 8686              .byte 134,134
 018A 8687              .byte 134,135
 018C 8787              .byte 135,135
 018E 8888              .byte 136,136
 0190 8888              .byte 136,136
 0192 8989              .byte 137,137
 0194 8990              .byte 137,144
 0196 9090              .byte 144,144
 0198 9191              .byte 145,145
 019A 9191              .byte 145,145
 019C 9292              .byte 146,146
 019E 9293              .byte 146,147
 01A0 9393              .byte 147,147
 01A2 9494              .byte 148,148
 01A4 9495              .byte 148,149
 01A6 9595              .byte 149,149
 01A8 9696              .byte 150,150
 01AA 9697              .byte 150,151
 01AC 9797              .byte 151,151
 01AE 9898              .byte 152,152
 01B0 9899              .byte 152,153
 01B2 9999              .byte 153,153
 01B4 0000              .byte 0,0
 01B6 0102              .byte 1,2
 01B8 0203              .byte 2,3
 01BA 0405              .byte 4,5
 01BC 0606              .byte 6,6
 01BE 0708              .byte 7,8
 01C0 0910              .byte 9,16
 01C2 1112              .byte 17,18
 01C4 1314              .byte 19,20
 01C6 1516              .byte 21,22
 01C8 1718              .byte 23,24
 01CA 1920              .byte 25,32
 01CC 2122              .byte 33,34
 01CE 2324              .byte 35,36
 01D0 2526              .byte 37,38
 01D2 2728              .byte 39,40
 01D4 3031              .byte 48,49
 01D6 3233              .byte 50,51
 01D8 35FE              .byte 53,254
 01DA                   .dbsym e ip_to_Lambda_Lookup _ip_to_Lambda_Lookup A[158:158]kc
 01DA           _Ri_Delta_to_dig::
 01DA FE18              .byte 254,24
 01DC 1715              .byte 23,21
 01DE 1413              .byte 20,19
 01E0 1110              .byte 17,16
 01E2 0807              .byte 8,7
 01E4 0504              .byte 5,4
 01E6 0301              .byte 3,1
 01E8 0099              .byte 0,153
 01EA 9896              .byte 152,150
 01EC 9594              .byte 149,148
 01EE 9291              .byte 146,145
 01F0 9089              .byte 144,137
 01F2 8886              .byte 136,134
 01F4 8584              .byte 133,132
 01F6 8382              .byte 131,130
 01F8 8180              .byte 129,128
 01FA 7977              .byte 'y,'w
 01FC 7675              .byte 'v,'u
 01FE 7473              .byte 't,'s
 0200 7271              .byte 'r,'q
 0202 7069              .byte 'p,'i
 0204 6867              .byte 'h,'g
 0206 6665              .byte 'f,'e
 0208 6463              .byte 'd,'c
 020A 6261              .byte 'b,'a
 020C 6059              .byte 96,'Y
 020E 5858              .byte 'X,'X
 0210 5756              .byte 'W,'V
 0212 5554              .byte 'U,'T
 0214 5352              .byte 'S,'R
 0216 5151              .byte 'Q,'Q
 0218 5049              .byte 'P,'I
 021A 4847              .byte 'H,'G
 021C 4645              .byte 'F,'E
 021E 4544              .byte 'E,'D
 0220 4342              .byte 'C,'B
 0222 4140              .byte 'A,64
 0224 FC                .byte 252
 0225                   .dbsym e Ri_Delta_to_dig _Ri_Delta_to_dig A[75:75]kc
                        .area data(ram, con, rel)
 0000                   .dbfile I:\PSOCDO~1\WBOOS_~2\DSTAGE~1\DSTAGE~1\main.c
 0000           _Ri_Mid_Error_Sum::
 0000                   .blkb 2
                        .area idata(rom,lit)
 0000 0000              .word 0
                        .area data(ram, con, rel)
 0002                   .dbfile I:\PSOCDO~1\WBOOS_~2\DSTAGE~1\DSTAGE~1\main.c
 0002                   .dbsym e Ri_Mid_Error_Sum _Ri_Mid_Error_Sum I
 0002           _Ri_Delta_Error_Sum::
 0002                   .blkb 2
                        .area idata(rom,lit)
 0002 0000              .word 0
                        .area data(ram, con, rel)
 0004                   .dbfile I:\PSOCDO~1\WBOOS_~2\DSTAGE~1\DSTAGE~1\main.c
 0004                   .dbsym e Ri_Delta_Error_Sum _Ri_Delta_Error_Sum I
 0004           _Heatup_Heater_Output::
 0004                   .blkb 1
                        .area idata(rom,lit)
 0004 64                .byte 100
                        .area data(ram, con, rel)
 0005                   .dbfile I:\PSOCDO~1\WBOOS_~2\DSTAGE~1\DSTAGE~1\main.c
 0005                   .dbsym e Heatup_Heater_Output _Heatup_Heater_Output c
                        .area text(rom, con, rel)
 0000                   .dbfile I:\PSOCDO~1\WBOOS_~2\DSTAGE~1\DSTAGE~1\main.c
 0000                   .dbfunc e Heater_PID _Heater_PID fV
 0000           _Heater_PID::
 0000                   .dbline -1
 0000                   .dbline 231
 0000           ; // =========================================================================================
 0000           ; // === DStage WBOOS - SLC Free tribute =====================================================
 0000           ; // =========================================================================================
 0000           ; // This program is a heavily modified version of the 
 0000           ; // 14point7 SLC Free open wideband oxygen sensor controller
 0000           ; //
 0000           ; // Version 1.2.0 2025.02.02
 0000           ; // 
 0000           ; // email: dstagegarage@gmail.com
 0000           ; // YT: www.youtube.com/DStageGarage
 0000           ; // GitHub: https://github.com/DStageGarage/WBOOS/
 0000           ; // =========================================================================================
 0000           ; 
 0000           ; //----------------------------------------------------------------------------
 0000           ; // C main line
 0000           ; //----------------------------------------------------------------------------
 0000           ; #include <m8c.h>        // part specific constants and macros
 0000           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0000           ; extern BYTE ADC_Counter; //Variable Declared in ADCININT.asm
 0000           ; extern BYTE Ri_Max_x1; //Variable Declared in ADCININT.asm
 0000           ; extern BYTE Ri_Min_x1; //Variable Declared in ADCININT.asm
 0000           ; extern BYTE ip_x1; //Variable Declared in ADCININT.asm
 0000           ; extern BYTE ADC_IF; //Variable Declared in ADCININT.asm
 0000           ; extern BYTE Sleep_Counter; //Variable Declared in SleepTimerINT.asm
 0000           ; 
 0000           ; #define Vout_Lookup_Counter_Set 25
 0000           ; 
 0000           ; //============================================
 0000           ; // Configure system here
 0000           ; //============================================
 0000           ; // set how often display gets refreshed, 50 is a default value meaning roughly 50x2ms=100ms or 10 times per second
 0000           ; #define LCD_Counter_Set 50
 0000           ; 
 0000           ; // define outout signal, Lin_Out (wide band) and NB_Out (narrow band) can be both present at once
 0000           ; #define Lin_Out
 0000           ; #define NB_Out
 0000           ; 
 0000           ; // define display type and content following these guidlines:
 0000           ; //   - LCD Lmbda and AFR digits can be used at the same time but without Lambda/Temperature Graph
 0000           ; //   - LCD Lambda/Temperature Graph cannot be used at the same time
 0000           ; //   - LCD Temperature digits can be used together with Lambda/AFR digits
 0000           ; //   - LED and LCD cannot be used at the same time
 0000           ; //   - LED AFR and Lambda can be used at the same time and switched with a pin
 0000           ; //   - comment out #define for unused options
 0000           ; // #define LCD_Lambda_Graph
 0000           ;  #define LCD_AFR_digits
 0000           ; #define LCD_Lambda_digits
 0000           ; //#define LCD_Temperature_Graph
 0000           ;  #define LCD_Temperature_digits
 0000           ; //#define DStage_logo
 0000           ; //#define LED_AFR
 0000           ; //#define LED_Lambda
 0000           ; 
 0000           ; // Define port/pin for LED display controller TM1637
 0000           ; #define DIO_PORT 1
 0000           ; #define DIO_PIN 0
 0000           ; #define CLK_PORT 1
 0000           ; #define CLK_PIN 1
 0000           ; #define SWITCH_PORT 1
 0000           ; #define SWITCH_PIN 7
 0000           ; //============================================
 0000           ; 
 0000           ; #define SWPIN (1 << SWITCH_PIN)
 0000           ; #if SWITCH_PORT == 1
 0000           ;       #define SWPORT PRT1DR
 0000           ;       #define SWDM2 PRT1DM2
 0000           ;       #define SWDM1 PRT1DM1
 0000           ;       #define SWDM0 PRT1DM0
 0000           ; #elif SWITCH_PORT == 2
 0000           ;       #define SWPORT PRT2DR
 0000           ;       #define SWDM2 PRT2DM2
 0000           ;       #define SWDM1 PRT2DM1
 0000           ;       #define SWDM0 PRT2DM0
 0000           ; #else
 0000           ;       #define SWPORT PRT0DR
 0000           ;       #define SWDM2 PRT0DM2
 0000           ;       #define SWDM1 PRT0DM1
 0000           ;       #define SWDM0 PRT0DM0
 0000           ; #endif
 0000           ; 
 0000           ; 
 0000           ; //#define PID_Tune
 0000           ; #define Ri_Filter_Strength 4
 0000           ; #define ip_Filter_Strength 4
 0000           ; 
 0000           ; #ifdef PID_Tune
 0000           ;       INT Ri_Mid_Target= 286;//271; //
 0000           ;       INT Ia_PID_Kp = 25; //35;
 0000           ;       INT Ia_PID_Ki = 4; //8;
 0000           ;       INT Ia_Output_Bias = 256;
 0000           ;       INT Ri_Delta_Target=143; //PID Target peak to peak Voltage of Nermest Cell
 0000           ;       INT Heater_PID_Kp =-72;
 0000           ;       INT Heater_PID_Ki =-4;
 0000           ;       INT Heater_PID_Output_Bias =128;
 0000           ; #else
 0000           ;       #define Ri_Mid_Target 286 //271 //256+14.769 = 2.53v = 2.08v(VGND) + 0.45v, PID Target Voltage of Nermest Cell
 0000           ;       #define Ia_PID_Kp 25
 0000           ;       #define Ia_PID_Ki 4
 0000           ;       #define Ia_Output_Bias 256
 0000           ;       #define Ri_Delta_Target 143 //PID Target peak to peak Voltage of Nermest Cell
 0000           ;       #define Heater_PID_Kp -72
 0000           ;       #define Heater_PID_Ki -4
 0000           ;       #define Heater_PID_Output_Bias 128
 0000           ; #endif
 0000           ; 
 0000           ; #ifdef Lin_Out
 0000           ;       #define ip_to_Vout_Lookup_Start 135
 0000           ;       #define ip_to_Vout_Lookup_Size 158
 0000           ;       const BYTE ip_to_Vout_Lookup[ip_to_Vout_Lookup_Size] = {0,1,1,2,3,4,4,5,6,7,8,8,9,10,11,12,12,13,14,15,16,17,17,18,19,20,21,22,22,23,24,25,26,27,27,28,29,30,31,32,33,34,34,35,36,37,38,39,40,41,42,43,44,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,79,80,81,82,83,84,86,87,88,89,90,91,92,94,95,96,97,98,100,101,102,103,105,106,107,108,110,111,112,113,115,116,117,119,120,123,126,129,132,135,138,141,144,147,151,154,157,161,164,168,171,175,178,182,186,190,194,197,201,206,210,214,218,222,227,231,236,240,245,250,255}; 
 0000           ; #endif
 0000           ; 
 0000           ; #ifdef LCD_Lambda_Graph
 0000           ;       #define ip_to_Lambda_Lookup_Start 135
 0000           ;       #define ip_to_Lambda_Lookup_Size 158
 0000           ;       const BYTE ip_to_Graph_Lookup[ip_to_Lambda_Lookup_Size]={1,8,8,9,9,9,9,9,10,10,10,10,10,11,11,11,11,12,12,12,12,12,13,13,13,13,14,14,14,14,14,15,15,15,15,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,22,22,22,22,23,23,23,23,24,24,24,25,25,25,25,26,26,26,26,27,27,27,28,28,28,28,29,29,29,30,30,30,31,31,31,31,32,32,32,33,33,33,34,34,34,35,35,35,36,36,36,37,37,37,38,38,38,39,39,39,40,40,41,42,42,43,44,45,46,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,72,73,75,80};
 0000           ;                                                                                                // lambda = 0.68  0.69      0.70           0.71        0.72           0.73        0.74           0.75        0.76           0.77        0.78        0.79        0.8         0.81        0.82           0.83     0.84     0.85        0.86        0.87     0.88        0.89     0.90     0.91        0.92     0.93     0.94     0.95     0.96     0.97     0.98     0.99     1.00
 0000           ;                                                                                                // AFR    = 10.0  10.14     10.3           10.44       10.58          10.73       10.88          11.03
 0000           ; #endif
 0000           ; 
 0000           ; #if defined LCD_AFR_digits || defined LED_AFR 
 0000           ;       #define ip_to_AFR_Lookup_Start 135
 0000           ;       #define ip_to_AFR_Lookup_Size 158
 0000           ;       const BYTE ip_to_AFR_Lookup[ip_to_AFR_Lookup_Size] = {0xFC,0x00,0x00,0x01,0x01,0x02,0x02,0x02,0x02,0x03,0x03,0x03,0x04,0x04,0x04,0x05,0x05,0x05,0x05,0x06,0x06,0x07,0x07,0x07,0x07,0x08,0x08,0x09,0x09,0x09,0x09,
 0000           ;                                                                                                                 0x10,0x10,0x11,0x11,0x11,0x12,0x12,0x12,0x13,0x13,0x13,0x13,0x14,0x14,0x15,0x15,0x15,0x16,0x16,0x16,0x17,0x17,0x17,0x18,0x18,0x18,0x19,0x19,
 0000           ;                                                                                                                 0x20,0x20,0x20,0x21,0x21,0x22,0x22,0x22,0x23,0x23,0x24,0x24,0x24,0x25,0x25,0x25,0x26,0x26,0x27,0x27,0x27,0x28,0x28,0x29,0x29,
 0000           ;                                                                                                                 0x30,0x30,0x31,0x31,0x31,0x32,0x32,0x33,0x33,0x34,0x34,0x35,0x35,0x35,0x36,0x36,0x37,0x37,0x38,0x38,0x38,0x39,
 0000           ;                                                                                                                 0x40,0x40,0x40,0x41,0x42,0x42,0x42,0x43,0x44,0x44,0x44,0x45,0x45,0x46,0x47,0x47,0x48,0x49,
 0000           ;                                                                                                                 0x51,0x52,0x53,0x54,0x55,0x56,0x58,0x59,
 0000           ;                                                                                                                 0x60,0x62,0x63,0x64,0x66,0x67,0x69,
 0000           ;                                                                                                                 0x70,0x71,0x73,0x75,0x76,0x77,0x79,
 0000           ;                                                                                                                 0x81,0x82,0x84,0x85,0x87,0x89,
 0000           ;                                                                                                                 0x91,0x93,0x94,0x96,0x98,
 0000           ;                                                                                                                 0xFE}; 
 0000           ; #endif
 0000           ; 
 0000           ; #if defined LCD_Lambda_digits || defined LED_Lambda
 0000           ;       #define ip_to_LambdaD_Lookup_Start 135
 0000           ;       #define ip_to_LambdaD_Lookup_Size 158
 0000           ;       const BYTE ip_to_Lambda_Lookup[ip_to_LambdaD_Lookup_Size]= {0xFC,0x68,0x68,0x69,0x69,0x69,0x69,0x69,
 0000           ;                                                                                                                               0x70,0x70,0x70,0x70,0x70,0x71,0x71,0x71,0x71,0x72,0x72,0x72,0x72,0x72,0x73,0x73,0x73,0x73,0x74,0x74,0x74,0x74,0x74,0x75,0x75,0x75,0x75,0x76,0x76,0x76,0x76,0x76,0x77,0x77,0x77,0x77,0x78,0x78,0x78,0x78,0x79,0x79,0x79,0x79,
 0000           ;                                                                                                                               0x80,0x80,0x80,0x80,0x81,0x81,0x81,0x81,0x82,0x82,0x82,0x82,0x83,0x83,0x83,0x83,0x84,0x84,0x84,0x85,0x85,0x85,0x85,0x86,0x86,0x86,0x86,0x87,0x87,0x87,0x88,0x88,0x88,0x88,0x89,0x89,0x89,
 0000           ;                                                                                                                               0x90,0x90,0x90,0x91,0x91,0x91,0x91,0x92,0x92,0x92,0x93,0x93,0x93,0x94,0x94,0x94,0x95,0x95,0x95,0x96,0x96,0x96,0x97,0x97,0x97,0x98,0x98,0x98,0x99,0x99,0x99,
 0000           ;                                                                                                                               0x00,0x00,0x01,0x02,0x02,0x03,0x04,0x05,0x06,0x06,0x07,0x08,0x09,
 0000           ;                                                                                                                               0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,
 0000           ;                                                                                                                               0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,
 0000           ;                                                                                                                               0x30,0x31,0x32,0x33,0x35,
 0000           ;                                                                                                                               0xFE};
 0000           ; #endif
 0000           ; 
 0000           ; #ifdef LCD_Temperature_Graph
 0000           ;       #define Ri_Delta_to_Temperature_C_Start 113
 0000           ;       #define Ri_Delta_to_Temperature_C_Size 75
 0000           ;       const BYTE Ri_Delta_to_Graph[Ri_Delta_to_Temperature_C_Size]={80,78,77,75,74,73,71,70,68,67,65,64,63,61,60,59,58,56,55,54,52,51,50,49,48,46,45,44,43,42,41,40,39,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,18,17,16,15,14,13,12,11,11,10,9,8,7,6,5,5,4,3,2,1,1,0};
 0000           ; #endif
 0000           ; 
 0000           ; #ifdef LCD_Temperature_digits
 0000           ;       #define Ri_Delta_to_Temperature_C_dig_Start 113
 0000           ;       #define Ri_Delta_to_Temperature_C_dig_Size 75
 0000           ;       const BYTE Ri_Delta_to_dig[Ri_Delta_to_Temperature_C_dig_Size]={0xFE,
 0000           ;                                                                                                                                       0x18,0x17,0x15,0x14,0x13,0x11,0x10,
 0000           ;                                                                                                                                       0x08,0x07,0x05,0x04,0x03,0x01,0x00,
 0000           ;                                                                                                                                       0x99,0x98,0x96,0x95,0x94,0x92,0x91,0x90,
 0000           ;                                                                                                                                       0x89,0x88,0x86,0x85,0x84,0x83,0x82,0x81,0x80,
 0000           ;                                                                                                                                       0x79,0x77,0x76,0x75,0x74,0x73,0x72,0x71,0x70,
 0000           ;                                                                                                                                       0x69,0x68,0x67,0x66,0x65,0x64,0x63,0x62,0x61,0x60,
 0000           ;                                                                                                                                       0x59,0x58,0x58,0x57,0x56,0x55,0x54,0x53,0x52,0x51,0x51,0x50,
 0000           ;                                                                                                                                       0x49,0x48,0x47,0x46,0x45,0x45,0x44,0x43,0x42,0x41,0x40,0xFC,};
 0000           ; #endif
 0000           ; 
 0000           ; #if defined LED_AFR || defined LED_Lambda
 0000           ;       void TM1637_init(void);
 0000           ;       void TM1637_setBrightness(BYTE, BYTE);
 0000           ;       void TM1637_setSegments(BYTE*, BYTE, BYTE);
 0000           ;       void TM1637_clear(void);
 0000           ;       void TM1637_showNumberDec(int, BYTE, BYTE, BYTE);
 0000           ;       void TM1637_showNumberDecEx(int, BYTE, BYTE, BYTE, BYTE);
 0000           ;       void TM1637_showNumberHexEx(unsigned int, BYTE, BYTE, BYTE, BYTE);
 0000           ;       void TM1637_showNumberBaseEx(BYTE, unsigned int, BYTE, BYTE, BYTE, BYTE);
 0000           ;       void TM1637_start(void);
 0000           ;       void TM1637_stop(void);
 0000           ;       BYTE TM1637_writeByte(BYTE);
 0000           ;       void TM1637_showDots(BYTE, BYTE*);
 0000           ;       BYTE TM1637_encodeDigit(BYTE);
 0000           ;       
 0000           ;       //      A
 0000           ;       //     ---
 0000           ;       //  F |   | B
 0000           ;       //     -G-
 0000           ;       //  E |   | C
 0000           ;       //     ---
 0000           ;       //      D
 0000           ;       const BYTE digitToSegment[] = {
 0000           ;       // XGFEDCBA
 0000           ;       0b00111111,    // 0
 0000           ;       0b00000110,    // 1
 0000           ;       0b01011011,    // 2
 0000           ;       0b01001111,    // 3
 0000           ;       0b01100110,    // 4
 0000           ;       0b01101101,    // 5
 0000           ;       0b01111101,    // 6
 0000           ;       0b00000111,    // 7
 0000           ;       0b01111111,    // 8
 0000           ;       0b01101111,    // 9
 0000           ;       //0b01110111,    // A
 0000           ;       //0b01111100,    // b
 0000           ;       //0b00111001,    // C
 0000           ;       //0b01011110,    // d
 0000           ;       //0b01111001,    // E
 0000           ;       //0b01110001     // F
 0000           ;       };
 0000           ; #endif
 0000           ; 
 0000           ; INT Ri_Mid_Error_Sum=0;
 0000           ; INT Ri_Mid;
 0000           ; INT Ri_Delta_Error_Sum=0;
 0000           ; INT Ri_Delta;
 0000           ; #define Ia_PID_Counter_Set 1
 0000           ; #define Heatup_Counter_Set 100
 0000           ; #define Heater_PID_Counter_Set 25
 0000           ; BYTE Heatup_Heater_Output=100;
 0000           ; 
 0000           ; INT Ri_Delta_Error;
 0000           ; INT Heater_Output;
 0000           ; INT Heater_Pout;
 0000           ; INT Heater_Iout;
 0000           ; 
 0000           ; //PID Controller, Input is Ri_Delta (The Peak to peak voltage on the Vs Port of the sensor) output is PWM8_Heater, PWM8_Heater is controlled such that Ri_Delta is maintained at 80 (80 =750C)
 0000           ; //Only a PI controller is used as adding the D term does not effect performance 
 0000           ; //Everything is inflated by a factor of 4 so that floating point is avioded
 0000           ; void Heater_PID(void) // Ned to run this when counter >50
 0000           ; {
 0000                   .dbline 233
 0000           ; 
 0000           ;       Ri_Delta_Error=Ri_Delta_Target-Ri_Delta;
 0000 508F              mov A,-113
 0002 121C              sub A,[_Ri_Delta+1]
 0004 531A              mov [_Ri_Delta_Error+1],A
 0006 5000              mov A,0
 0008 1A1B              sbb A,[_Ri_Delta]
 000A 5319              mov [_Ri_Delta_Error],A
 000C                   .dbline 235
 000C           ;       //Put limits on Error so PID does not go Fubar, and also so that the worst case multiplication does not overflow
 000C           ;       if (Ri_Delta_Error>(-127*16/Heater_PID_Kp))
 000C 501C              mov A,28
 000E 121A              sub A,[_Ri_Delta_Error+1]
 0010 5119              mov A,[_Ri_Delta_Error]
 0012 3180              xor A,-128
 0014 5300              mov [__rX],A
 0016 5080              mov A,(0 ^ 0x80)
 0018 1A00              sbb A,[__rX]
 001A D007              jnc L2
 001C           X0:
 001C                   .dbline 237
 001C           ;       {
 001C           ;               Ri_Delta_Error=(-127*16/Heater_PID_Kp); // -> 28, used to be 56...
 001C                   .dbline 237
 001C 551A1C            mov [_Ri_Delta_Error+1],28
 001F 551900            mov [_Ri_Delta_Error],0
 0022                   .dbline 238
 0022           ;       }
 0022           L2:
 0022                   .dbline 239
 0022           ;       if (Ri_Delta_Error<(127*16/Heater_PID_Kp))
 0022 511A              mov A,[_Ri_Delta_Error+1]
 0024 11E4              sub A,-28
 0026 5119              mov A,[_Ri_Delta_Error]
 0028 3180              xor A,-128
 002A 197F              sbb A,(-1 ^ 0x80)
 002C D007              jnc L4
 002E           X1:
 002E                   .dbline 241
 002E           ;       {
 002E           ;               Ri_Delta_Error=(127*16/Heater_PID_Kp); // -> -28, used to be -56...
 002E                   .dbline 241
 002E 551AE4            mov [_Ri_Delta_Error+1],-28
 0031 5519FF            mov [_Ri_Delta_Error],-1
 0034                   .dbline 242
 0034           ;       }
 0034           L4:
 0034                   .dbline 243
 0034           ;       Heater_Pout=(Heater_PID_Kp*Ri_Delta_Error)/16;
 0034 5F001A            mov [__r1],[_Ri_Delta_Error+1]
 0037 5F0019            mov [__r0],[_Ri_Delta_Error]
 003A 5500B8            mov [__r3],-72
 003D 5500FF            mov [__r2],-1
 0040 550000            mov [__rX],0
 0043 550000            mov [__rY],0
 0046           X2:
 0046 3C0000            cmp [__r2],0
 0049 B006              jnz X5
 004B 3C0000            cmp [__r3],0
 004E A017              jz X4
 0050           X5:
 0050 70FB              and F,-5
 0052 6E00              rrc [__r2]
 0054 6E00              rrc [__r3]
 0056 D009              jnc X3
 0058 5100              mov A,[__r1]
 005A 0400              add [__rX],A
 005C 5100              mov A,[__r0]
 005E 0C00              adc [__rY],A
 0060           X3:
 0060 6500              asl [__r1]
 0062 6B00              rlc [__r0]
 0064 8FE1              jmp X2
 0066           X4:
 0066 5F0000            mov [__r1],[__rX]
 0069 5F0000            mov [__r0],[__rY]
 006C 5000              mov A,0
 006E 08                push A
 006F 5010              mov A,16
 0071 08                push A
 0072 5100              mov A,[__r0]
 0074 08                push A
 0075 5100              mov A,[__r1]
 0077 08                push A
 0078 7C0000            xcall __divmod_16X16_16
 007B 18                pop A
 007C 5316              mov [_Heater_Pout+1],A
 007E 18                pop A
 007F 5315              mov [_Heater_Pout],A
 0081 38FE              add SP,-2
 0083                   .dbline 244
 0083           ;       Ri_Delta_Error_Sum=Ri_Delta_Error_Sum+Ri_Delta_Error;
 0083 511A              mov A,[_Ri_Delta_Error+1]
 0085 0403              add [_Ri_Delta_Error_Sum+1],A
 0087 5119              mov A,[_Ri_Delta_Error]
 0089 0C02              adc [_Ri_Delta_Error_Sum],A
 008B                   .dbline 253
 008B           ;       //If the sensor is too hot, then disreguard the Integratal contribution and just use the proportional to quickly correct the sensor temperature
 008B           ;       /*
 008B           ;       if((Ri_Delta<60)&&(Ri_Delta_Error_Sum>0))
 008B           ;       {
 008B           ;               Ri_Delta_Error_Sum=0;
 008B           ;       }
 008B           ;       */
 008B           ;       //Put limits on Error so PID does not go Fubar, and also so that the worst case multiplication does not overflow
 008B           ;       if (Ri_Delta_Error_Sum>(-127*16/Heater_PID_Ki))
 008B 50FC              mov A,-4
 008D 1203              sub A,[_Ri_Delta_Error_Sum+1]
 008F 5102              mov A,[_Ri_Delta_Error_Sum]
 0091 3180              xor A,-128
 0093 5300              mov [__rX],A
 0095 5081              mov A,(1 ^ 0x80)
 0097 1A00              sbb A,[__rX]
 0099 D007              jnc L6
 009B           X6:
 009B                   .dbline 255
 009B           ;       {
 009B           ;               Ri_Delta_Error_Sum=(-127*16/Heater_PID_Ki); // -> 508, used to be 1024...
 009B                   .dbline 255
 009B 5503FC            mov [_Ri_Delta_Error_Sum+1],-4
 009E 550201            mov [_Ri_Delta_Error_Sum],1
 00A1                   .dbline 256
 00A1           ;       }
 00A1           L6:
 00A1                   .dbline 257
 00A1           ;       if (Ri_Delta_Error_Sum<(127*16/Heater_PID_Ki))
 00A1 5103              mov A,[_Ri_Delta_Error_Sum+1]
 00A3 1104              sub A,4
 00A5 5102              mov A,[_Ri_Delta_Error_Sum]
 00A7 3180              xor A,-128
 00A9 197E              sbb A,(-2 ^ 0x80)
 00AB D007              jnc L8
 00AD           X7:
 00AD                   .dbline 259
 00AD           ;       {
 00AD           ;               Ri_Delta_Error_Sum=(127*16/Heater_PID_Ki); // -> -508, used to be -1024...
 00AD                   .dbline 259
 00AD 550304            mov [_Ri_Delta_Error_Sum+1],4
 00B0 5502FE            mov [_Ri_Delta_Error_Sum],-2
 00B3                   .dbline 260
 00B3           ;       }
 00B3           L8:
 00B3                   .dbline 261
 00B3           ;       Heater_Iout=(Heater_PID_Ki*Ri_Delta_Error_Sum)/16;
 00B3 5F0003            mov [__r1],[_Ri_Delta_Error_Sum+1]
 00B6 5F0002            mov [__r0],[_Ri_Delta_Error_Sum]
 00B9 5500FC            mov [__r3],-4
 00BC 5500FF            mov [__r2],-1
 00BF 550000            mov [__rX],0
 00C2 550000            mov [__rY],0
 00C5           X8:
 00C5 3C0000            cmp [__r2],0
 00C8 B006              jnz X11
 00CA 3C0000            cmp [__r3],0
 00CD A017              jz X10
 00CF           X11:
 00CF 70FB              and F,-5
 00D1 6E00              rrc [__r2]
 00D3 6E00              rrc [__r3]
 00D5 D009              jnc X9
 00D7 5100              mov A,[__r1]
 00D9 0400              add [__rX],A
 00DB 5100              mov A,[__r0]
 00DD 0C00              adc [__rY],A
 00DF           X9:
 00DF 6500              asl [__r1]
 00E1 6B00              rlc [__r0]
 00E3 8FE1              jmp X8
 00E5           X10:
 00E5 5F0000            mov [__r1],[__rX]
 00E8 5F0000            mov [__r0],[__rY]
 00EB 5000              mov A,0
 00ED 08                push A
 00EE 5010              mov A,16
 00F0 08                push A
 00F1 5100              mov A,[__r0]
 00F3 08                push A
 00F4 5100              mov A,[__r1]
 00F6 08                push A
 00F7 7C0000            xcall __divmod_16X16_16
 00FA 18                pop A
 00FB 5314              mov [_Heater_Iout+1],A
 00FD 18                pop A
 00FE 5313              mov [_Heater_Iout],A
 0100 38FE              add SP,-2
 0102                   .dbline 262
 0102           ;       if (Heatup_Heater_Output<255) // if Heatup_Heater_Output is < 255 that means the unit just turned on and to give control to the heatup routine
 0102 3C04FF            cmp [_Heatup_Heater_Output],-1
 0105 D009              jnc L10
 0107           X12:
 0107                   .dbline 264
 0107           ;       {
 0107           ;               Heater_Output=Heatup_Heater_Output;     
 0107                   .dbline 264
 0107 5F1804            mov [_Heater_Output+1],[_Heatup_Heater_Output]
 010A 551700            mov [_Heater_Output],0
 010D                   .dbline 265
 010D           ;       }
 010D 8019              xjmp L11
 010F           L10:
 010F                   .dbline 267
 010F           ;       else
 010F           ;       {       
 010F                   .dbline 268
 010F           ;               Heater_Output=Heater_PID_Output_Bias+Heater_Pout+Heater_Iout;                   
 010F 5116              mov A,[_Heater_Pout+1]
 0111 0180              add A,-128
 0113 5300              mov [__r1],A
 0115 5115              mov A,[_Heater_Pout]
 0117 0900              adc A,0
 0119 5300              mov [__r0],A
 011B 5100              mov A,[__r1]
 011D 0214              add A,[_Heater_Iout+1]
 011F 5318              mov [_Heater_Output+1],A
 0121 5100              mov A,[__r0]
 0123 0A13              adc A,[_Heater_Iout]
 0125 5317              mov [_Heater_Output],A
 0127                   .dbline 269
 0127           ;       }
 0127           L11:
 0127                   .dbline 271
 0127           ;       //Heater_Output=Heater_PID_Output_Bias+Heater_Pout+Heater_Iout; 
 0127           ;       if (Heater_Output<0)
 0127 5118              mov A,[_Heater_Output+1]
 0129 1100              sub A,0
 012B 5117              mov A,[_Heater_Output]
 012D 3180              xor A,-128
 012F 1980              sbb A,(0 ^ 0x80)
 0131 D007              jnc L12
 0133           X13:
 0133                   .dbline 273
 0133           ;       {
 0133           ;               Heater_Output=0;
 0133                   .dbline 273
 0133 551800            mov [_Heater_Output+1],0
 0136 551700            mov [_Heater_Output],0
 0139                   .dbline 274
 0139           ;       }
 0139           L12:
 0139                   .dbline 275
 0139           ;       if (Heater_Output>255)
 0139 50FF              mov A,-1
 013B 1218              sub A,[_Heater_Output+1]
 013D 5117              mov A,[_Heater_Output]
 013F 3180              xor A,-128
 0141 5300              mov [__rX],A
 0143 5080              mov A,(0 ^ 0x80)
 0145 1A00              sbb A,[__rX]
 0147 D007              jnc L14
 0149           X14:
 0149                   .dbline 277
 0149           ;       {
 0149           ;               Heater_Output=255;
 0149                   .dbline 277
 0149 5518FF            mov [_Heater_Output+1],-1
 014C 551700            mov [_Heater_Output],0
 014F                   .dbline 278
 014F           ;       }
 014F           L14:
 014F                   .dbline 281
 014F           ; 
 014F           ; 
 014F           ;       PWM8_Heater_WritePulseWidth(Heater_Output);
 014F 5F0018            mov [__r0],[_Heater_Output+1]
 0152 10                push X
 0153 5100              mov A,[__r0]
 0155 7C0000            xcall _PWM8_Heater_WritePulseWidth
 0158 20                pop X
 0159                   .dbline -2
 0159           L1:
 0159                   .dbline 0 ; func end
 0159 7F                ret
 015A                   .dbend
 015A                   .dbfunc e Ia_PID _Ia_PID fV
 015A           _Ia_PID::
 015A                   .dbline -1
 015A                   .dbline 293
 015A           ;       //PWM8_Heater_WritePulseWidth(200);
 015A           ; }
 015A           ; 
 015A           ; INT Ri_Mid_Error;
 015A           ; INT Ia_Output;
 015A           ; INT Ia_Pout;
 015A           ; INT Ia_Iout;
 015A           ; //PID Controller, Input is Ri_Mid (The average voltage on the Vs Port of the sensor) output is DAC9_Ia, DAC9_Ia sink/sources current to the Sensor pump cell such that Ri_Mid is is the same voltage as Vref
 015A           ; //Only a PI controller is used as adding the D term does not effect performance 
 015A           ; //Everything is inflated by a factor of 4 so that floating point is avioded
 015A           ; void Ia_PID(void)
 015A           ; {
 015A                   .dbline 296
 015A           ; 
 015A           ; 
 015A           ;       Ri_Mid_Error=Ri_Mid_Target-Ri_Mid;
 015A 501E              mov A,30
 015C 121E              sub A,[_Ri_Mid+1]
 015E 5312              mov [_Ri_Mid_Error+1],A
 0160 5001              mov A,1
 0162 1A1D              sbb A,[_Ri_Mid]
 0164 5311              mov [_Ri_Mid_Error],A
 0166                   .dbline 298
 0166           ;       //Put limits on Error so PID does not go Fubar, and also so that the worst case multiplication does not overflow
 0166           ;       if (Ri_Mid_Error>(255*16/Ia_PID_Kp))
 0166 50A3              mov A,-93
 0168 1212              sub A,[_Ri_Mid_Error+1]
 016A 5111              mov A,[_Ri_Mid_Error]
 016C 3180              xor A,-128
 016E 5300              mov [__rX],A
 0170 5080              mov A,(0 ^ 0x80)
 0172 1A00              sbb A,[__rX]
 0174 D007              jnc L17
 0176           X15:
 0176                   .dbline 300
 0176           ;       {
 0176           ;               Ri_Mid_Error=(255*16/Ia_PID_Kp); // 163
 0176                   .dbline 300
 0176 5512A3            mov [_Ri_Mid_Error+1],-93
 0179 551100            mov [_Ri_Mid_Error],0
 017C                   .dbline 301
 017C           ;       }
 017C           L17:
 017C                   .dbline 302
 017C           ;       if (Ri_Mid_Error<(-255*16/Ia_PID_Kp))
 017C 5112              mov A,[_Ri_Mid_Error+1]
 017E 115D              sub A,93
 0180 5111              mov A,[_Ri_Mid_Error]
 0182 3180              xor A,-128
 0184 197F              sbb A,(-1 ^ 0x80)
 0186 D007              jnc L19
 0188           X16:
 0188                   .dbline 304
 0188           ;       {
 0188           ;               Ri_Mid_Error=(-255*16/Ia_PID_Kp); // -163
 0188                   .dbline 304
 0188 55125D            mov [_Ri_Mid_Error+1],93
 018B 5511FF            mov [_Ri_Mid_Error],-1
 018E                   .dbline 305
 018E           ;       }
 018E           L19:
 018E                   .dbline 306
 018E           ;       Ia_Pout=(Ia_PID_Kp*Ri_Mid_Error)/16;
 018E 5F0012            mov [__r1],[_Ri_Mid_Error+1]
 0191 5F0011            mov [__r0],[_Ri_Mid_Error]
 0194 550019            mov [__r3],25
 0197 550000            mov [__r2],0
 019A 550000            mov [__rX],0
 019D 550000            mov [__rY],0
 01A0           X17:
 01A0 3C0000            cmp [__r2],0
 01A3 B006              jnz X20
 01A5 3C0000            cmp [__r3],0
 01A8 A017              jz X19
 01AA           X20:
 01AA 70FB              and F,-5
 01AC 6E00              rrc [__r2]
 01AE 6E00              rrc [__r3]
 01B0 D009              jnc X18
 01B2 5100              mov A,[__r1]
 01B4 0400              add [__rX],A
 01B6 5100              mov A,[__r0]
 01B8 0C00              adc [__rY],A
 01BA           X18:
 01BA 6500              asl [__r1]
 01BC 6B00              rlc [__r0]
 01BE 8FE1              jmp X17
 01C0           X19:
 01C0 5F0000            mov [__r1],[__rX]
 01C3 5F0000            mov [__r0],[__rY]
 01C6 5000              mov A,0
 01C8 08                push A
 01C9 5010              mov A,16
 01CB 08                push A
 01CC 5100              mov A,[__r0]
 01CE 08                push A
 01CF 5100              mov A,[__r1]
 01D1 08                push A
 01D2 7C0000            xcall __divmod_16X16_16
 01D5 18                pop A
 01D6 530E              mov [_Ia_Pout+1],A
 01D8 18                pop A
 01D9 530D              mov [_Ia_Pout],A
 01DB 38FE              add SP,-2
 01DD                   .dbline 307
 01DD           ;       Ri_Mid_Error_Sum=Ri_Mid_Error_Sum+Ri_Mid_Error;
 01DD 5112              mov A,[_Ri_Mid_Error+1]
 01DF 0401              add [_Ri_Mid_Error_Sum+1],A
 01E1 5111              mov A,[_Ri_Mid_Error]
 01E3 0C00              adc [_Ri_Mid_Error_Sum],A
 01E5                   .dbline 309
 01E5           ;       //Put limits on Error so PID does not go Fubar, and also so that the worst case multiplication does not overflow
 01E5           ;       if (Ri_Mid_Error_Sum>(255*16/Ia_PID_Ki))
 01E5 50FC              mov A,-4
 01E7 1201              sub A,[_Ri_Mid_Error_Sum+1]
 01E9 5100              mov A,[_Ri_Mid_Error_Sum]
 01EB 3180              xor A,-128
 01ED 5300              mov [__rX],A
 01EF 5083              mov A,(3 ^ 0x80)
 01F1 1A00              sbb A,[__rX]
 01F3 D007              jnc L21
 01F5           X21:
 01F5                   .dbline 311
 01F5           ;       {
 01F5           ;               Ri_Mid_Error_Sum=(255*16/Ia_PID_Ki); // 1020
 01F5                   .dbline 311
 01F5 5501FC            mov [_Ri_Mid_Error_Sum+1],-4
 01F8 550003            mov [_Ri_Mid_Error_Sum],3
 01FB                   .dbline 312
 01FB           ;       }
 01FB           L21:
 01FB                   .dbline 313
 01FB           ;       if (Ri_Mid_Error_Sum<(-255*16/Ia_PID_Ki))
 01FB 5101              mov A,[_Ri_Mid_Error_Sum+1]
 01FD 1104              sub A,4
 01FF 5100              mov A,[_Ri_Mid_Error_Sum]
 0201 3180              xor A,-128
 0203 197C              sbb A,(-4 ^ 0x80)
 0205 D007              jnc L23
 0207           X22:
 0207                   .dbline 315
 0207           ;       {
 0207           ;               Ri_Mid_Error_Sum=(-255*16/Ia_PID_Ki); // -1020
 0207                   .dbline 315
 0207 550104            mov [_Ri_Mid_Error_Sum+1],4
 020A 5500FC            mov [_Ri_Mid_Error_Sum],-4
 020D                   .dbline 316
 020D           ;       }
 020D           L23:
 020D                   .dbline 317
 020D           ;       Ia_Iout=(Ia_PID_Ki*Ri_Mid_Error_Sum)/16;
 020D 5F0001            mov [__r1],[_Ri_Mid_Error_Sum+1]
 0210 5F0000            mov [__r0],[_Ri_Mid_Error_Sum]
 0213 6500              asl [__r1]
 0215 6B00              rlc [__r0]
 0217 6500              asl [__r1]
 0219 6B00              rlc [__r0]
 021B 5000              mov A,0
 021D 08                push A
 021E 5010              mov A,16
 0220 08                push A
 0221 5100              mov A,[__r0]
 0223 08                push A
 0224 5100              mov A,[__r1]
 0226 08                push A
 0227 7C0000            xcall __divmod_16X16_16
 022A 18                pop A
 022B 530C              mov [_Ia_Iout+1],A
 022D 18                pop A
 022E 530B              mov [_Ia_Iout],A
 0230 38FE              add SP,-2
 0232                   .dbline 318
 0232           ;       Ia_Output=Ia_Output_Bias+Ia_Pout+Ia_Iout;
 0232 510E              mov A,[_Ia_Pout+1]
 0234 0100              add A,0
 0236 5300              mov [__r1],A
 0238 510D              mov A,[_Ia_Pout]
 023A 0901              adc A,1
 023C 5300              mov [__r0],A
 023E 5100              mov A,[__r1]
 0240 020C              add A,[_Ia_Iout+1]
 0242 5310              mov [_Ia_Output+1],A
 0244 5100              mov A,[__r0]
 0246 0A0B              adc A,[_Ia_Iout]
 0248 530F              mov [_Ia_Output],A
 024A                   .dbline 320
 024A           ;       //9 Bit Dac so only 0-511 is allowed, for some reason i put the limit at 510, I foget exactly why.
 024A           ;       if (Ia_Output<0)
 024A 5110              mov A,[_Ia_Output+1]
 024C 1100              sub A,0
 024E 510F              mov A,[_Ia_Output]
 0250 3180              xor A,-128
 0252 1980              sbb A,(0 ^ 0x80)
 0254 D007              jnc L25
 0256           X23:
 0256                   .dbline 322
 0256           ;       {
 0256           ;               Ia_Output=0;
 0256                   .dbline 322
 0256 551000            mov [_Ia_Output+1],0
 0259 550F00            mov [_Ia_Output],0
 025C                   .dbline 323
 025C           ;       }
 025C           L25:
 025C                   .dbline 324
 025C           ;       if (Ia_Output>510)
 025C 50FE              mov A,-2
 025E 1210              sub A,[_Ia_Output+1]
 0260 510F              mov A,[_Ia_Output]
 0262 3180              xor A,-128
 0264 5300              mov [__rX],A
 0266 5081              mov A,(1 ^ 0x80)
 0268 1A00              sbb A,[__rX]
 026A D007              jnc L27
 026C           X24:
 026C                   .dbline 326
 026C           ;       {
 026C           ;               Ia_Output=510;
 026C                   .dbline 326
 026C 5510FE            mov [_Ia_Output+1],-2
 026F 550F01            mov [_Ia_Output],1
 0272                   .dbline 327
 0272           ;       }
 0272           L27:
 0272                   .dbline 328
 0272           ;       DAC9_Ia_WriteStall (Ia_Output);
 0272 10                push X
 0273 580F              mov X,[_Ia_Output]
 0275 5110              mov A,[_Ia_Output+1]
 0277 7C0000            xcall _DAC9_Ia_WriteStall
 027A 20                pop X
 027B                   .dbline -2
 027B           L16:
 027B                   .dbline 0 ; func end
 027B 7F                ret
 027C                   .dbend
 027C                   .dbfunc e IIR_Int _IIR_Int fI
 027C           ;              A -> X-8
 027C           ;           Vout -> X-7
 027C           ;            Vin -> X-5
 027C           _IIR_Int::
 027C                   .dbline -1
 027C 10                push X
 027D 4F                mov X,SP
 027E                   .dbline 332
 027E           ;       //DAC9_Ia_WriteStall (256);
 027E           ; }
 027E           ; INT IIR_Int(INT Vin, INT Vout, BYTE A)
 027E           ; {
 027E                   .dbline 333
 027E           ;       return (Vout + (Vin - Vout)/A);
 027E 52FC              mov A,[X-4]
 0280 13FA              sub A,[X-6]
 0282 5300              mov [__r1],A
 0284 52FB              mov A,[X-5]
 0286 1BF9              sbb A,[X-7]
 0288 5300              mov [__r0],A
 028A 52F8              mov A,[X-8]
 028C 5300              mov [__r3],A
 028E 5000              mov A,0
 0290 08                push A
 0291 5100              mov A,[__r3]
 0293 08                push A
 0294 5100              mov A,[__r0]
 0296 08                push A
 0297 5100              mov A,[__r1]
 0299 08                push A
 029A 7C0000            xcall __divmod_16X16_16
 029D 18                pop A
 029E 5300              mov [__r1],A
 02A0 18                pop A
 02A1 5300              mov [__r0],A
 02A3 38FE              add SP,-2
 02A5 52FA              mov A,[X-6]
 02A7 0200              add A,[__r1]
 02A9 5300              mov [__r1],A
 02AB 52F9              mov A,[X-7]
 02AD 0A00              adc A,[__r0]
 02AF 5300              mov [__r0],A
 02B1                   .dbline -2
 02B1           L29:
 02B1 20                pop X
 02B2                   .dbline 0 ; func end
 02B2 7F                ret
 02B3                   .dbsym l A -8 c
 02B3                   .dbsym l Vout -7 I
 02B3                   .dbsym l Vin -5 I
 02B3                   .dbend
                        .area data(ram, con, rel)
 0005                   .dbfile I:\PSOCDO~1\WBOOS_~2\DSTAGE~1\DSTAGE~1\main.c
 0005           _Ia_PID_Counter::
 0005                   .blkb 1
                        .area idata(rom,lit)
 0005 00                .byte 0
                        .area data(ram, con, rel)
 0006                   .dbfile I:\PSOCDO~1\WBOOS_~2\DSTAGE~1\DSTAGE~1\main.c
 0006                   .dbsym e Ia_PID_Counter _Ia_PID_Counter c
 0006           _Vout_Lookup_Counter::
 0006                   .blkb 1
                        .area idata(rom,lit)
 0006 00                .byte 0
                        .area data(ram, con, rel)
 0007                   .dbfile I:\PSOCDO~1\WBOOS_~2\DSTAGE~1\DSTAGE~1\main.c
 0007                   .dbsym e Vout_Lookup_Counter _Vout_Lookup_Counter c
 0007           _Heater_PID_Counter::
 0007                   .blkb 1
                        .area idata(rom,lit)
 0007 00                .byte 0
                        .area data(ram, con, rel)
 0008                   .dbfile I:\PSOCDO~1\WBOOS_~2\DSTAGE~1\DSTAGE~1\main.c
 0008                   .dbsym e Heater_PID_Counter _Heater_PID_Counter c
 0008           _LCD_Counter::
 0008                   .blkb 1
                        .area idata(rom,lit)
 0008 00                .byte 0
                        .area data(ram, con, rel)
 0009                   .dbfile I:\PSOCDO~1\WBOOS_~2\DSTAGE~1\DSTAGE~1\main.c
 0009                   .dbsym e LCD_Counter _LCD_Counter c
 0009           _Heatup_Counter::
 0009                   .blkb 1
                        .area idata(rom,lit)
 0009 00                .byte 0
                        .area data(ram, con, rel)
 000A                   .dbfile I:\PSOCDO~1\WBOOS_~2\DSTAGE~1\DSTAGE~1\main.c
 000A                   .dbsym e Heatup_Counter _Heatup_Counter c
                        .area text(rom, con, rel)
 02B3                   .dbfile I:\PSOCDO~1\WBOOS_~2\DSTAGE~1\DSTAGE~1\main.c
 02B3                   .dbfunc e main _main fV
 02B3           ;      temp_int2 -> X+7
 02B3           ;     temp_ulong -> X+3
 02B3           ;      temp_byte -> X+2
 02B3           ;       temp_int -> X+0
 02B3           _main::
 02B3                   .dbline -1
 02B3 10                push X
 02B4 4F                mov X,SP
 02B5 3809              add SP,9
 02B7                   .dbline 349
 02B7           ; }
 02B7           ; 
 02B7           ; 
 02B7           ; BYTE Ia_PID_Counter=0;
 02B7           ; BYTE Vout_Lookup_Counter=0;
 02B7           ; BYTE Heater_PID_Counter=0;
 02B7           ; BYTE LCD_Counter=0;
 02B7           ; BYTE Heatup_Counter=0;
 02B7           ; INT Ri_Min,Ri_Max;
 02B7           ; INT ip,ip_Justified;
 02B7           ; BYTE Lambda_x100;
 02B7           ; INT LSU_Temperature_C;
 02B7           ; //char Str1[] = "Lambda=x.xx";
 02B7           ; //char Str2[] = "Temperature=xxxC"; 
 02B7           ; void main(void)
 02B7           ; {
 02B7                   .dbline 359
 02B7           ;       unsigned long temp_ulong;
 02B7           ;       INT temp_int,temp_int2;
 02B7           ;       BYTE temp_byte;
 02B7           ;       
 02B7           ;       #if defined LED_AFR || defined LED_Lambda
 02B7           ;               // empty, 1, -, -
 02B7           ;               BYTE digits[4] = {0b00000000, 0b00000110, 0b01000000, 0b01000000};
 02B7           ;       #endif
 02B7           ;       
 02B7           ;       AMUX4_0_InputSelect(AMUX4_0_PORT0_1);        
 02B7 10                push X
 02B8 5000              mov A,0
 02BA 7C0000            xcall _AMUX4_0_InputSelect
 02BD                   .dbline 360
 02BD           ;       AMUX4_1_InputSelect(AMUX4_1_PORT0_0);
 02BD 5000              mov A,0
 02BF 7C0000            xcall _AMUX4_1_InputSelect
 02C2                   .dbline 361
 02C2           ;       INSAMP_Start(INSAMP_LOWPOWER); 
 02C2 5001              mov A,1
 02C4 7C0000            xcall _INSAMP_Start
 02C7                   .dbline 362
 02C7           ;     ADCINC_Start(ADCINC_HIGHPOWER);      
 02C7 5003              mov A,3
 02C9 7C0000            xcall _ADCINC_Start
 02CC                   .dbline 363
 02CC           ;       DAC9_Ia_Start(DAC9_Ia_HIGHPOWER);
 02CC 5003              mov A,3
 02CE 7C0000            xcall _DAC9_Ia_Start
 02D1                   .dbline 364
 02D1           ;       DAC6_VGND_Start(DAC6_VGND_MEDPOWER);
 02D1 5002              mov A,2
 02D3 7C0000            xcall _DAC6_VGND_Start
 02D6                   .dbline 365
 02D6           ;       DAC6_VGND_WriteStall (31);
 02D6 501F              mov A,31
 02D8 7C0000            xcall _DAC6_VGND_WriteStall
 02DB                   .dbline 366
 02DB           ;     PWM8_Vout_DisableInt();  
 02DB 7C0000            xcall _PWM8_Vout_DisableInt
 02DE                   .dbline 367
 02DE           ;     PWM8_Vout_Start();     
 02DE 7C0000            xcall _PWM8_Vout_Start
 02E1                   .dbline 368
 02E1           ;     PWM8_Heater_DisableInt();  
 02E1 7C0000            xcall _PWM8_Heater_DisableInt
 02E4                   .dbline 369
 02E4           ;     PWM8_Heater_Start();
 02E4 7C0000            xcall _PWM8_Heater_Start
 02E7                   .dbline 370
 02E7           ;       PWM8_NB_Out_DisableInt();  
 02E7 7C0000            xcall _PWM8_NB_Out_DisableInt
 02EA                   .dbline 371
 02EA           ;     PWM8_NB_Out_Start(); 
 02EA 7C0000            xcall _PWM8_NB_Out_Start
 02ED                   .dbline 372
 02ED           ;       ADCINC_GetSamples(0);
 02ED 5000              mov A,0
 02EF 7C0000            xcall _ADCINC_GetSamples
 02F2                   .dbline 373
 02F2           ;       SleepTimer_Start();  
 02F2 7C0000            xcall _SleepTimer_Start
 02F5                   .dbline 374
 02F5           ;       SleepTimer_SetInterval(SleepTimer_512_HZ);  
 02F5 5000              mov A,0
 02F7 7C0000            xcall _SleepTimer_SetInterval
 02FA                   .dbline 375
 02FA           ;       SleepTimer_EnableInt();   
 02FA 7C0000            xcall _SleepTimer_EnableInt
 02FD 20                pop X
 02FE                   .dbline 376
 02FE           ;       M8C_EnableGInt ;  
 02FE 7101                      or  F, 01h
 0300           
 0300                   .dbline 380
 0300           ;       
 0300           ;       // initialize LCD only when needed (DStage WBOOS can be used with LED or without any display)
 0300           ;       #if defined LCD_AFR_digits || defined LCD_Lambda_digits || defined LCD_Temperature_digits || defined DStage_logo || defined LCD_Lambda_Graph || defined LCD_Temperature_Graph
 0300           ;               LCD_Start();                  // Initialize LCD
 0300 10                push X
 0301 7C0000            xcall _LCD_Start
 0304                   .dbline 381
 0304           ;               LCD_InitBG(LCD_SOLID_BG);
 0304 5000              mov A,0
 0306 7C0000            xcall _LCD_InitBG
 0309                   .dbline 385
 0309           ;       #endif
 0309           ; 
 0309           ;       #ifdef LCD_AFR_digits
 0309           ;               LCD_Position(0,0);
 0309 5000              mov A,0
 030B 5700              mov X,0
 030D 7C0000            xcall _LCD_Position
 0310                   .dbline 386
 0310           ;               LCD_PrCString("AFR: 1\0");
 0310 5031              mov A,>L31
 0312 08                push A
 0313 5031              mov A,<L31
 0315 5C                mov X,A
 0316 18                pop A
 0317 7C0000            xcall _LCD_PrCString
 031A                   .dbline 394
 031A           ;       #endif
 031A           ;       
 031A           ;       #ifdef LCD_Lambda_digits
 031A           ;               #ifndef LCD_AFR_digits
 031A           ;                       LCD_Position(0,0);
 031A           ;                       LCD_PrCString("LAM: 0\0");
 031A           ;               #else
 031A           ;                       LCD_Position(1,0);
 031A 5700              mov X,0
 031C 5001              mov A,1
 031E 7C0000            xcall _LCD_Position
 0321                   .dbline 395
 0321           ;                       LCD_PrCString("LAM: 0\0");
 0321 5029              mov A,>L32
 0323 08                push A
 0324 5029              mov A,<L32
 0326 5C                mov X,A
 0327 18                pop A
 0328 7C0000            xcall _LCD_PrCString
 032B                   .dbline 401
 032B           ;               #endif
 032B           ;       #endif
 032B           ;       
 032B           ;       #ifdef LCD_Temperature_digits
 032B           ;               #if defined LCD_Lambda_Graph || (defined LCD_AFR_digits && defined LCD_Lambda_digits)
 032B           ;                       LCD_Position(0,10);
 032B 570A              mov X,10
 032D 5000              mov A,0
 032F 7C0000            xcall _LCD_Position
 0332                   .dbline 402
 0332           ;                       LCD_PrCString("T:\0");
 0332 5025              mov A,>L33
 0334 08                push A
 0335 5025              mov A,<L33
 0337 5C                mov X,A
 0338 18                pop A
 0339 7C0000            xcall _LCD_PrCString
 033C                   .dbline 403
 033C           ;                       LCD_Position(0,15);
 033C 570F              mov X,15
 033E 5000              mov A,0
 0340 7C0000            xcall _LCD_Position
 0343                   .dbline 404
 0343           ;                       LCD_WriteData(0xDF); // degre
 0343 50DF              mov A,-33
 0345 7C0000            xcall _LCD_WriteData
 0348 20                pop X
 0349                   .dbline 428
 0349           ;               #else
 0349           ;                       LCD_Position(1,0);
 0349           ;                       LCD_PrCString("TMP:\0");
 0349           ;                       LCD_Position(1,8);
 0349           ;                       LCD_WriteData(0xDF); // degre
 0349           ;               #endif
 0349           ;       #endif
 0349           ;       
 0349           ;       #ifdef DStage_logo
 0349           ;               #ifndef LCD_Lambda_Graph
 0349           ;                       LCD_Position(0,10);
 0349           ;                       LCD_PrCString("DStage\0");
 0349           ;                       LCD_Position(1,10);
 0349           ;                       LCD_PrCString("Garage\0");
 0349           ;               #endif
 0349           ;       #endif
 0349           ;       
 0349           ;       #if defined LED_AFR || defined LED_Lambda
 0349           ;               TM1637_init();
 0349           ;               TM1637_setSegments(digits, 4, 0);
 0349           ;               //TM1637_showNumberDec(123, 0, 3, 1);
 0349           ;       #endif
 0349           ; 
 0349           ;       for(;;)
 0349           L34:
 0349                   .dbline 429
 0349           ;     {
 0349                   .dbline 430
 0349           ;               temp_ulong++;
 0349 070601            add [X+6],1
 034C 0F0500            adc [X+5],0
 034F 0F0400            adc [X+4],0
 0352 0F0300            adc [X+3],0
 0355                   .dbline 431
 0355           ;               if ((ADC_IF&1)==1)
 0355 5100              mov A,[_ADC_IF]
 0357 2101              and A,1
 0359 3901              cmp A,1
 035B B056              jnz L38
 035D                   .dbline 433
 035D           ;               {
 035D           ;                       ADC_IF=ADC_IF&254;
 035D                   .dbline 433
 035D 2600FE            and [_ADC_IF],-2
 0360                   .dbline 434
 0360           ;                       Ri_Min=IIR_Int(Ri_Min_x1*2,Ri_Min,Ri_Filter_Strength);
 0360 5004              mov A,4
 0362 08                push A
 0363 5109              mov A,[_Ri_Min]
 0365 08                push A
 0366 510A              mov A,[_Ri_Min+1]
 0368 08                push A
 0369 5F0000            mov [__r1],[_Ri_Min_x1]
 036C 550000            mov [__r0],0
 036F 6500              asl [__r1]
 0371 6B00              rlc [__r0]
 0373 5100              mov A,[__r0]
 0375 08                push A
 0376 5100              mov A,[__r1]
 0378 08                push A
 0379 9F01              xcall _IIR_Int
 037B 38FB              add SP,-5
 037D 5F0A00            mov [_Ri_Min+1],[__r1]
 0380 5F0900            mov [_Ri_Min],[__r0]
 0383                   .dbline 435
 0383           ;                       Ri_Delta=Ri_Max-Ri_Min;
 0383 5108              mov A,[_Ri_Max+1]
 0385 120A              sub A,[_Ri_Min+1]
 0387 531C              mov [_Ri_Delta+1],A
 0389 5107              mov A,[_Ri_Max]
 038B 1A09              sbb A,[_Ri_Min]
 038D 531B              mov [_Ri_Delta],A
 038F                   .dbline 436
 038F           ;                       Ri_Mid=(Ri_Max+Ri_Min)/2;
 038F 5108              mov A,[_Ri_Max+1]
 0391 020A              add A,[_Ri_Min+1]
 0393 5300              mov [__r1],A
 0395 5107              mov A,[_Ri_Max]
 0397 0A09              adc A,[_Ri_Min]
 0399 5300              mov [__r0],A
 039B 5000              mov A,0
 039D 08                push A
 039E 5002              mov A,2
 03A0 08                push A
 03A1 5100              mov A,[__r0]
 03A3 08                push A
 03A4 5100              mov A,[__r1]
 03A6 08                push A
 03A7 7C0000            xcall __divmod_16X16_16
 03AA 18                pop A
 03AB 531E              mov [_Ri_Mid+1],A
 03AD 18                pop A
 03AE 531D              mov [_Ri_Mid],A
 03B0 38FE              add SP,-2
 03B2                   .dbline 437
 03B2           ;               }
 03B2           L38:
 03B2                   .dbline 438
 03B2           ;               if ((ADC_IF&2)==2)
 03B2 5100              mov A,[_ADC_IF]
 03B4 2102              and A,2
 03B6 3902              cmp A,2
 03B8 B056              jnz L40
 03BA                   .dbline 440
 03BA           ;               {
 03BA           ;                       ADC_IF=ADC_IF&253;
 03BA                   .dbline 440
 03BA 2600FD            and [_ADC_IF],-3
 03BD                   .dbline 441
 03BD           ;                       Ri_Max=IIR_Int(Ri_Max_x1*2,Ri_Max,Ri_Filter_Strength);
 03BD 5004              mov A,4
 03BF 08                push A
 03C0 5107              mov A,[_Ri_Max]
 03C2 08                push A
 03C3 5108              mov A,[_Ri_Max+1]
 03C5 08                push A
 03C6 5F0000            mov [__r1],[_Ri_Max_x1]
 03C9 550000            mov [__r0],0
 03CC 6500              asl [__r1]
 03CE 6B00              rlc [__r0]
 03D0 5100              mov A,[__r0]
 03D2 08                push A
 03D3 5100              mov A,[__r1]
 03D5 08                push A
 03D6 9EA4              xcall _IIR_Int
 03D8 38FB              add SP,-5
 03DA 5F0800            mov [_Ri_Max+1],[__r1]
 03DD 5F0700            mov [_Ri_Max],[__r0]
 03E0                   .dbline 442
 03E0           ;                       Ri_Delta=Ri_Max-Ri_Min;
 03E0 5108              mov A,[_Ri_Max+1]
 03E2 120A              sub A,[_Ri_Min+1]
 03E4 531C              mov [_Ri_Delta+1],A
 03E6 5107              mov A,[_Ri_Max]
 03E8 1A09              sbb A,[_Ri_Min]
 03EA 531B              mov [_Ri_Delta],A
 03EC                   .dbline 443
 03EC           ;                       Ri_Mid=(Ri_Max+Ri_Min)/2;
 03EC 5108              mov A,[_Ri_Max+1]
 03EE 020A              add A,[_Ri_Min+1]
 03F0 5300              mov [__r1],A
 03F2 5107              mov A,[_Ri_Max]
 03F4 0A09              adc A,[_Ri_Min]
 03F6 5300              mov [__r0],A
 03F8 5000              mov A,0
 03FA 08                push A
 03FB 5002              mov A,2
 03FD 08                push A
 03FE 5100              mov A,[__r0]
 0400 08                push A
 0401 5100              mov A,[__r1]
 0403 08                push A
 0404 7C0000            xcall __divmod_16X16_16
 0407 18                pop A
 0408 531E              mov [_Ri_Mid+1],A
 040A 18                pop A
 040B 531D              mov [_Ri_Mid],A
 040D 38FE              add SP,-2
 040F                   .dbline 444
 040F           ;               }
 040F           L40:
 040F                   .dbline 445
 040F           ;               if ((ADC_IF&4)==4)
 040F 5100              mov A,[_ADC_IF]
 0411 2104              and A,4
 0413 3904              cmp A,4
 0415 B027              jnz L42
 0417                   .dbline 447
 0417           ;               {
 0417           ;                       ADC_IF=ADC_IF&251;
 0417                   .dbline 447
 0417 2600FB            and [_ADC_IF],-5
 041A                   .dbline 448
 041A           ;                       ip=IIR_Int(ip_x1*2,ip,ip_Filter_Strength);
 041A 5004              mov A,4
 041C 08                push A
 041D 5105              mov A,[_ip]
 041F 08                push A
 0420 5106              mov A,[_ip+1]
 0422 08                push A
 0423 5F0000            mov [__r1],[_ip_x1]
 0426 550000            mov [__r0],0
 0429 6500              asl [__r1]
 042B 6B00              rlc [__r0]
 042D 5100              mov A,[__r0]
 042F 08                push A
 0430 5100              mov A,[__r1]
 0432 08                push A
 0433 9E47              xcall _IIR_Int
 0435 38FB              add SP,-5
 0437 5F0600            mov [_ip+1],[__r1]
 043A 5F0500            mov [_ip],[__r0]
 043D                   .dbline 449
 043D           ;               }
 043D           L42:
 043D                   .dbline 450
 043D           ;               Ia_PID_Counter+=Sleep_Counter;
 043D 5100              mov A,[_Sleep_Counter]
 043F 0405              add [_Ia_PID_Counter],A
 0441                   .dbline 451
 0441           ;               Heater_PID_Counter+=Sleep_Counter;
 0441 5100              mov A,[_Sleep_Counter]
 0443 0407              add [_Heater_PID_Counter],A
 0445                   .dbline 452
 0445           ;               Heatup_Counter+=Sleep_Counter;
 0445 5100              mov A,[_Sleep_Counter]
 0447 0409              add [_Heatup_Counter],A
 0449                   .dbline 453
 0449           ;               Vout_Lookup_Counter+=Sleep_Counter;
 0449 5100              mov A,[_Sleep_Counter]
 044B 0406              add [_Vout_Lookup_Counter],A
 044D                   .dbline 454
 044D           ;               LCD_Counter+=Sleep_Counter;
 044D 5100              mov A,[_Sleep_Counter]
 044F 0408              add [_LCD_Counter],A
 0451                   .dbline 455
 0451           ;               Sleep_Counter=0;
 0451 550000            mov [_Sleep_Counter],0
 0454                   .dbline 456
 0454           ;               if (Ia_PID_Counter>Ia_PID_Counter_Set)
 0454 5001              mov A,1
 0456 3A05              cmp A,[_Ia_PID_Counter]
 0458 D006              jnc L44
 045A           X26:
 045A                   .dbline 458
 045A           ;               {
 045A           ;                       Ia_PID_Counter=0;
 045A                   .dbline 458
 045A 550500            mov [_Ia_PID_Counter],0
 045D                   .dbline 459
 045D           ;                       Ia_PID();
 045D 9CFB              xcall _Ia_PID
 045F                   .dbline 460
 045F           ;               }
 045F           L44:
 045F                   .dbline 461
 045F           ;               if (Heater_PID_Counter>Heater_PID_Counter_Set)
 045F 5019              mov A,25
 0461 3A07              cmp A,[_Heater_PID_Counter]
 0463 D006              jnc L46
 0465           X27:
 0465                   .dbline 463
 0465           ;               {
 0465           ;                       Heater_PID_Counter=0;
 0465                   .dbline 463
 0465 550700            mov [_Heater_PID_Counter],0
 0468                   .dbline 464
 0468           ;                       Heater_PID();
 0468 9B96              xcall _Heater_PID
 046A                   .dbline 465
 046A           ;               }
 046A           L46:
 046A                   .dbline 466
 046A           ;               if (Vout_Lookup_Counter>Vout_Lookup_Counter_Set)
 046A 5019              mov A,25
 046C 3A06              cmp A,[_Vout_Lookup_Counter]
 046E D076              jnc L48
 0470           X28:
 0470                   .dbline 468
 0470           ;               {
 0470           ;                       Vout_Lookup_Counter=0;
 0470                   .dbline 468
 0470 550600            mov [_Vout_Lookup_Counter],0
 0473                   .dbline 469
 0473           ;                       temp_int=ip-ip_to_Vout_Lookup_Start;
 0473 5106              mov A,[_ip+1]
 0475 1187              sub A,-121
 0477 5401              mov [X+1],A
 0479 5105              mov A,[_ip]
 047B 1900              sbb A,0
 047D 5400              mov [X+0],A
 047F                   .dbline 470
 047F           ;                       if (temp_int<0)
 047F 5201              mov A,[X+1]
 0481 1100              sub A,0
 0483 5200              mov A,[X+0]
 0485 3180              xor A,-128
 0487 1980              sbb A,(0 ^ 0x80)
 0489 D007              jnc L50
 048B           X29:
 048B                   .dbline 472
 048B           ;                       {
 048B           ;                               temp_int=0;
 048B                   .dbline 472
 048B 560100            mov [X+1],0
 048E 560000            mov [X+0],0
 0491                   .dbline 473
 0491           ;                       }
 0491           L50:
 0491                   .dbline 474
 0491           ;                       if (temp_int>(ip_to_Vout_Lookup_Size-1))
 0491 509D              mov A,-99
 0493 1301              sub A,[X+1]
 0495 5200              mov A,[X+0]
 0497 3180              xor A,-128
 0499 5300              mov [__rX],A
 049B 5080              mov A,(0 ^ 0x80)
 049D 1A00              sbb A,[__rX]
 049F D007              jnc L52
 04A1           X30:
 04A1                   .dbline 476
 04A1           ;                       {
 04A1           ;                               temp_int=(ip_to_Vout_Lookup_Size-1);
 04A1                   .dbline 476
 04A1 56019D            mov [X+1],-99
 04A4 560000            mov [X+0],0
 04A7                   .dbline 477
 04A7           ;                       }
 04A7           L52:
 04A7                   .dbline 478
 04A7           ;                       PWM8_Vout_WritePulseWidth(ip_to_Vout_Lookup[temp_int]);
 04A7 5201              mov A,[X+1]
 04A9 0100              add A,<_ip_to_Vout_Lookup
 04AB 5300              mov [__r1],A
 04AD 5200              mov A,[X+0]
 04AF 0900              adc A,>_ip_to_Vout_Lookup
 04B1 10                push X
 04B2 5800              mov X,[__r1]
 04B4 28                romx
 04B5 7C0000            xcall _PWM8_Vout_WritePulseWidth
 04B8 20                pop X
 04B9                   .dbline 481
 04B9           ;                       
 04B9           ;                       #ifdef NB_Out
 04B9           ;                               temp_byte=23;//0.45v
 04B9 560217            mov [X+2],23
 04BC                   .dbline 482
 04BC           ;                               if (ip<251) // 251 =0.9797787392968
 04BC 5106              mov A,[_ip+1]
 04BE 11FB              sub A,-5
 04C0 5105              mov A,[_ip]
 04C2 3180              xor A,-128
 04C4 1980              sbb A,(0 ^ 0x80)
 04C6 D004              jnc L54
 04C8           X31:
 04C8                   .dbline 484
 04C8           ;                               {
 04C8           ;                                       temp_byte=46; //0.9v
 04C8                   .dbline 484
 04C8 56022E            mov [X+2],46
 04CB                   .dbline 486
 04CB           ;                                       
 04CB           ;                               }
 04CB           L54:
 04CB                   .dbline 487
 04CB           ;                               if (ip>259) //259 = 1.02295956968912
 04CB 5003              mov A,3
 04CD 1206              sub A,[_ip+1]
 04CF 5105              mov A,[_ip]
 04D1 3180              xor A,-128
 04D3 5300              mov [__rX],A
 04D5 5081              mov A,(1 ^ 0x80)
 04D7 1A00              sbb A,[__rX]
 04D9 D004              jnc L56
 04DB           X32:
 04DB                   .dbline 489
 04DB           ;                               {
 04DB           ;                                       temp_byte=0; //0v
 04DB                   .dbline 489
 04DB 560200            mov [X+2],0
 04DE                   .dbline 490
 04DE           ;                               }
 04DE           L56:
 04DE                   .dbline 491
 04DE           ;                               PWM8_NB_Out_WritePulseWidth(temp_byte);
 04DE 10                push X
 04DF 5202              mov A,[X+2]
 04E1 7C0000            xcall _PWM8_NB_Out_WritePulseWidth
 04E4 20                pop X
 04E5                   .dbline 494
 04E5           ;                       #endif
 04E5           ;                       
 04E5           ;               }
 04E5           L48:
 04E5                   .dbline 495
 04E5           ;               if (LCD_Counter>LCD_Counter_Set)
 04E5 5032              mov A,50
 04E7 3A08              cmp A,[_LCD_Counter]
 04E9 D1AF              jnc L58
 04EB           X33:
 04EB                   .dbline 497
 04EB           ;               {
 04EB           ;                       LCD_Counter=0;
 04EB                   .dbline 497
 04EB 550800            mov [_LCD_Counter],0
 04EE                   .dbline 524
 04EE           ;                       
 04EE           ;                       #ifdef LCD_Lambda_Graph
 04EE           ;                               temp_int=ip-ip_to_Lambda_Lookup_Start;
 04EE           ;                               if (temp_int<0)
 04EE           ;                               {
 04EE           ;                                       temp_int=0;
 04EE           ;                               }
 04EE           ;                               if (temp_int>(ip_to_Lambda_Lookup_Size-1))
 04EE           ;                               {
 04EE           ;                                       temp_int=(ip_to_Lambda_Lookup_Size-1);
 04EE           ;                               }
 04EE           ;                               Lambda_x100=ip_to_Graph_Lookup[temp_int];
 04EE           ;                               
 04EE           ;                               // if both numeric AFR and Lambda bargraph is to be used put bargraph in second row
 04EE           ;                               #ifdef LCD_AFR_digits
 04EE           ;                                       LCD_DrawBG(1,0,16,Lambda_x100);
 04EE           ;                               #else
 04EE           ;                                       #ifdef LCD_Lambda_digits
 04EE           ;                                               LCD_DrawBG(1,0,16,Lambda_x100);
 04EE           ;                                       #else
 04EE           ;                                               LCD_DrawBG(0,0,16,Lambda_x100);
 04EE           ;                                       #endif
 04EE           ;                               #endif
 04EE           ;                       #endif
 04EE           ;                       
 04EE           ;                       #ifdef LCD_AFR_digits
 04EE           ;                               temp_int=ip-ip_to_AFR_Lookup_Start;
 04EE 5106              mov A,[_ip+1]
 04F0 1187              sub A,-121
 04F2 5401              mov [X+1],A
 04F4 5105              mov A,[_ip]
 04F6 1900              sbb A,0
 04F8 5400              mov [X+0],A
 04FA                   .dbline 525
 04FA           ;                               if (temp_int<0)
 04FA 5201              mov A,[X+1]
 04FC 1100              sub A,0
 04FE 5200              mov A,[X+0]
 0500 3180              xor A,-128
 0502 1980              sbb A,(0 ^ 0x80)
 0504 D007              jnc L60
 0506           X34:
 0506                   .dbline 527
 0506           ;                               {
 0506           ;                                       temp_int=0;
 0506                   .dbline 527
 0506 560100            mov [X+1],0
 0509 560000            mov [X+0],0
 050C                   .dbline 528
 050C           ;                               }
 050C           L60:
 050C                   .dbline 529
 050C           ;                               if (temp_int>(ip_to_AFR_Lookup_Size-1))
 050C 509D              mov A,-99
 050E 1301              sub A,[X+1]
 0510 5200              mov A,[X+0]
 0512 3180              xor A,-128
 0514 5300              mov [__rX],A
 0516 5080              mov A,(0 ^ 0x80)
 0518 1A00              sbb A,[__rX]
 051A D007              jnc L62
 051C           X35:
 051C                   .dbline 531
 051C           ;                               {
 051C           ;                                       temp_int=(ip_to_AFR_Lookup_Size-1);
 051C                   .dbline 531
 051C 56019D            mov [X+1],-99
 051F 560000            mov [X+0],0
 0522                   .dbline 532
 0522           ;                               }
 0522           L62:
 0522                   .dbline 533
 0522           ;                               temp_byte = temp_int;   // code size optimization
 0522 5201              mov A,[X+1]
 0524 5402              mov [X+2],A
 0526                   .dbline 536
 0526           ;                               
 0526           ;                               // AFR integer part (temporarly first digit is always "1")
 0526           ;                               LCD_Position(0,6);
 0526 10                push X
 0527 5706              mov X,6
 0529 5000              mov A,0
 052B 7C0000            xcall _LCD_Position
 052E 20                pop X
 052F                   .dbline 537
 052F           ;                               LCD_WriteData('0' + ((ip_to_AFR_Lookup[temp_byte] & 0xF0) >> 4));
 052F 5202              mov A,[X+2]
 0531 5300              mov [__r1],A
 0533 550000            mov [__r0],0
 0536 06009E            add [__r1],<_ip_to_AFR_Lookup
 0539 0E009E            adc [__r0],>_ip_to_AFR_Lookup
 053C 5100              mov A,[__r0]
 053E 10                push X
 053F 5800              mov X,[__r1]
 0541 28                romx
 0542 20                pop X
 0543 21F0              and A,-16
 0545 67                asr A
 0546 67                asr A
 0547 67                asr A
 0548 67                asr A
 0549 210F              and A,15
 054B 0130              add A,48
 054D 10                push X
 054E 7C0000            xcall _LCD_WriteData
 0551                   .dbline 540
 0551           ;                               
 0551           ;                               // AFR decimal point part
 0551           ;                               LCD_WriteData('.');
 0551 502E              mov A,46
 0553 7C0000            xcall _LCD_WriteData
 0556 20                pop X
 0557                   .dbline 541
 0557           ;                               LCD_WriteData('0' + (ip_to_AFR_Lookup[temp_byte] & 0x0F));
 0557 5202              mov A,[X+2]
 0559 5300              mov [__r1],A
 055B 550000            mov [__r0],0
 055E 06009E            add [__r1],<_ip_to_AFR_Lookup
 0561 0E009E            adc [__r0],>_ip_to_AFR_Lookup
 0564 5100              mov A,[__r0]
 0566 10                push X
 0567 5800              mov X,[__r1]
 0569 28                romx
 056A 20                pop X
 056B 210F              and A,15
 056D 0130              add A,48
 056F 10                push X
 0570 7C0000            xcall _LCD_WriteData
 0573 20                pop X
 0574                   .dbline 545
 0574           ;                       #endif
 0574           ;                       
 0574           ;                       #ifdef LCD_Lambda_digits
 0574           ;                               temp_int=ip-ip_to_LambdaD_Lookup_Start; 
 0574 5106              mov A,[_ip+1]
 0576 1187              sub A,-121
 0578 5401              mov [X+1],A
 057A 5105              mov A,[_ip]
 057C 1900              sbb A,0
 057E 5400              mov [X+0],A
 0580                   .dbline 546
 0580           ;                               if (temp_int<0)
 0580 5201              mov A,[X+1]
 0582 1100              sub A,0
 0584 5200              mov A,[X+0]
 0586 3180              xor A,-128
 0588 1980              sbb A,(0 ^ 0x80)
 058A D007              jnc L64
 058C           X36:
 058C                   .dbline 548
 058C           ;                               {
 058C           ;                                       temp_int=0;
 058C                   .dbline 548
 058C 560100            mov [X+1],0
 058F 560000            mov [X+0],0
 0592                   .dbline 549
 0592           ;                               }
 0592           L64:
 0592                   .dbline 550
 0592           ;                               if (temp_int>(ip_to_LambdaD_Lookup_Size-1))
 0592 509D              mov A,-99
 0594 1301              sub A,[X+1]
 0596 5200              mov A,[X+0]
 0598 3180              xor A,-128
 059A 5300              mov [__rX],A
 059C 5080              mov A,(0 ^ 0x80)
 059E 1A00              sbb A,[__rX]
 05A0 D007              jnc L66
 05A2           X37:
 05A2                   .dbline 552
 05A2           ;                               {
 05A2           ;                                       temp_int=(ip_to_LambdaD_Lookup_Size-1);
 05A2                   .dbline 552
 05A2 56019D            mov [X+1],-99
 05A5 560000            mov [X+0],0
 05A8                   .dbline 553
 05A8           ;                               }
 05A8           L66:
 05A8                   .dbline 554
 05A8           ;                               temp_byte = temp_int;   // code size optimization
 05A8 5201              mov A,[X+1]
 05AA 5402              mov [X+2],A
 05AC                   .dbline 560
 05AC           ;                               
 05AC           ;                               // Lambda int part      
 05AC           ;                               #ifndef LCD_AFR_digits
 05AC           ;                                       LCD_Position(0,5);
 05AC           ;                               #else
 05AC           ;                                       LCD_Position(1,5);
 05AC 10                push X
 05AD 5705              mov X,5
 05AF 5001              mov A,1
 05B1 7C0000            xcall _LCD_Position
 05B4 20                pop X
 05B5                   .dbline 562
 05B5           ;                               #endif
 05B5           ;                               if (temp_byte < 120)    // 120th value is equal to lambda 1.00
 05B5 3D0278            cmp [X+2],120
 05B8 D006              jnc L68
 05BA           X38:
 05BA                   .dbline 563
 05BA           ;                                       Lambda_x100 = '0';
 05BA 550230            mov [_Lambda_x100],48
 05BD 8004              xjmp L69
 05BF           L68:
 05BF                   .dbline 565
 05BF           ;                               else
 05BF           ;                                       Lambda_x100 = '1';
 05BF 550231            mov [_Lambda_x100],49
 05C2           L69:
 05C2                   .dbline 566
 05C2           ;                               LCD_WriteData(Lambda_x100);
 05C2 10                push X
 05C3 5102              mov A,[_Lambda_x100]
 05C5 7C0000            xcall _LCD_WriteData
 05C8                   .dbline 569
 05C8           ;                               
 05C8           ;                               // Lambda 0.x part
 05C8           ;                               LCD_WriteData('.');
 05C8 502E              mov A,46
 05CA 7C0000            xcall _LCD_WriteData
 05CD 20                pop X
 05CE                   .dbline 570
 05CE           ;                               LCD_WriteData('0' + ((ip_to_Lambda_Lookup[temp_byte] & 0xF0) >> 4));
 05CE 5202              mov A,[X+2]
 05D0 5300              mov [__r1],A
 05D2 550000            mov [__r0],0
 05D5 06003C            add [__r1],<_ip_to_Lambda_Lookup
 05D8 0E003C            adc [__r0],>_ip_to_Lambda_Lookup
 05DB 5100              mov A,[__r0]
 05DD 10                push X
 05DE 5800              mov X,[__r1]
 05E0 28                romx
 05E1 20                pop X
 05E2 21F0              and A,-16
 05E4 67                asr A
 05E5 67                asr A
 05E6 67                asr A
 05E7 67                asr A
 05E8 210F              and A,15
 05EA 0130              add A,48
 05EC 10                push X
 05ED 7C0000            xcall _LCD_WriteData
 05F0 20                pop X
 05F1                   .dbline 573
 05F1           ;                               
 05F1           ;                               // Lambda 0.0x part
 05F1           ;                               LCD_WriteData('0' + (ip_to_Lambda_Lookup[temp_byte] & 0x0F));
 05F1 5202              mov A,[X+2]
 05F3 5300              mov [__r1],A
 05F5 550000            mov [__r0],0
 05F8 06003C            add [__r1],<_ip_to_Lambda_Lookup
 05FB 0E003C            adc [__r0],>_ip_to_Lambda_Lookup
 05FE 5100              mov A,[__r0]
 0600 10                push X
 0601 5800              mov X,[__r1]
 0603 28                romx
 0604 20                pop X
 0605 210F              and A,15
 0607 0130              add A,48
 0609 10                push X
 060A 7C0000            xcall _LCD_WriteData
 060D 20                pop X
 060E                   .dbline 591
 060E           ;                       #endif
 060E           ;                       
 060E           ;                       #ifdef LCD_Temperature_Graph
 060E           ;                               temp_int=Ri_Delta-Ri_Delta_to_Temperature_C_Start;
 060E           ;                               if (temp_int<0)
 060E           ;                               {
 060E           ;                                       temp_int=0;
 060E           ;                               }
 060E           ;                               if (temp_int>(Ri_Delta_to_Temperature_C_Size-1))
 060E           ;                               {
 060E           ;                                       temp_int=(Ri_Delta_to_Temperature_C_Size-1);
 060E           ;                               }
 060E           ;                               LSU_Temperature_C=Ri_Delta_to_Graph[temp_int];
 060E           ;                               LCD_DrawBG(1,0,16,LSU_Temperature_C);
 060E           ;                       #endif
 060E           ;                       
 060E           ;                       #ifdef LCD_Temperature_digits
 060E           ;                               temp_int=Ri_Delta-Ri_Delta_to_Temperature_C_dig_Start;
 060E 511C              mov A,[_Ri_Delta+1]
 0610 1171              sub A,113
 0612 5401              mov [X+1],A
 0614 511B              mov A,[_Ri_Delta]
 0616 1900              sbb A,0
 0618 5400              mov [X+0],A
 061A                   .dbline 592
 061A           ;                               if (temp_int<0)
 061A 5201              mov A,[X+1]
 061C 1100              sub A,0
 061E 5200              mov A,[X+0]
 0620 3180              xor A,-128
 0622 1980              sbb A,(0 ^ 0x80)
 0624 D007              jnc L70
 0626           X39:
 0626                   .dbline 594
 0626           ;                               {
 0626           ;                                       temp_int=0;
 0626                   .dbline 594
 0626 560100            mov [X+1],0
 0629 560000            mov [X+0],0
 062C                   .dbline 595
 062C           ;                               }
 062C           L70:
 062C                   .dbline 596
 062C           ;                               if (temp_int>(Ri_Delta_to_Temperature_C_dig_Size-1))
 062C 504A              mov A,74
 062E 1301              sub A,[X+1]
 0630 5200              mov A,[X+0]
 0632 3180              xor A,-128
 0634 5300              mov [__rX],A
 0636 5080              mov A,(0 ^ 0x80)
 0638 1A00              sbb A,[__rX]
 063A D007              jnc L72
 063C           X40:
 063C                   .dbline 598
 063C           ;                               {
 063C           ;                                       temp_int=(Ri_Delta_to_Temperature_C_dig_Size-1);
 063C                   .dbline 598
 063C 56014A            mov [X+1],74
 063F 560000            mov [X+0],0
 0642                   .dbline 599
 0642           ;                               }
 0642           L72:
 0642                   .dbline 600
 0642           ;                               temp_byte = temp_int;   // code size optimization
 0642 5201              mov A,[X+1]
 0644 5402              mov [X+2],A
 0646                   .dbline 604
 0646           ;       
 0646           ;                               // Temperature hundreds part (7 or 8)   
 0646           ;                               #if defined LCD_Lambda_Graph || (defined LCD_AFR_digits && defined LCD_Lambda_digits)
 0646           ;                                       LCD_Position(0,12);
 0646 10                push X
 0647 570C              mov X,12
 0649 5000              mov A,0
 064B 7C0000            xcall _LCD_Position
 064E 20                pop X
 064F                   .dbline 609
 064F           ;                               #else
 064F           ;                                       LCD_Position(1,5);
 064F           ;                               #endif
 064F           ; 
 064F           ;                               if (temp_byte < 15)
 064F 3D020F            cmp [X+2],15
 0652 D006              jnc L74
 0654           X41:
 0654                   .dbline 610
 0654           ;                                       Lambda_x100 = '8';
 0654 550238            mov [_Lambda_x100],56
 0657 8004              xjmp L75
 0659           L74:
 0659                   .dbline 612
 0659           ;                               else
 0659           ;                                       Lambda_x100 = '7';
 0659 550237            mov [_Lambda_x100],55
 065C           L75:
 065C                   .dbline 614
 065C           ;                               
 065C           ;                               LCD_WriteData(Lambda_x100);
 065C 10                push X
 065D 5102              mov A,[_Lambda_x100]
 065F 7C0000            xcall _LCD_WriteData
 0662 20                pop X
 0663                   .dbline 617
 0663           ;                                               
 0663           ;                               // Temperature tens part
 0663           ;                               LCD_WriteData('0' + ((Ri_Delta_to_dig[temp_int] & 0xF0) >> 4));
 0663 5201              mov A,[X+1]
 0665 01DA              add A,<_Ri_Delta_to_dig
 0667 5300              mov [__r1],A
 0669 5200              mov A,[X+0]
 066B 09DA              adc A,>_Ri_Delta_to_dig
 066D 10                push X
 066E 5800              mov X,[__r1]
 0670 28                romx
 0671 20                pop X
 0672 21F0              and A,-16
 0674 67                asr A
 0675 67                asr A
 0676 67                asr A
 0677 67                asr A
 0678 210F              and A,15
 067A 0130              add A,48
 067C 10                push X
 067D 7C0000            xcall _LCD_WriteData
 0680 20                pop X
 0681                   .dbline 620
 0681           ;                               
 0681           ;                               // Temperature ones part
 0681           ;                               LCD_WriteData('0' + (Ri_Delta_to_dig[temp_int] & 0x0F));
 0681 5201              mov A,[X+1]
 0683 01DA              add A,<_Ri_Delta_to_dig
 0685 5300              mov [__r1],A
 0687 5200              mov A,[X+0]
 0689 09DA              adc A,>_Ri_Delta_to_dig
 068B 10                push X
 068C 5800              mov X,[__r1]
 068E 28                romx
 068F 20                pop X
 0690 210F              and A,15
 0692 0130              add A,48
 0694 10                push X
 0695 7C0000            xcall _LCD_WriteData
 0698 20                pop X
 0699                   .dbline 711
 0699           ;                       #endif
 0699           ;                       
 0699           ;                       #ifdef LED_AFR          
 0699           ;                               temp_int=ip-ip_to_AFR_Lookup_Start;
 0699           ;                               if (temp_int<0)
 0699           ;                               {
 0699           ;                                       temp_int=0;
 0699           ;                               }
 0699           ;                               if (temp_int>(ip_to_AFR_Lookup_Size-1))
 0699           ;                               {
 0699           ;                                       temp_int=(ip_to_AFR_Lookup_Size-1);
 0699           ;                               }
 0699           ;                               temp_byte = temp_int;   // code size optimization
 0699           ;                               
 0699           ;                               /*// AFR integer part (temporarly first digit is always "1"), add dot
 0699           ;                               digits[0] = digitToSegment[(ip_to_AFR_Lookup[temp_byte] & 0xF0) >> 4] | 0x80;
 0699           ;                               
 0699           ;                               // AFR decimal part
 0699           ;                               digits[1] = digitToSegment[ip_to_AFR_Lookup[temp_byte] & 0x0F];
 0699           ;                               
 0699           ;                               TM1637_setSegments(digits, 2, 2);*/
 0699           ;                               
 0699           ;                               #ifdef LED_Lambda
 0699           ;                                       if ((SWPORT & SWPIN) == 0)
 0699           ;                                       {
 0699           ;                                               // AFR integer part (temporarly first digit is always "1"), add dot
 0699           ;                                               digits[1] = digitToSegment[(ip_to_AFR_Lookup[temp_byte] & 0xF0) >> 4] | 0x80;
 0699           ;                                               
 0699           ;                                               // AFR decimal part
 0699           ;                                               digits[2] = digitToSegment[ip_to_AFR_Lookup[temp_byte] & 0x0F];
 0699           ;                                               
 0699           ;                                               digits[0] = digitToSegment[1]; // temporarly first digit is always "1"
 0699           ;                                               TM1637_setSegments(digits, 3, 1);
 0699           ;                                       }       
 0699           ;                               #else
 0699           ;                                       // AFR integer part (temporarly first digit is always "1"), add dot
 0699           ;                                       digits[0] = digitToSegment[(ip_to_AFR_Lookup[temp_byte] & 0xF0) >> 4] | 0x80;
 0699           ;                               
 0699           ;                                       // AFR decimal part
 0699           ;                                       digits[1] = digitToSegment[ip_to_AFR_Lookup[temp_byte] & 0x0F];
 0699           ;                               
 0699           ;                                       TM1637_setSegments(digits, 2, 2);
 0699           ;                               #endif
 0699           ;                       #endif
 0699           ;                       
 0699           ;                       #ifdef LED_Lambda
 0699           ;                               temp_int=ip-ip_to_LambdaD_Lookup_Start; 
 0699           ;                               if (temp_int<0)
 0699           ;                               {
 0699           ;                                       temp_int=0;
 0699           ;                               }
 0699           ;                               if (temp_int>(ip_to_LambdaD_Lookup_Size-1))
 0699           ;                               {
 0699           ;                                       temp_int=(ip_to_LambdaD_Lookup_Size-1);
 0699           ;                               }
 0699           ;                               temp_byte = temp_int;   // code size optimization
 0699           ;                               
 0699           ;                               #ifdef LED_AFR
 0699           ;                                       if ((SWPORT & SWPIN) != 0)
 0699           ;                                       {
 0699           ;                                               // Lambda int part, add dot
 0699           ;                                               if (temp_byte < 120)    // 120th value is equal to lambda 1.00
 0699           ;                                                       digits[0] = digitToSegment[0] | 0x80;
 0699           ;                                               else
 0699           ;                                                       digits[0] = digitToSegment[1] | 0x80;
 0699           ;                                       
 0699           ;                                               // Lambda 0.x0 part
 0699           ;                                               digits[1] = digitToSegment[(ip_to_Lambda_Lookup[temp_byte] & 0xF0) >> 4];
 0699           ;                                       
 0699           ;                                               // Lambda 0.0x part
 0699           ;                                               digits[2] = digitToSegment[ip_to_Lambda_Lookup[temp_byte] & 0x0F];
 0699           ;                                                       
 0699           ;                                               TM1637_setSegments(digits, 3, 1);
 0699           ;                                       }
 0699           ;                               #else
 0699           ;                                       // Lambda int part, add dot
 0699           ;                                       if (temp_byte < 120)    // 120th value is equal to lambda 1.00
 0699           ;                                               digits[0] = digitToSegment[0] | 0x80;
 0699           ;                                       else
 0699           ;                                               digits[0] = digitToSegment[1] | 0x80;
 0699           ;                                       
 0699           ;                                       // Lambda 0.x0 part
 0699           ;                                       digits[1] = digitToSegment[(ip_to_Lambda_Lookup[temp_byte] & 0xF0) >> 4];
 0699           ;                                       
 0699           ;                                       // Lambda 0.0x part
 0699           ;                                       digits[2] = digitToSegment[ip_to_Lambda_Lookup[temp_byte] & 0x0F];
 0699           ;                                                       
 0699           ;                                       TM1637_setSegments(digits, 3, 1);
 0699           ;                               #endif
 0699           ;                       #endif
 0699           ;               }
 0699           L58:
 0699                   .dbline 712
 0699           ;               if (Heatup_Heater_Output<255)
 0699 3C04FF            cmp [_Heatup_Heater_Output],-1
 069C DCAC              jnc L34
 069E           X42:
 069E                   .dbline 714
 069E           ;               {   
 069E           ;                       if (Heatup_Counter>Heatup_Counter_Set)
 069E                   .dbline 714
 069E 5064              mov A,100
 06A0 3A09              cmp A,[_Heatup_Counter]
 06A2 D006              jnc L78
 06A4           X43:
 06A4                   .dbline 716
 06A4           ;                       {
 06A4           ;                               Heatup_Counter=0;
 06A4                   .dbline 716
 06A4 550900            mov [_Heatup_Counter],0
 06A7                   .dbline 717
 06A7           ;                               Heatup_Heater_Output++;
 06A7 7604              inc [_Heatup_Heater_Output]
 06A9                   .dbline 718
 06A9           ;                       }
 06A9           L78:
 06A9                   .dbline 719
 06A9           ;                       if ((Ri_Min>50) && (Ri_Max<475) && (Ri_Delta<Ri_Delta_Target))
 06A9 5032              mov A,50
 06AB 120A              sub A,[_Ri_Min+1]
 06AD 5109              mov A,[_Ri_Min]
 06AF 3180              xor A,-128
 06B1 5300              mov [__rX],A
 06B3 5080              mov A,(0 ^ 0x80)
 06B5 1A00              sbb A,[__rX]
 06B7 DC91              jnc L34
 06B9           X44:
 06B9 5108              mov A,[_Ri_Max+1]
 06BB 11DB              sub A,-37
 06BD 5107              mov A,[_Ri_Max]
 06BF 3180              xor A,-128
 06C1 1981              sbb A,(1 ^ 0x80)
 06C3 DC85              jnc L34
 06C5           X45:
 06C5 511C              mov A,[_Ri_Delta+1]
 06C7 118F              sub A,-113
 06C9 511B              mov A,[_Ri_Delta]
 06CB 3180              xor A,-128
 06CD 1980              sbb A,(0 ^ 0x80)
 06CF DC79              jnc L34
 06D1           X46:
 06D1                   .dbline 721
 06D1           ;                       {
 06D1           ;                               Heatup_Heater_Output=255;
 06D1                   .dbline 721
 06D1 5504FF            mov [_Heatup_Heater_Output],-1
 06D4                   .dbline 722
 06D4           ;                               Ri_Delta_Error_Sum=0;
 06D4 550300            mov [_Ri_Delta_Error_Sum+1],0
 06D7 550200            mov [_Ri_Delta_Error_Sum],0
 06DA                   .dbline 723
 06DA           ;                       }
 06DA                   .dbline 724
 06DA           ;               }
 06DA                   .dbline 725
 06DA           ;       }
 06DA                   .dbline 428
 06DA                   .dbline 428
 06DA 8C6E              xjmp L34
 06DC           X25:
 06DC                   .dbline -2
 06DC           L30:
 06DC 38F7              add SP,-9
 06DE 20                pop X
 06DF                   .dbline 0 ; func end
 06DF 8FFF              jmp .
 06E1                   .dbsym l temp_int2 7 I
 06E1                   .dbsym l temp_ulong 3 l
 06E1                   .dbsym l temp_byte 2 c
 06E1                   .dbsym l temp_int 0 I
 06E1                   .dbend
                        .area bss(ram, con, rel)
 0000                   .dbfile I:\PSOCDO~1\WBOOS_~2\DSTAGE~1\DSTAGE~1\main.c
 0000           _LSU_Temperature_C::
 0000                   .blkb 2
 0002                   .dbsym e LSU_Temperature_C _LSU_Temperature_C I
 0002           _Lambda_x100::
 0002                   .blkb 1
 0003                   .dbsym e Lambda_x100 _Lambda_x100 c
 0003           _ip_Justified::
 0003                   .blkb 2
 0005                   .dbsym e ip_Justified _ip_Justified I
 0005           _ip::
 0005                   .blkb 2
 0007                   .dbsym e ip _ip I
 0007           _Ri_Max::
 0007                   .blkb 2
 0009                   .dbsym e Ri_Max _Ri_Max I
 0009           _Ri_Min::
 0009                   .blkb 2
 000B                   .dbsym e Ri_Min _Ri_Min I
 000B           _Ia_Iout::
 000B                   .blkb 2
 000D                   .dbsym e Ia_Iout _Ia_Iout I
 000D           _Ia_Pout::
 000D                   .blkb 2
 000F                   .dbsym e Ia_Pout _Ia_Pout I
 000F           _Ia_Output::
 000F                   .blkb 2
 0011                   .dbsym e Ia_Output _Ia_Output I
 0011           _Ri_Mid_Error::
 0011                   .blkb 2
 0013                   .dbsym e Ri_Mid_Error _Ri_Mid_Error I
 0013           _Heater_Iout::
 0013                   .blkb 2
 0015                   .dbsym e Heater_Iout _Heater_Iout I
 0015           _Heater_Pout::
 0015                   .blkb 2
 0017                   .dbsym e Heater_Pout _Heater_Pout I
 0017           _Heater_Output::
 0017                   .blkb 2
 0019                   .dbsym e Heater_Output _Heater_Output I
 0019           _Ri_Delta_Error::
 0019                   .blkb 2
 001B                   .dbsym e Ri_Delta_Error _Ri_Delta_Error I
 001B           _Ri_Delta::
 001B                   .blkb 2
 001D                   .dbsym e Ri_Delta _Ri_Delta I
 001D           _Ri_Mid::
 001D                   .blkb 2
 001F                   .dbsym e Ri_Mid _Ri_Mid I
                        .area lit(rom, con, rel, lit)
 0225           L33:
 0225 543A0000          .byte 'T,58,0,0
 0229           L32:
 0229 4C414D3A20300000  .byte 'L,'A,'M,58,32,48,0,0
 0231           L31:
 0231 4146523A20310000  .byte 'A,'F,'R,58,32,49,0,0
